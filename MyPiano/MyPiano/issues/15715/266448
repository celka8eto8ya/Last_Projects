--- Source Code/NAudio/CoreAudioApi/MMDevice.cs	Mon Jan 19 16:26:36 1970
+++ Source Code/NAudio/CoreAudioApi/MMDevice.cs	Mon Jan 19 16:26:36 1970
@@ -148,9 +148,9 @@
                 {
                     GetPropertyInformation();
                 }
-                if (_PropertyStore.Contains(PropertyKeys.PKEY_DeviceInterface_FriendlyName))
+                if (_PropertyStore.Contains(PropertyKeys.PKEY_Device_FriendlyName))
                 {
-                    return (string)_PropertyStore[PropertyKeys.PKEY_DeviceInterface_FriendlyName].Value;
+                    return (string)_PropertyStore[PropertyKeys.PKEY_Device_FriendlyName].Value;
                 }
                 else
                     return "Unknown";
--- Source Code/NAudio/CoreAudioApi/PropertyKey.cs	Mon Jan 19 16:26:36 1970
+++ Source Code/NAudio/CoreAudioApi/PropertyKey.cs	Mon Jan 19 16:26:36 1970
@@ -17,5 +17,37 @@
         /// Property ID
         /// </summary>
         public int propertyId;
+
+        /// <summary>
+        /// Generates a PropertyKey with the specified Guid and Property ID.
+        /// </summary>
+        /// <param name="formatId">GUID representing the format</param>
+        /// <param name="propertyId">Property ID</param>
+        public PropertyKey(Guid formatId, int propertyId)
+        {
+            this.formatId = formatId;
+            this.propertyId = propertyId;
+        }
+
+        /// <summary>
+        /// Generates a PropertyKey structure with Guid and PropertyID specified as found in the C++ headers
+        /// </summary>
+        /// <param name="a">The first 4 bytes of the GUID.</param>
+        /// <param name="b">The next 2 bytes of the GUID.</param>
+        /// <param name="c">The next 2 bytes of the GUID.</param>
+        /// <param name="d">The next byte of the GUID.</param>
+        /// <param name="e">The next byte of the GUID.</param>
+        /// <param name="f">The next byte of the GUID.</param>
+        /// <param name="g">The next byte of the GUID.</param>
+        /// <param name="h">The next byte of the GUID.</param>
+        /// <param name="i">The next byte of the GUID.</param>
+        /// <param name="j">The next byte of the GUID.</param>
+        /// <param name="k">The next byte of the GUID.</param>
+        /// <param name="pid">Property ID</param>
+        public PropertyKey(uint a, ushort b, ushort c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k, int pid)
+        {
+            this.formatId = new Guid(a, b, c, d, e, f, g, h, i, j, k);
+            this.propertyId = pid;
+        }
     }
 }
--- Source Code/NAudio/CoreAudioApi/PropertyKeys.cs	Mon Jan 19 16:26:36 1970
+++ Source Code/NAudio/CoreAudioApi/PropertyKeys.cs	Mon Jan 19 16:26:36 1970
@@ -33,7 +33,11 @@
         /// <summary>
         /// PKEY_DeviceInterface_FriendlyName
         /// </summary>
-        public static readonly Guid PKEY_DeviceInterface_FriendlyName = new Guid(0xa45c254e, 0xdf1c, 0x4efd, 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0);
+        public static readonly PropertyKey PKEY_DeviceInterface_FriendlyName = new PropertyKey(0x026e516e, 0xb814, 0x414b, 0x83, 0xcd, 0x85, 0x6d, 0x6f, 0xef, 0x48, 0x22, 2);
+        /// <summary>
+        /// PKEY_Device_FriendlyName
+        /// </summary>
+        public static readonly PropertyKey PKEY_Device_FriendlyName = new PropertyKey(0xa45c254e, 0xdf1c, 0x4efd, 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0, 14);
         /// <summary>
         /// PKEY_AudioEndpoint_FormFactor
         /// </summary>
--- Source Code/NAudio/CoreAudioApi/PropertyStore.cs	Mon Jan 19 16:26:36 1970
+++ Source Code/NAudio/CoreAudioApi/PropertyStore.cs	Mon Jan 19 16:26:36 1970
@@ -83,6 +83,20 @@
         }
 
         /// <summary>
+        /// Contains property key
+        /// </summary>
+        /// <param name="key">Looks for a specific property key</param>
+        /// <returns>True if found</returns>
+        public bool Contains(PropertyKey key)
+        {
+            PropVariant var;
+            int result;
+
+            result = storeInterface.GetValue(ref key, out var);
+            return result == 0;
+        }
+
+        /// <summary>
         /// Indexer by guid
         /// </summary>
         /// <param name="guid">Property guid</param>
@@ -102,6 +116,21 @@
                     }
                 }
                 return null;
+            }
+        }
+
+        /// <summary>
+        /// Indexer by property key
+        /// </summary>
+        /// <param name="key">Property key</param>
+        /// <returns>Property or null if not found</returns>
+        public PropertyStoreProperty this[PropertyKey key]
+        {
+            get
+            {
+                PropVariant result;
+                Marshal.ThrowExceptionForHR(storeInterface.GetValue(ref key, out result));
+                return new PropertyStoreProperty(key, result);
             }
         }
 
