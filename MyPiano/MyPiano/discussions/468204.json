[
  {
    "Id": "1122185",
    "ThreadId": "468204",
    "Html": "Hi there. I've been using NAudio for its MIDI editing capabilities and I have to say I'm surprised at how much I've accomplished with it so far.\r<br />\nNow i'm stuck with a few issues that I would love some assistance with, since I have tried all I can think of and have gotten nowhere.\r<br />\n<br />\nFirst, let me make it clear. I am NOT using NAudio for midi playback or midi capture from a sequencer. I'm ONLY using it to read existing MIDI files, modify them, and spit them back out as MIDI files again with my modifications.\r<br />\n<br />\nFirst issue / question, is there a way to change the DeltaTicksPerQuarterNote value on an existing MIDI? Some of the threads I found when researching the issue here talk about setting the value, which I imagine is during the creation of a MIDI file from scratch. I can read the DeltaTicksPerQuarterNote value, but when I try to change it, I'm told that it has no setter function and I can't change it. For my needs, if the MIDI has a DelterTicksPerQuarterNote value greater than 480, I need to change it to 480. Anyway to make this work would be appreciated.\r<br />\n<br />\nSecond issue i'm having is in reading some MIDI files. For my latest tool, which relies exclusively on NAudio, out of 22 test MIDI files, it consistently fails on the same 5. Out of a second batch of 73 test MIDI files, it consistently fails on the same 6.\r<br />\n<br />\nSo that's 11 different MIDIs I have to test that NAudio refuses to read. The errors are always the same, and there's only four kinds of errors:\r<br />\n&quot;Invalid sequence number length&quot;\r<br />\n&quot;Object reference not set to an instance of an object.&quot;\r<br />\n&quot;Read too far 11196+21775!=35811&quot;\r<br />\n&quot;Invalid SMPTE Offset length: Got 127, expected 5&quot;\r<br />\n<br />\nNote that those errors are happening at the \r<br />\nvar dirtyMIDI = new MidiFile(file, false);\r<br />\nstep that works consistently with the other 84 test MIDIs.\r<br />\n<br />\nIn speaking with a buddy who has extensive MIDI experience but in C, he believes at least one of those errors is a bug in NAudio because the &quot;Invalid sequence number length&quot; error is thrown when there is a PC event at 0 ms with the track sequence name. I edited one of the MIDI files throwing that error in a professional DAW, removed the PC events, and then tried to read the MIDI file with NAudio and it switched to the &quot;Object reference not set to an instance of an object.&quot; error.\r<br />\n<br />\nI don't see a way to force reading of MIDI files beyond what i've already done. By setting the strict checking variable to false I can now read MIDI files with missing / problematic NoteOff events, but I don't see how to read past these other problems.\r<br />\n<br />\nI have spent quite a bit of time with this, so I would love some assistance with this.\r<br />\n<br />\nThank you!<br />\n",
    "PostedDate": "2013-11-11T18:20:50.787-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1122439",
    "ThreadId": "468204",
    "Html": "hi, the MIDI capabilities of NAudio were mainly developed to help me create MIDI file mapper (<a href=\"https://midifilemapper.codeplex.com/\" rel=\"nofollow\">https://midifilemapper.codeplex.com/</a>) so it may be of benefit for you to look and see how the code works there. It has been quite a few years since I did anything with this though, so it's not very fresh in my mind.\r<br />\n<br />\nAs for the error, it is quite possible that there is a MIDI event that NAudio is not properly reading. It might be a good idea for you to take a copy of the NAudio source, and you can step through the code to see what is going on (easiest way might be to debug using AudioFileInspector). If you can provide example MIDI files, I might be able to test myself.\r<br />\n<br />\nNAudio lets you use whatever DeltaTicksPerQuarterNote when you create a MIDI file. You'd just need to make sure that you update the deltas for each note to reflect your new value.<br />\n",
    "PostedDate": "2013-11-12T09:31:08.383-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1122511",
    "ThreadId": "468204",
    "Html": "Thanks for the reply.\r<br />\n<br />\nI'll try taking a look at the source code and see if I get anywhere with that.\r<br />\n<br />\nIn the meantime, here's an archive with the 5 problem midis and a text file with their respective error codes thrown by NAudio. This is what I had sent my C buddy I mentioned above. If you can figure out what's going on before I post a reply on here i'd love to hear it.\r<br />\n<br />\n<a href=\"http://www.keepitfishy.com/rb3/problemmidis.rar\" rel=\"nofollow\">http://www.keepitfishy.com/rb3/problemmidis.rar</a>\r<br />\n<br />\nThank you again.<br />\n",
    "PostedDate": "2013-11-12T12:09:10.387-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1122568",
    "ThreadId": "468204",
    "Html": "Ok. I got the source code, gutted it, cleaned it, and integrated it right into my program. I can now get the same exact results I was getting before with the code in my project rather than using the compiled DLL, so I can start testing things.<br />\n<br />\nFirst, the &quot;Object reference not set to an instance of an object&quot; was an error being generated by my own code because I was assuming that all MIDI events with MidiCommandCode NoteOn would be a NoteOn event. I stepped through the code on one of the MIDI files throwing that error, and it turns out the library is reading NoteOff events as NoteOn events, so when my code was comparing the NoteLength value, it was throwing a null exception because it didn't have it...<br />\n<br />\n<img src=\"http://www.keepitfishy.com/rb3/naudioerror.jpg\" alt=\"Image\" /><br />\n<br />\nAs you can see from the screenshot, that should not be happening. Since I realized this was causing the problem, I made sure that any time my code called the NoteLength value, that the event in question had a velocity greater than 0. This effectively removed the &quot;Object reference not set to an instance of an object&quot; and my program was able to finish doing its thing.<br />\n<br />\nThen I tried opening the new MIDI file again, and got a different error: &quot;Note number must be in the range 0-127&quot; ... in stepping through the code, that MIDI that had just been processed had events with note numbers beyond 127, at least one was 131. Nowhere in my code do I set a note value that high, and my understanding is that NAudio doesn't allow it either. If I change the code to instead of throwing the exception, to change the NoteNumber to 127, then the error changes to &quot;Read too far 11196+21775!=35811&quot; ... so that wasn't a good solution to anything.<br />\n<br />\n&quot;Invalid SMPTE Offset length: Got 127, expected 5&quot; error is thrown by SmpteOffsetEvent.cs whenever the length is different than 5. For some reason these MIDIs have values of 0 and 127 respectively. I'm assuming this is a byproduct of erroneous binary reading?<br />\n<br />\nLastly, &quot;Invalid sequence number length&quot; is thrown by TrackSequenceNumberEvent.cs if the length is not 2. The problem MIDIs i'm testing with have a value of 0, which your code is annotated with <br />\n// TODO: there is a form of the TrackSequenceNumberEvent that<br />\n// has a length of zero<br />\nI'm hoping you could tell me how I need to change that line of code to account for a value of 0 instead of always reading as it does now assuming a value of 2. By just changing the code to accept either 0 or 2, the error code changes from &quot;Invalid sequence number length&quot; to &quot;Invalid SMPTE Offset length: Got 0, expected 5&quot;<br />\n<br />\nAnyways, that's enough rambling. As you can see I'm determined to get this to work and would appreciate some help. Now that I have the source code i'll contact my C buddy to see if he can suggest how I can fix this in case you can't get around to looking at all this.<br />\n<br />\nThanks in advance.<br />\n",
    "PostedDate": "2013-11-12T15:05:04.547-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1122941",
    "ThreadId": "468204",
    "Html": "I've had a very quick look. It seems that the problem is getting an unrecognised type of MetaEvent. It happens to also be a &quot;running&quot; event following a text meta event in the example I looked at, so perhaps there is some quirk of the MIDI spec I am overlooking in that case.<br />\n",
    "PostedDate": "2013-11-13T07:37:00.177-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1122949",
    "ThreadId": "468204",
    "Html": "Yeah my C buddy was telling me about running events. I added a catch to my code to see just how many times it was happening. On the MIDIs that I can parse and process fine, there are 0 instances...whereas in the problem MIDI I've been trying to work this out with, it had 9967 instances of a NoteOn event with velocity 0...\r<br />\n<br />\nAt this point I think it's something at a library level that needs addressing, and I don't expect you to drop what you're doing and fix it. So i'll keep a look out for a future update to NAudio and hope that these issues are worked out by then.\r<br />\n<br />\nThanks for your time!<br />\n",
    "PostedDate": "2013-11-13T07:51:10.483-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1122955",
    "ThreadId": "468204",
    "Html": "yes, I guess it's possible that I never actually got running events going because none of my test files used them. There is a little bit of code in there that tries to handle them, but I don't know if it ever got exercised or not.<br />\n",
    "PostedDate": "2013-11-13T08:09:09.407-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1122958",
    "ThreadId": "468204",
    "Html": "What about this part of the problem? It seems like it may be an easy fix for someone who understands what and why the library is doing as it reads the binary of the MIDI file.<br />\n<br />\n// TODO: there is a form of the TrackSequenceNumberEvent that<br />\n// has a length of zero<br />\nif(length != 2)<br />\n{<br />\nthrow new FormatException(&quot;Invalid sequence number length&quot;);<br />\n}<br />\nsequenceNumber = (ushort) ((br.ReadByte() &lt;&lt; 8) + br.ReadByte());<br />\n<br />\nEven being able to read MIDIs with a value of 0 would help reduce the &quot;problem&quot; MIDIs that I can't support with my tool.<br />\n",
    "PostedDate": "2013-11-13T08:14:00.543-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1122962",
    "ThreadId": "468204",
    "Html": "possibly, although it might be that your running event problem means that this isn't a TrackSequenceNumberEvent at all, and we're just reading nonsense out the file at this point. Are there some MIDI files you have where making only this change fixes them completely?<br />\n",
    "PostedDate": "2013-11-13T08:17:36.39-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1122969",
    "ThreadId": "468204",
    "Html": "I do not. All my problem test midis are in that file I linked to earlier. The reason we know it's down to this library is because my buddy can process them on his program, which is coded in C and I don't know what library he uses, may even be his own. And I can and have opened and edited those &quot;problem&quot; midis in REAPER, which is one of the DAWs we work with with no problem. They're not &quot;corrupt&quot; per se, but something in their construction is throwing NAudio off.\r<br />\n<br />\nThe two midis that have the problem with the tracksequencenumberevent being a value of 0 I have never been able to &quot;fix&quot; because just by allowing 0 and doing the same reading your code does when the value is 2 then causes problems, and i'm assuming that is because the binary sequence that must be read when it's a value of 0 is different.<br />\n",
    "PostedDate": "2013-11-13T08:21:38.277-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1122974",
    "ThreadId": "468204",
    "Html": "there's an article here <a href=\"http://home.roadrunner.com/~jgglatt/tech/midispec/run.htm\" rel=\"nofollow\">http://home.roadrunner.com/~jgglatt/tech/midispec/run.htm</a> that might be useful. The strange thing about the one test file I looked at was that the running message seemed to come straight after a text event, which ought not to be possible, since meta events cancel running status. So might need to dig a bit deeper to work out what is going wrong<br />\n",
    "PostedDate": "2013-11-13T08:28:19.92-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1123053",
    "ThreadId": "468204",
    "Html": "I've been working with trojannemo on this issue.  That article mentions Sysex messages (events 0xF0 and 0xF7) cancel running status, but clarifies that meta events have no effect on a running status in progress.  When I originally wrote my own MIDI parser from scratch I had made the same assumption that meta events would end a running status and would run into occasional trouble with some of these MIDI files.  This was probably because other online information about running status have some misinformation about this detail.  All I had to do to fix this was to keep a variable tracking the event type of the last normal MIDI event, and update that each time a normal MIDI event was parsed.  This could explain some of the strange parsing behavior, where NAudio would identify malformed instances of events that don't actually exist in the MIDI file.<br />\n",
    "PostedDate": "2013-11-13T10:05:03.807-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1123063",
    "ThreadId": "468204",
    "Html": "I have little experience with object oriented programming, but it seems ReadNextEvent() is parsing running status events by fetching previous.CommandCode, and I'm guessing that variable is allowed to be updated even in instances when it shouldn't be (such as when a meta event is parsed).  If you don't alter this variable except for when parsing regular MIDI events, or if you use a separate variable that is conditionally updated based on what type of event is being parsed, it seems like it would match my parser's handling of meta events interleaved with running status events.<br />\n",
    "PostedDate": "2013-11-13T10:19:17.267-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1123524",
    "ThreadId": "468204",
    "Html": "thanks raynebc, I'll give that a try next time I get a chance to work on this. I think part of the reason the running event handling is flakey in NAudio is that I never encountered it. Most sequencers don't use it when saving out MIDI files.<br />\n",
    "PostedDate": "2013-11-14T07:52:53.167-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1123602",
    "ThreadId": "468204",
    "Html": "So I got some news.\r<br />\n<br />\nI was testing things and realized along the way I broke something. So I went back to using the compiled library instead of the source code.\r<br />\nWith my new code in place to avoid running into the pitfalls of identifying a running even NoteOff as a NoteOn and asking for its NoteLength, two of my problem MIDIs with that issue are now fixed.\r<br />\n<br />\nSo while perhaps you may want to update the library to avoid throwing a null error in those instances, it can be worked around by the user code, as I did.\r<br />\n<br />\nStill got the following issues that I can't work around, but this is at least an improvement.\r<br />\n<br />\n&quot;Invalid sequence number length&quot;   ----- this is the whole sequence number length being 0 instead of 2 that you have marked as TO DO in the code\r<br />\n&quot;Read too far 11196+21775!=35811&quot;\r<br />\n&quot;Invalid SMPTE Offset length: Got 127, expected 5&quot; \r<br />\n<br />\nThanks for the continued responses. Very much appreciated.<br />\n",
    "PostedDate": "2013-11-14T10:33:18.503-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1125962",
    "ThreadId": "468204",
    "Html": "thanks for the information. I'm not actively working on the MIDI code at the moment, but I've bookmarked this discussion for next time I am.<br />\n",
    "PostedDate": "2013-11-18T04:09:50.007-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1166242",
    "ThreadId": "468204",
    "Html": "Hey torjannemo / markheath:\r<br />\n<br />\nI want to read events from a MIDI file and make my game characters jump/run/dance/animate to beats/notes so it looks like game objects are synchronized with music. Since this is the only thread that gives me some hope that its possible, I wanted to know if you could point me in the right direction. Where should I start? The scope of what I want to do is probably very limited as compared to what NAudio provides. Basically I will be playing a music file (mp3/wav) and reading MIDI file to direct animations/actions in the game. No interfacing with hardware or any magic of that sort. Maybe I dont even need the NAudio library for this but just the part that reads a MIDI file and gives me information on events/notes in the file at specified music-time on the timeline.<br />\n",
    "PostedDate": "2014-01-14T13:01:49.94-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1168570",
    "ThreadId": "468204",
    "Html": "NAudio can read out MIDI events and their timing information. Have a look at the AudioFileInspector source code that comes with the NAudio code, and see how that displays information about a MIDI file.<br />\n",
    "PostedDate": "2014-01-15T03:55:37.933-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1338094",
    "ThreadId": "468204",
    "Html": "Mark, \r<br />\n<br />\nI wanted to point out something. I've continued to use NAudio all this time (thanks for the great tool), and even tonight was working on fixing something that's been bugging me. In REAPER I could see the tempo events were double values, but the string value of the tempo events being returned by NAudio when it read the MIDI file only displayed the integer value. This means small variations in timing, minimal for regular midi usage but problematic for rhythm game uses. It also made my friend's fixed 197 BPM file report as 196 BPM. I got your source code and just changed the values in TempoEvent.cs from int to double, and bam, much more accurate results with a simple fix. Maybe something to consider for your next revision, if one is forthcoming.\r<br />\n<br />\nIf there's a reason you were going with the int value and not double, please let me know if I've opened myself up for failure by doing this. So far nothing seems broken and results seem more accurate. But I know very little about MIDI specs.<br />\n",
    "PostedDate": "2014-12-31T00:49:06.653-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1338199",
    "ThreadId": "468204",
    "Html": "Integer is definitely not accurate enough to store a value in beats per minute.  The only suitable way the tempo can be stored as an integer is as the original microseconds per quarter note value, which is how it is encoded in the MIDI file.  I don't know if NAudio makes any assumptions for the BPM variable having been rounded to an int value though.<br />\n",
    "PostedDate": "2014-12-31T10:41:23.453-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1338200",
    "ThreadId": "468204",
    "Html": "The original relevant code was:<br />\n<pre><code>\nprivate int microsecondsPerQuarterNote;\n\npublic double Tempo\n{\nget { return (60000000.0/microsecondsPerQuarterNote); }\nset { microsecondsPerQuarterNote = (int) (60000000.0/value); }\n}</code></pre>\n\nmy changes:<br />\n<pre><code>private double microsecondsPerQuarterNote;\n\npublic double Tempo\n{\nget { return (60000000.0/microsecondsPerQuarterNote); }\nset { microsecondsPerQuarterNote = 60000000.0/value; }\n}</code></pre>\n\nSeems to be working as intended and more accurately than before. Any reason to worry about this change?<br />\n",
    "PostedDate": "2014-12-31T10:51:28.077-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1340545",
    "ThreadId": "468204",
    "Html": "what other changes did you make to get it to compile? Ultimately microsecondsPerQuarterNote is stored as a three byte integer value in a MIDI event, so when it is written to a file or sent over a network, it can't have a fractional part.\r<br />\n<br />\nWe're you actually just meaning the ToString method doesn't show fractions? That can be fixed quite easily without any changes to microsecondsPerQuarterNote<br />\n",
    "PostedDate": "2015-01-09T15:22:47.927-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]