[
  {
    "Id": "455464",
    "ThreadId": "216030",
    "Html": "<p>First, thanks for the hard work on this library.</p>\r\n<p>I don't know if this was the best way to solve this problem, but I was having some issues with playing various MP3 files using the latest NAudio from the source repository. &nbsp;Many files in my collection appear to have duplicate ID3v1 tags (some from Amazon MP3) at the end of the file which caused an &quot;Not a recognised MP3 block&quot; format exception from the Mp3Frame class. &nbsp;Also some of my MP3's have some other junk after the last frame before the ID3v1 tag (saw it with a hex editor) and possibly at other places in the file.</p>\r\n<p>I read here <a href=\"http://www.mp3-tech.org/programmer/frame_header.html\">http://www.mp3-tech.org/programmer/frame_header.html</a>&nbsp;something that made me think&nbsp;you could sync on the 11 (eleven) 1 bits of the first 2 bytes of the MP3 Frame, so I added a quick change to the ReadNextFrame method from Mp3FileReader code to this:</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> Mp3Frame ReadNextFrame(<span style=\"color:blue\">bool</span> readData)\r\n{\r\n\r\n\t<span style=\"color:blue\">byte</span>[] header = <span style=\"color:blue\">new</span> <span style=\"color:blue\">byte</span>[2];\r\n\t<span style=\"color:blue\">while</span> (mp3Stream.Read(header, 0, 2) == 2)\r\n\t{\r\n\r\n\t\t<span style=\"color:blue\">if</span> (header[0] == 0xFF &amp;&amp; ((header[1] &amp; 0xE0) == 0xE0))\r\n\t\t{\r\n\t\t\t<span style=\"color:green\">//move the pointer back to the beginning of the header</span>\r\n\t\t\t<span style=\"color:green\">//and return the Mp3Frame</span>\r\n\t\t\tmp3Stream.Position -= 2;\r\n\t\t\t<span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> Mp3Frame(mp3Stream, readData);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t<span style=\"color:blue\">return</span> <span style=\"color:blue\">null</span>;\r\n}\r\n</pre>\r\n</div>\r\n</p>\r\n<p>I suppose this could cause a problem if some junk in the file matches my header check and causes a strange or invalid MP3Frame to be created.  I guess another way would be just assuming we've got all the file we can read</p>\r\n<p>and adjusting the stream length to reflect that.</p>\r\n<p>&nbsp;</p>\r\n<p>This seems to solve my problem. &nbsp;Any thoughts?</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-06-14T20:25:22.04-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]