[
  {
    "Id": "1489316",
    "ThreadId": "659945",
    "Html": "I wrote some code to the class sound would only play out of one earphone/speaker but is it playing out of both at the same time... why ?\r<br />\nhere is my code \r<br />\n public override int Read(byte[] buffer, int offset, int sampleCount)<br />\n<pre><code>    {\n        if (position == 0 &amp;&amp; onetimeflag == false)\n        {\n            n2 = 0;\n            onetimeflag = true;\n        }\n        if (n2 &gt;= Bufferlength &amp;&amp; stopflag == false)\n        {\n            Dispose();\n            return 0;\n        }\n\n        float temp1;\n        for (int i = 0; i &lt; (sampleCount / 4); i++)\n        {\n            if (Frequency_switch == true)\n            {\n                temp1 = (float)(Amplitude * Math.Sin(Math.PI * Frequency * n2 / 44100D));\n                Frequency_switch = false;\n            }\n            else\n            {\n\n                temp1 = (float)(Amplitude2 * Math.Sin((Math.PI * Frequency2 * n2) / 44100D));\n                Frequency_switch = true;\n            }\n            byte[] bytes = BitConverter.GetBytes(temp1);\n            buffer[i * 4 + 0] = bytes[0];\n            buffer[i * 4 + 1] = bytes[1];\n            buffer[i * 4 + 2] = bytes[2];\n            buffer[i * 4 + 3] = bytes[3];\n            tempSample++;\n            n2++;\n        }\n        return sampleCount;}} }\n\n</code></pre>\n\nI set Amplitude2 to 0 so it should only play from one earphone right ?\r<br />\nmy waveform is set up like this \r<br />\npublic override WaveFormat WaveFormat { get { return WaveFormat.CreateIeeeFloatWaveFormat(44100, 2); } }<br />\n",
    "PostedDate": "2016-12-05T20:11:26.53-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1489318",
    "ThreadId": "659945",
    "Html": "From the looks of things, regardless of Frequency_switch, that is regardless of Amplitude or Amplitude2, you're still assigning it to all of your bytes (left and right), so you'll still get the sound in left&amp;right.\r<br />\n<br />\nAssuming 16-bit stereo, you would need to set buffer[i * 4 + 0] and buffer[i * 4 + 1] to your Amplitude bytes, and then buffer[i * 4 + 2] and buffer[i * 4 + 3] to zero, if you want sound out of the left  (or opposite, if you want it out of the right side).\r<br />\n<br />\nOr if this is 32-bit, assign your Amplitude to all 4 bytes, and then the next +4, +5, +6 and +7 to zero.<br />\n",
    "PostedDate": "2016-12-05T21:36:39.487-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1489319",
    "ThreadId": "659945",
    "Html": "ok temp1 is a float value.... \r<br />\n<br />\nso I think you need to set the next 4 bytes to zero (+4, +5, +6 +7)\r<br />\nand change i &lt; (sampleCount / 4) to i &lt; (sampleCount / 8)<br />\n",
    "PostedDate": "2016-12-05T21:43:25.297-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1489363",
    "ThreadId": "659945",
    "Html": "Msav,\r<br />\n<br />\nI am doing that now. I fill up all 4  indexes in the buffer.   so the 1st 4 have sound and the next 4 are zero but I am still here sound from both earphone.<br />\n",
    "PostedDate": "2016-12-06T10:39:04.987-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1489364",
    "ThreadId": "659945",
    "Html": "Amplitude2 is set to zero, so when you Frequency_switch = false the values are 0. and when Frequency_switch = true, there are real values ..\r<br />\n<br />\nare am i missing something ?<br />\n",
    "PostedDate": "2016-12-06T10:42:03.187-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1489367",
    "ThreadId": "659945",
    "Html": "it is 32 bit per sample and this is how the buffer looks :\r<br />\n```<br />\n<ul>\n<li>\nbuffer\t{byte[52920]}\tbyte[]<br />\n<pre><code>[0] 0   byte\n[1] 0   byte\n[2] 0   byte\n[3] 0   byte\n[4] 93  byte\n[5] 21  byte\n[6] 82  byte\n[7] 60  byte\n[8] 0   byte\n[9] 0   byte\n[10]    0   byte\n[11]    0   byte\n[12]    46  byte\n[13]    135 byte\n[14]    29  byte\n[15]    61  byte\n[16]    0   byte\n[17]    0   byte\n[18]    0   byte\n[19]    0   byte\n[20]    63  byte\n[21]    55  byte\n[22]    131 byte\n[23]    61  byte\n[24]    0   byte\n[25]    0   byte\n[26]    0   byte\n[27]    0   byte\n[28]    208 byte\n[29]    148 byte\n[30]    183 byte\n[31]    61  byte\n[32]    0   byte\n[33]    0   byte\n[34]    0   byte\n[35]    0   byte\n[36]    121 byte\n[37]    211 byte\n[38]    235 byte\n[39]    61  byte\n[40]    0   byte\n[41]    0   byte\n[42]    0   byte\n[43]    0   byte\n[44]    55  byte\n[45]    245 byte\n[46]    15  byte\n[47]    62  byte\n[48]    0   byte\n[49]    0   byte\n[50]    0   byte\n[51]    0   byte\n[52]    116 byte\n[53]    232 byte\n[54]    41  byte\n[55]    62  byte\n[56]    0   byte\n[57]    0   byte\n[58]    0   byte\n[59]    0   byte\n[60]    22  byte\n[61]    191 byte\n[62]    67  byte\n[63]    62  byte\n[64]    0   byte\n[65]    0   byte\n[66]    0   byte\n[67]    0   byte\n[68]    196 byte\n[69]    116 byte\n[70]    93  byte\n[71]    62  byte\n[72]    0   byte\n[73]    0   byte\n[74]    0   byte\n[75]    0   byte\n[76]    41  byte\n[77]    5   byte\n[78]    119 byte\n[79]    62  byte\n[80]    0   byte\n[81]    0   byte\n[82]    0   byte\n[83]    0   byte\n[84]    251 byte\n[85]    53  byte\n[86]    136 byte\n[87]    62  byte\n[88]    0   byte\n[89]    0   byte\n[90]    0   byte\n[91]    0   byte\n[92]    115 byte\n[93]    210 byte\n[94]    148 byte\n[95]    62  byte\n[96]    0   byte\n[97]    0   byte\n[98]    0   byte\n[99]    0   byte\n[100]   221 byte\n[101]   85  byte\n[102]   161 byte\n[103]   62  byte\n[104]   0   byte\n[105]   0   byte\n[106]   0   byte\n[107]   0   byte\n[108]   29  byte\n[109]   190 byte\n[110]   173 byte\n[111]   62  byte\n[112]   0   byte\n[113]   0   byte\n[114]   0   byte\n[115]   0   byte\n[116]   29  byte\n[117]   9   byte\n[118]   186 byte\n[119]   62  byte\n[120]   0   byte\n[121]   0   byte\n[122]   0   byte\n[123]   0   byte\n[124]   203 byte\n[125]   52  byte\n[126]   198 byte\n[127]   62  byte\n[128]   0   byte\n[129]   0   byte\n[130]   0   byte\n[131]   0   byte\n[132]   25  byte\n[133]   63  byte\n[134]   210 byte\n[135]   62  byte\n[136]   0   byte\n[137]   0   byte\n[138]   0   byte\n[139]   0   byte\n[140]   2   byte\n[141]   38  byte\n[142]   222 byte\n[143]   62  byte\n[144]   0   byte\n[145]   0   byte\n[146]   0   byte\n[147]   0   byte\n[148]   133 byte\n[149]   231 byte\n[150]   233 byte\n[151]   62  byte\n[152]   0   byte\n[153]   0   byte\n[154]   0   byte\n[155]   0   byte\n[156]   165 byte\n[157]   129 byte\n[158]   245 byte\n[159]   62  byte\n[160]   0   byte\n[161]   0   byte\n[162]   0   byte\n[163]   0   byte\n[164]   56  byte\n[165]   121 byte\n[166]   0   byte\n[167]   63  byte\n[168]   0   byte\n[169]   0   byte\n[170]   0   byte\n[171]   0   byte\n[172]   253 byte\n[173]   27  byte\n[174]   6   byte\n[175]   63  byte\n[176]   0   byte\n[177]   0   byte\n[178]   0   byte\n[179]   0   byte\n[180]   45  byte\n[181]   168 byte\n[182]   11  byte\n[183]   63  byte\n[184]   0   byte\n[185]   0   byte\n[186]   0   byte\n[187]   0   byte\n[188]   218 byte\n[189]   28  byte\n[190]   17  byte\n[191]   63  byte\n[192]   0   byte\n[193]   0   byte\n[194]   0   byte\n[195]   0   byte\n[196]   24  byte\n[197]   121 byte\n[198]   22  byte\n[199]   63  byte\n[200]   0   byte\n[201]   0   byte\n[202]   0   byte\n[203]   0   byte\n[204]   1   byte\n[205]   188 byte\n[206]   27  byte\n[207]   63  byte\n[208]   0   byte\n[209]   0   byte\n[210]   0   byte\n[211]   0   byte\n[212]   178 byte\n[213]   228 byte\n[214]   32  byte\n[215]   63  byte\n[216]   0   byte\n[217]   0   byte\n[218]   0   byte\n[219]   0   byte\n[220]   76  byte\n[221]   242 byte\n[222]   37  byte\n[223]   63  byte\n[224]   0   byte\n[225]   0   byte\n[226]   0   byte\n[227]   0   byte\n[228]   245 byte\n[229]   227 byte\n[230]   42  byte\n[231]   63  byte\n[232]   0   byte\n[233]   0   byte\n[234]   0   byte\n[235]   0   byte\n[236]   218 byte\n[237]   184 byte\n[238]   47  byte\n[239]   63  byte\n[240]   0   byte\n[241]   0   byte\n[242]   0   byte\n[243]   0   byte\n[244]   40  byte\n[245]   112 byte\n[246]   52  byte\n[247]   63  byte\n[248]   0   byte\n[249]   0   byte\n[250]   0   byte\n[251]   0   byte\n[252]   22  byte\n[253]   9   byte\n[254]   57  byte\n[255]   63  byte\n[256]   0   byte\n[257]   0   byte\n[258]   0   byte\n[259]   0   byte\n[260]   220 byte\n[261]   130 byte\n[262]   61  byte\n[263]   63  byte\n[264]   0   byte\n[265]   0   byte\n[266]   0   byte\n[267]   0   byte\n[268]   186 byte\n[269]   220 byte\n[270]   65  byte\n[271]   63  byte\n[272]   0   byte\n[273]   0   byte\n[274]   0   byte\n[275]   0   byte\n[276]   245 byte\n[277]   21  byte\n[278]   70  byte\n[279]   63  byte\n[280]   0   byte\n[281]   0   byte\n[282]   0   byte\n[283]   0   byte\n[284]   214 byte\n[285]   45  byte\n[286]   74  byte\n[287]   63  byte\n[288]   0   byte\n[289]   0   byte\n[290]   0   byte\n[291]   0   byte\n[292]   173 byte\n[293]   35  byte\n[294]   78  byte\n[295]   63  byte\n[296]   0   byte\n[297]   0   byte\n[298]   0   byte\n[299]   0   byte\n[300]   207 byte\n[301]   246 byte\n[302]   81  byte\n[303]   63  byte\n[304]   0   byte\n[305]   0   byte\n[306]   0   byte\n[307]   0   byte\n[308]   152 byte\n[309]   166 byte\n[310]   85  byte\n[311]   63  byte\n[312]   0   byte\n[313]   0   byte\n[314]   0   byte\n[315]   0   byte\n[316]   104 byte\n[317]   50  byte\n[318]   89  byte\n[319]   63  byte\n[320]   0   byte\n[321]   0   byte\n[322]   0   byte\n[323]   0   byte\n[324]   167 byte\n[325]   153 byte\n[326]   92  byte\n[327]   63  byte\n[328]   0   byte\n[329]   0   byte\n[330]   0   byte\n[331]   0   byte\n[332]   194 byte\n[333]   219 byte\n[334]   95  byte\n[335]   63  byte\n[336]   0   byte\n[337]   0   byte\n[338]   0   byte\n[339]   0   byte\n[340]   44  byte\n[341]   248 byte\n[342]   98  byte\n[343]   63  byte\n[344]   0   byte\n[345]   0   byte\n[346]   0   byte\n[347]   0   byte\n[348]   96  byte\n[349]   238 byte\n[350]   101 byte\n[351]   63  byte\n[352]   0   byte\n[353]   0   byte\n[354]   0   byte\n[355]   0   byte\n[356]   222 byte\n[357]   189 byte\n[358]   104 byte\n[359]   63  byte\n[360]   0   byte\n[361]   0   byte\n[362]   0   byte\n[363]   0   byte\n[364]   44  byte\n[365]   102 byte\n[366]   107 byte\n[367]   63  byte\n[368]   0   byte\n[369]   0   byte\n[370]   0   byte\n[371]   0   byte\n[372]   217 byte\n[373]   230 byte\n[374]   109 byte\n[375]   63  byte\n[376]   0   byte\n[377]   0   byte\n[378]   0   byte\n[379]   0   byte\n[380]   119 byte\n[381]   63  byte\n[382]   112 byte\n[383]   63  byte\n[384]   0   byte\n[385]   0   byte\n[386]   0   byte\n[387]   0   byte\n[388]   163 byte\n[389]   111 byte\n[390]   114 byte\n[391]   63  byte\n[392]   0   byte\n[393]   0   byte\n[394]   0   byte\n[395]   0   byte\n[396]   254 byte\n[397]   118 byte\n[398]   116 byte\n[399]   63  byte\n[400]   0   byte\n[401]   0   byte\n[402]   0   byte\n[403]   0   byte\n[404]   48  byte\n[405]   85  byte\n[406]   118 byte\n[407]   63  byte\n[408]   0   byte\n[409]   0   byte\n[410]   0   byte\n[411]   0   byte\n[412]   234 byte\n[413]   9   byte\n[414]   120 byte\n[415]   63  byte\n[416]   0   byte\n[417]   0   byte\n[418]   0   byte\n[419]   0   byte\n[420]   224 byte\n[421]   148 byte\n[422]   121 byte\n[423]   63  byte\n[424]   0   byte\n[425]   0   byte\n[426]   0   byte\n[427]   0   byte\n[428]   210 byte\n[429]   245 byte\n[430]   122 byte\n[431]   63  byte\n[432]   0   byte\n[433]   0   byte\n[434]   0   byte\n[435]   0   byte\n[436]   130 byte\n[437]   44  byte\n[438]   124 byte\n[439]   63  byte\n[440]   0   byte\n[441]   0   byte\n[442]   0   byte\n[443]   0   byte\n[444]   190 byte\n[445]   56  byte\n[446]   125 byte\n[447]   63  byte\n[448]   0   byte\n[449]   0   byte\n[450]   0   byte\n[451]   0   byte\n[452]   88  byte\n[453]   26  byte\n[454]   126 byte\n[455]   63  byte\n[456]   0   byte\n[457]   0   byte\n[458]   0   byte\n[459]   0   byte\n[460]   42  byte\n[461]   209 byte\n[462]   126 byte\n[463]   63  byte\n[464]   0   byte\n[465]   0   byte\n[466]   0   byte\n[467]   0   byte\n[468]   22  byte\n[469]   93  byte\n[470]   127 byte\n[471]   63  byte\n[472]   0   byte\n[473]   0   byte\n[474]   0   byte\n[475]   0   byte\n[476]   2   byte\n[477]   190 byte\n[478]   127 byte\n[479]   63  byte\n[480]   0   byte\n[481]   0   byte\n[482]   0   byte\n[483]   0   byte\n[484]   225 byte\n[485]   243 byte\n[486]   127 byte\n[487]   63  byte\n[488]   0   byte\n[489]   0   byte\n[490]   0   byte\n[491]   0   byte\n[492]   167 byte\n[493]   254 byte\n[494]   127 byte\n[495]   63  byte\n[496]   0   byte\n[497]   0   byte\n[498]   0   byte\n[499]   0   byte\n[500]   84  byte\n[501]   222 byte\n[502]   127 byte\n[503]   63  byte\n[504]   0   byte\n[505]   0   byte\n[506]   0   byte\n[507]   0   byte\n[508]   237 byte\n[509]   146 byte\n[510]   127 byte\n[511]   63  byte\n[512]   0   byte\n[513]   0   byte\n[514]   0   byte\n[515]   0   byte\n[516]   126 byte\n[517]   28  byte\n[518]   127 byte\n[519]   63  byte\n[520]   0   byte\n[521]   0   byte\n[522]   0   byte\n[523]   0   byte\n[524]   28  byte\n[525]   123 byte\n[526]   126 byte\n[527]   63  byte\n[528]   0   byte\n[529]   0   byte\n[530]   0   byte\n[531]   0   byte\n[532]   226 byte\n[533]   174 byte\n[534]   125 byte\n[535]   63  byte\n[536]   0   byte\n[537]   0   byte\n[538]   0   byte\n[539]   0   byte\n[540]   242 byte\n[541]   183 byte\n[542]   124 byte\n[543]   63  byte\n[544]   0   byte\n[545]   0   byte\n[546]   0   byte\n[547]   0   byte\n[548]   117 byte\n[549]   150 byte\n[550]   123 byte\n[551]   63  byte\n[552]   0   byte\n[553]   0   byte\n[554]   0   byte\n[555]   0   byte\n[556]   157 byte\n[557]   74  byte\n[558]   122 byte\n[559]   63  byte\n[560]   0   byte\n[561]   0   byte\n[562]   0   byte\n[563]   0   byte\n[564]   162 byte\n[565]   212 byte\n[566]   120 byte\n[567]   63  byte\n[568]   0   byte\n[569]   0   byte\n[570]   0   byte\n[571]   0   byte\n[572]   193 byte\n[573]   52  byte\n[574]   119 byte\n[575]   63  byte\n[576]   0   byte\n[577]   0   byte\n[578]   0   byte\n[579]   0   byte\n[580]   66  byte\n[581]   107 byte\n[582]   117 byte\n[583]   63  byte\n[584]   0   byte\n[585]   0   byte\n[586]   0   byte\n[587]   0   byte\n[588]   113 byte\n[589]   120 byte\n[590]   115 byte\n[591]   63  byte\n[592]   0   byte\n[593]   0   byte\n[594]   0   byte\n[595]   0   byte\n[596]   162 byte\n[597]   92  byte\n[598]   113 byte\n[599]   63  byte\n[600]   0   byte\n[601]   0   byte\n[602]   0   byte\n[603]   0   byte\n[604]   48  byte\n[605]   24  byte\n[606]   111 byte\n[607]   63  byte\n[608]   0   byte\n[609]   0   byte\n[610]   0   byte\n[611]   0   byte\n[612]   125 byte\n[613]   171 byte\n[614]   108 byte\n[615]   63  byte\n[616]   0   byte\n[617]   0   byte\n[618]   0   byte\n[619]   0   byte\n[620]   242 byte\n[621]   22  byte\n[622]   106 byte\n[623]   63  byte\n[624]   0   byte\n[625]   0   byte\n[626]   0   byte\n[627]   0   byte\n[628]   253 byte\n[629]   90  byte\n[630]   103 byte\n[631]   63  byte\n[632]   0   byte\n</code></pre>\n\n</li>\n</ul>\nthat should be right right ?\r<br />\nwhy is it not working ?<br />\n",
    "PostedDate": "2016-12-06T10:57:26.877-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1489369",
    "ThreadId": "659945",
    "Html": "ok I just tried this:\r<br />\n<br />\nbut It did not play anything at all:<br />\n<pre><code> public override int Read(byte[] buffer, int offset, int sampleCount)\n        {\n            if (position == 0 &amp;&amp; onetimeflag == false)\n            {\n                n2 = 0;\n                onetimeflag = true;\n            }\n            if (n2 &gt;= Bufferlength &amp;&amp; stopflag == false)\n            {\n                Dispose();\n                return 0;\n            }\n\n            float temp1;\n            for (int i = 0; i &lt; (sampleCount / 2); i++)\n            {\n                if (Frequency_switch == true)\n                {\n                    temp1 = (float)(Amplitude * Math.Sin(Math.PI * Frequency * n2 / 44100D));\n                    Frequency_switch = false;\n                }\n                else\n                {\n\n                    temp1 = (float)(Amplitude2 * Math.Sin((Math.PI * Frequency2 * n2) / 44100D));\n                    Frequency_switch = true;\n                }\n                byte[] bytes = BitConverter.GetBytes(temp1);\n                buffer[i * 2 + 0] = bytes[0];\n                buffer[i * 2 + 1] = bytes[1];\n                //buffer[i * 4 + 2] = bytes[2];\n                //buffer[i * 4 + 3] = bytes[3];\n                tempSample++;\n                n2++;\n            }\n            return sampleCount;}} }\n</code></pre>\n\n",
    "PostedDate": "2016-12-06T11:07:38.363-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1489393",
    "ThreadId": "659945",
    "Html": "ok I tried everything and it is not working\r<br />\nwhat I am missing ?\r<br />\n<br />\nI even trying have 8 of the zero in a roll and it is not working...\r<br />\nI tried making using  channel..\r<br />\n<br />\nidk what to try now<br />\n",
    "PostedDate": "2016-12-06T16:18:07.29-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1489403",
    "ThreadId": "659945",
    "Html": "I was thinking something more like this:<br />\n<pre><code>for (int i = 0; i &lt; (sampleCount / 8); i++)</code></pre>\n\n...\r<br />\nand<br />\n<pre><code> byte[] bytes = BitConverter.GetBytes(temp1);\n            buffer[i * 8 + 0] = bytes[0];\n            buffer[i * 8 + 1] = bytes[1];\n            buffer[i * 8 + 2] = bytes[2];\n            buffer[i * 8 + 3] = bytes[3];\n            buffer[i * 8 + 4] = 0;\n            buffer[i * 8 + 5] = 0;\n            buffer[i * 8 + 6] = 0;\n            buffer[i * 8 + 7] = 0;\n</code></pre>\n\n(since there's 4 bytes for each sample, left and right, so you have to progress by 8 each time)<br />\n",
    "PostedDate": "2016-12-06T22:25:52.31-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1489417",
    "ThreadId": "659945",
    "Html": "try that and it did not work..\r<br />\n<br />\nhere is how the buffer looked :\r<br />\n<br />\n```<br />\n<ul>\n<li>this\t{Hearing_Test.binaural_beats}\tHearing_Test.binaural_beats</li>\n<li>\nbuffer\t{byte[52920]}\tbyte[]\n<pre><code>[0] 0   byte\n[1] 0   byte\n[2] 0   byte\n[3] 0   byte\n[4] 0   byte\n[5] 0   byte\n[6] 0   byte\n[7] 0   byte\n[8] 93  byte\n[9] 21  byte\n[10]    82  byte\n[11]    60  byte\n[12]    0   byte\n[13]    0   byte\n[14]    0   byte\n[15]    0   byte\n[16]    0   byte\n[17]    0   byte\n[18]    0   byte\n[19]    0   byte\n[20]    0   byte\n[21]    0   byte\n[22]    0   byte\n[23]    0   byte\n[24]    46  byte\n[25]    135 byte\n[26]    29  byte\n[27]    61  byte\n[28]    0   byte\n[29]    0   byte\n[30]    0   byte\n[31]    0   byte\n[32]    0   byte\n[33]    0   byte\n[34]    0   byte\n[35]    0   byte\n[36]    0   byte\n[37]    0   byte\n[38]    0   byte\n[39]    0   byte\n[40]    63  byte\n[41]    55  byte\n[42]    131 byte\n[43]    61  byte\n[44]    0   byte\n[45]    0   byte\n[46]    0   byte\n[47]    0   byte\n[48]    0   byte\n[49]    0   byte\n[50]    0   byte\n[51]    0   byte\n[52]    0   byte\n[53]    0   byte\n[54]    0   byte\n[55]    0   byte\n[56]    208 byte\n[57]    148 byte\n[58]    183 byte\n[59]    61  byte\n[60]    0   byte\n[61]    0   byte\n[62]    0   byte\n[63]    0   byte\n[64]    0   byte\n[65]    0   byte\n[66]    0   byte\n[67]    0   byte\n[68]    0   byte\n[69]    0   byte\n[70]    0   byte\n[71]    0   byte\n[72]    121 byte\n[73]    211 byte\n[74]    235 byte\n[75]    61  byte\n[76]    0   byte\n[77]    0   byte\n[78]    0   byte\n[79]    0   byte\n[80]    0   byte\n[81]    0   byte\n[82]    0   byte\n[83]    0   byte\n[84]    0   byte\n[85]    0   byte\n[86]    0   byte\n[87]    0   byte\n[88]    55  byte\n[89]    245 byte\n[90]    15  byte\n[91]    62  byte\n[92]    0   byte\n[93]    0   byte\n[94]    0   byte\n[95]    0   byte\n[96]    0   byte\n[97]    0   byte\n[98]    0   byte\n[99]    0   byte\n[100]   0   byte\n[101]   0   byte\n[102]   0   byte\n[103]   0   byte\n[104]   116 byte\n[105]   232 byte\n[106]   41  byte\n[107]   62  byte\n[108]   0   byte\n[109]   0   byte\n[110]   0   byte\n[111]   0   byte\n[112]   0   byte\n[113]   0   byte\n[114]   0   byte\n[115]   0   byte\n[116]   0   byte\n[117]   0   byte\n[118]   0   byte\n[119]   0   byte\n[120]   22  byte\n[121]   191 byte\n[122]   67  byte\n[123]   62  byte\n[124]   0   byte\n[125]   0   byte\n[126]   0   byte\n[127]   0   byte\n[128]   0   byte\n[129]   0   byte\n[130]   0   byte\n[131]   0   byte\n[132]   0   byte\n[133]   0   byte\n[134]   0   byte\n[135]   0   byte\n[136]   196 byte\n[137]   116 byte\n[138]   93  byte\n[139]   62  byte\n[140]   0   byte\n[141]   0   byte\n[142]   0   byte\n[143]   0   byte\n[144]   0   byte\n[145]   0   byte\n[146]   0   byte\n[147]   0   byte\n[148]   0   byte\n[149]   0   byte\n[150]   0   byte\n[151]   0   byte\n[152]   41  byte\n[153]   5   byte\n[154]   119 byte\n[155]   62  byte\n[156]   0   byte\n[157]   0   byte\n[158]   0   byte\n[159]   0   byte\n[160]   0   byte\n[161]   0   byte\n[162]   0   byte\n[163]   0   byte\n[164]   0   byte\n[165]   0   byte\n[166]   0   byte\n[167]   0   byte\n[168]   251 byte\n[169]   53  byte\n[170]   136 byte\n[171]   62  byte\n[172]   0   byte\n[173]   0   byte\n[174]   0   byte\n[175]   0   byte\n[176]   0   byte\n[177]   0   byte\n[178]   0   byte\n[179]   0   byte\n[180]   0   byte\n[181]   0   byte\n[182]   0   byte\n[183]   0   byte\n[184]   115 byte\n[185]   210 byte\n[186]   148 byte\n[187]   62  byte\n[188]   0   byte\n[189]   0   byte\n[190]   0   byte\n[191]   0   byte\n[192]   0   byte\n[193]   0   byte\n[194]   0   byte\n[195]   0   byte\n[196]   0   byte\n[197]   0   byte\n[198]   0   byte\n[199]   0   byte\n[200]   221 byte\n[201]   85  byte\n[202]   161 byte\n[203]   62  byte\n[204]   0   byte\n[205]   0   byte\n[206]   0   byte\n[207]   0   byte\n[208]   0   byte\n[209]   0   byte\n[210]   0   byte\n[211]   0   byte\n[212]   0   byte\n[213]   0   byte\n[214]   0   byte\n[215]   0   byte\n[216]   29  byte\n[217]   190 byte\n[218]   173 byte\n[219]   62  byte\n[220]   0   byte\n[221]   0   byte\n[222]   0   byte\n[223]   0   byte\n[224]   0   byte\n[225]   0   byte\n[226]   0   byte\n[227]   0   byte\n[228]   0   byte\n[229]   0   byte\n[230]   0   byte\n[231]   0   byte\n[232]   29  byte\n[233]   9   byte\n[234]   186 byte\n[235]   62  byte\n[236]   0   byte\n[237]   0   byte\n[238]   0   byte\n[239]   0   byte\n[240]   0   byte\n[241]   0   byte\n[242]   0   byte\n[243]   0   byte\n[244]   0   byte\n[245]   0   byte\n[246]   0   byte\n[247]   0   byte\n[248]   203 byte\n[249]   52  byte\n[250]   198 byte\n[251]   62  byte\n[252]   0   byte\n[253]   0   byte\n[254]   0   byte\n[255]   0   byte\n[256]   0   byte\n[257]   0   byte\n[258]   0   byte\n[259]   0   byte\n[260]   0   byte\n[261]   0   byte\n[262]   0   byte\n[263]   0   byte\n[264]   25  byte\n[265]   63  byte\n[266]   210 byte\n[267]   62  byte\n[268]   0   byte\n[269]   0   byte\n[270]   0   byte\n[271]   0   byte\n[272]   0   byte\n[273]   0   byte\n[274]   0   byte\n[275]   0   byte\n[276]   0   byte\n[277]   0   byte\n[278]   0   byte\n[279]   0   byte\n[280]   2   byte\n[281]   38  byte\n[282]   222 byte\n[283]   62  byte\n[284]   0   byte\n[285]   0   byte\n[286]   0   byte\n[287]   0   byte\n[288]   0   byte\n[289]   0   byte\n[290]   0   byte\n[291]   0   byte\n[292]   0   byte\n[293]   0   byte\n[294]   0   byte\n[295]   0   byte\n[296]   133 byte\n[297]   231 byte\n[298]   233 byte\n[299]   62  byte\n[300]   0   byte\n[301]   0   byte\n[302]   0   byte\n[303]   0   byte\n[304]   0   byte\n[305]   0   byte\n[306]   0   byte\n[307]   0   byte\n[308]   0   byte\n[309]   0   byte\n[310]   0   byte\n[311]   0   byte\n[312]   165 byte\n[313]   129 byte\n[314]   245 byte\n[315]   62  byte\n[316]   0   byte\n[317]   0   byte\n[318]   0   byte\n[319]   0   byte\n[320]   0   byte\n[321]   0   byte\n[322]   0   byte\n[323]   0   byte\n[324]   0   byte\n[325]   0   byte\n[326]   0   byte\n[327]   0   byte\n[328]   56  byte\n[329]   121 byte\n[330]   0   byte\n[331]   63  byte\n[332]   0   byte\n[333]   0   byte\n[334]   0   byte\n[335]   0   byte\n[336]   0   byte\n[337]   0   byte\n[338]   0   byte\n[339]   0   byte\n[340]   0   byte\n[341]   0   byte\n[342]   0   byte\n[343]   0   byte\n[344]   253 byte\n[345]   27  byte\n[346]   6   byte\n[347]   63  byte\n[348]   0   byte\n[349]   0   byte\n[350]   0   byte\n[351]   0   byte\n[352]   0   byte\n[353]   0   byte\n[354]   0   byte\n[355]   0   byte\n[356]   0   byte\n[357]   0   byte\n[358]   0   byte\n[359]   0   byte\n[360]   45  byte\n[361]   168 byte\n[362]   11  byte\n[363]   63  byte\n[364]   0   byte\n[365]   0   byte\n[366]   0   byte\n[367]   0   byte\n[368]   0   byte\n[369]   0   byte\n[370]   0   byte\n[371]   0   byte\n[372]   0   byte\n[373]   0   byte\n[374]   0   byte\n[375]   0   byte\n[376]   218 byte\n[377]   28  byte\n[378]   17  byte\n[379]   63  byte\n[380]   0   byte\n[381]   0   byte\n[382]   0   byte\n[383]   0   byte\n[384]   0   byte\n[385]   0   byte\n[386]   0   byte\n[387]   0   byte\n[388]   0   byte\n[389]   0   byte\n[390]   0   byte\n[391]   0   byte\n[392]   24  byte\n[393]   121 byte\n[394]   22  byte\n[395]   63  byte\n[396]   0   byte\n[397]   0   byte\n[398]   0   byte\n[399]   0   byte\n[400]   0   byte\n[401]   0   byte\n[402]   0   byte\n[403]   0   byte\n[404]   0   byte\n[405]   0   byte\n[406]   0   byte\n[407]   0   byte\n[408]   1   byte\n[409]   188 byte\n[410]   27  byte\n[411]   63  byte\n[412]   0   byte\n[413]   0   byte\n[414]   0   byte\n[415]   0   byte\n[416]   0   byte\n[417]   0   byte\n[418]   0   byte\n[419]   0   byte\n[420]   0   byte\n[421]   0   byte\n[422]   0   byte\n[423]   0   byte\n[424]   178 byte\n[425]   228 byte\n[426]   32  byte\n[427]   63  byte\n[428]   0   byte\n[429]   0   byte\n[430]   0   byte\n[431]   0   byte\n[432]   0   byte\n[433]   0   byte\n[434]   0   byte\n[435]   0   byte\n[436]   0   byte\n[437]   0   byte\n[438]   0   byte\n[439]   0   byte\n[440]   76  byte\n[441]   242 byte\n[442]   37  byte\n[443]   63  byte\n[444]   0   byte\n[445]   0   byte\n[446]   0   byte\n[447]   0   byte\n[448]   0   byte\n[449]   0   byte\n[450]   0   byte\n[451]   0   byte\n[452]   0   byte\n[453]   0   byte\n[454]   0   byte\n[455]   0   byte\n[456]   245 byte\n[457]   227 byte\n[458]   42  byte\n[459]   63  byte\n[460]   0   byte\n[461]   0   byte\n[462]   0   byte\n[463]   0   byte\n[464]   0   byte\n[465]   0   byte\n[466]   0   byte\n[467]   0   byte\n[468]   0   byte\n[469]   0   byte\n[470]   0   byte\n[471]   0   byte\n[472]   218 byte\n[473]   184 byte\n[474]   47  byte\n[475]   63  byte\n[476]   0   byte\n[477]   0   byte\n[478]   0   byte\n[479]   0   byte\n[480]   0   byte\n[481]   0   byte\n[482]   0   byte\n[483]   0   byte\n[484]   0   byte\n[485]   0   byte\n[486]   0   byte\n[487]   0   byte\n[488]   40  byte\n[489]   112 byte\n[490]   52  byte\n[491]   63  byte\n[492]   0   byte\n[493]   0   byte\n[494]   0   byte\n[495]   0   byte\n[496]   0   byte\n[497]   0   byte\n[498]   0   byte\n[499]   0   byte\n[500]   0   byte\n[501]   0   byte\n[502]   0   byte\n[503]   0   byte\n[504]   22  byte\n[505]   9   byte\n[506]   57  byte\n[507]   63  byte\n[508]   0   byte\n[509]   0   byte\n[510]   0   byte\n[511]   0   byte\n[512]   0   byte\n[513]   0   byte\n[514]   0   byte\n[515]   0   byte\n[516]   0   byte\n[517]   0   byte\n[518]   0   byte\n[519]   0   byte\n[520]   220 byte\n[521]   130 byte\n[522]   61  byte\n[523]   63  byte\n[524]   0   byte\n[525]   0   byte\n[526]   0   byte\n[527]   0   byte\n[528]   0   byte\n[529]   0   byte\n[530]   0   byte\n[531]   0   byte\n[532]   0   byte\n[533]   0   byte\n[534]   0   byte\n[535]   0   byte\n[536]   186 byte\n[537]   220 byte\n[538]   65  byte\n[539]   63  byte\n[540]   0   byte\n[541]   0   byte\n[542]   0   byte\n[543]   0   byte\n[544]   0   byte\n[545]   0   byte\n[546]   0   byte\n[547]   0   byte\n[548]   0   byte\n[549]   0   byte\n[550]   0   byte\n[551]   0   byte\n[552]   245 byte\n[553]   21  byte\n[554]   70  byte\n[555]   63  byte\n[556]   0   byte\n[557]   0   byte\n[558]   0   byte\n[559]   0   byte\n[560]   0   byte\n[561]   0   byte\n[562]   0   byte\n[563]   0   byte\n[564]   0   byte\n[565]   0   byte\n[566]   0   byte\n[567]   0   byte\n[568]   214 byte\n[569]   45  byte\n[570]   74  byte\n[571]   63  byte\n[572]   0   byte\n[573]   0   byte\n[574]   0   byte\n[575]   0   byte\n[576]   0   byte\n[577]   0   byte\n[578]   0   byte\n[579]   0   byte\n[580]   0   byte\n[581]   0   byte\n[582]   0   byte\n[583]   0   byte\n[584]   173 byte\n[585]   35  byte\n[586]   78  byte\n[587]   63  byte\n[588]   0   byte\n[589]   0   byte\n[590]   0   byte\n[591]   0   byte\n[592]   0   byte\n[593]   0   byte\n[594]   0   byte\n[595]   0   byte\n[596]   0   byte\n[597]   0   byte\n[598]   0   byte\n[599]   0   byte\n[600]   207 byte\n[601]   246 byte\n[602]   81  byte\n[603]   63  byte\n[604]   0   byte\n[605]   0   byte\n[606]   0   byte\n[607]   0   byte\n[608]   0   byte\n[609]   0   byte\n[610]   0   byte\n[611]   0   byte\n[612]   0   byte\n[613]   0   byte\n[614]   0   byte\n[615]   0   byte\n[616]   152 byte\n[617]   166 byte\n[618]   85  byte\n[619]   63  byte\n[620]   0   byte\n[621]   0   byte\n[622]   0   byte\n[623]   0   byte\n[624]   0   byte\n[625]   0   byte\n[626]   0   byte\n[627]   0   byte\n[628]   0   byte\n[629]   0   byte\n[630]   0   byte\n[631]   0   byte\n[632]   104 byte\n[633]   50  byte\n[634]   89  byte\n[635]   63  byte\n[636]   0   byte\n[637]   0   byte\n[638]   0   byte\n[639]   0   byte\n[640]   0   byte\n[641]   0   byte\n[642]   0   byte\n[643]   0   byte\n[644]   0   byte\n[645]   0   byte\n[646]   0   byte\n[647]   0   byte\n[648]   1</code></pre>\n\n</li>\n</ul>\n",
    "PostedDate": "2016-12-07T05:10:33.507-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1489418",
    "ThreadId": "659945",
    "Html": "maybe is the way I am playing it ?<br />\n<pre><code> void Play(double Amp, double Left, double Right)\n        {\n            BBeats = new binaural_beats();\n            BBeats.Amplitude = Amp;\n            BBeats.Amplitude2 = Amp;\n            BBeats.Frequency = Left;\n            BBeats.Frequency2 = Right;\n\n            BBeats.Bufferlength = 44100 * 2 * 3;// will play for 3 sec\n\n            waveout = new WaveOut();\n            WaveChannel32 temp = new WaveChannel32(BBeats);\n            temp.PadWithZeroes = false;\n            waveout.Init(temp);\n            waveout.Play();\n\n        }</code></pre>\n\n",
    "PostedDate": "2016-12-07T05:12:01.163-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1489537",
    "ThreadId": "659945",
    "Html": "anyone ?<br />\n",
    "PostedDate": "2016-12-09T05:22:42.613-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1490382",
    "ThreadId": "659945",
    "Html": "Mark Heath?<br />\n",
    "PostedDate": "2016-12-28T21:47:13.59-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]