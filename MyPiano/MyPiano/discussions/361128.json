[
  {
    "Id": "854382",
    "ThreadId": "361128",
    "Html": "\r\n<p>Hello, I'm trying to play a .wav file in a service in vb.net (2010/4.0).</p>\r\n<p>When I change AudioClientShareMode.Exclusive to AudioClientShareMode.Shared the sound plays fine, but gets cut off sometimes (I'm assuming by other sounds that play in Exclusive mode).</p>\r\n<p>I'm admittedly not that familiar with Playing Audio through vb.net and I'm just trying to piece together examples until it works.</p>\r\n<p>What is the best way to make sure my sound plays?</p>\r\n<p>Here is my code (wavPath is the relative path to my wav File).&nbsp; It throws the error: &quot;Can't find a supported format to use.&quot;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Play sound<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim waveoutdevice As IWavePlayer<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim mainoutputstream As WaveStream<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim inputStream As WaveChannel32<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim wavreader As WaveStream<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; waveoutdevice = New WasapiOut(NAudio.CoreAudioApi.AudioClientShareMode.Exclusive, 100)<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wavreader = New WaveFileReader(wavPath)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; inputStream = New WaveChannel32(wavreader)<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mainoutputstream = inputStream<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; waveoutdevice.Init(mainoutputstream)<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; waveoutdevice.Play()<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Wait for sound to play<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Threading.Thread.Sleep(wavreader.TotalTime.Milliseconds * 10)<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Cleanup<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; waveoutdevice.Stop()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; waveoutdevice.Dispose()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mainoutputstream.Close()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mainoutputstream.Dispose()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; inputStream.Close()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; inputStream.Dispose()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wavreader.Close()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wavreader.Dispose()</p>\r\n<p>Thanks!</p>\r\n",
    "PostedDate": "2012-06-27T07:21:45.113-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "855499",
    "ThreadId": "361128",
    "Html": "<p>wasapi out can be very picky about the exact waveformat you feed it. I would recommed using WaveOut if possible. If you want to use WasapiOut, find out what WaveFormats it supports in exclusive mode and check you pass it that.</p>",
    "PostedDate": "2012-06-29T08:33:12.497-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "855583",
    "ThreadId": "361128",
    "Html": "<p>Hello markhealth,</p>\r\n<p>Thank you for the suggestion.&nbsp; I have tried using WaveOut, the only problem is it doesn't appear to work in my service, though it works fine in a normal form.&nbsp; It is very important that the sound plays regardless of whether or not a user is logged into the computer, so a service is necessary.</p>\r\n<p>I will try to look further into WasapiOut - would that be on Microsoft's website?</p>\r\n<p>Currently I have implemented the \"solution\" in this thread: http://naudio.codeplex.com/discussions/356912/</p>\r\n<p>I am playing my sound in shared mode and if it errors (detected by exactly what that thread describes) I am replaying my sound 1 second later, trying no more than 5 times to avoid infinite loops.</p>\r\n<p>I don't believe this is the best solution, but I'm not sure if I can get anything else to work.</p>\r\n<p>Is there a different format that would work better for wasapiout? Converting the sound to mp3 would not be too much of a hassle if that fixes the problem.</p>\r\n<p>Thanks again for the reply!</p>",
    "PostedDate": "2012-06-29T11:56:17.76-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "855585",
    "ThreadId": "361128",
    "Html": "<p>WaveOut won't work in a service because it uses window callbacks. Try WaveOutEvent instead, which uses a background thread.</p>",
    "PostedDate": "2012-06-29T12:01:30.337-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "855611",
    "ThreadId": "361128",
    "Html": "<p>Hello markheath,</p>\r\n<p>After playing around with WaveOutEvent I have it working!&nbsp; So just for my own sanity, does waveoutevent play in exclusive mode? Is there such a thing as shared/exclusive modes with waveoutevent?&nbsp; Will my sound ever be cut off by an exclusive mode sound?</p>\r\n<p>Thanks for your help!</p>",
    "PostedDate": "2012-06-29T13:00:25.78-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "855837",
    "ThreadId": "361128",
    "Html": "<p>No waveoutevent doesn't use exclusive mode. If another application uses exlusive mode (which should be rare) it will take over the soundcard.</p>",
    "PostedDate": "2012-06-30T12:14:35.823-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "856349",
    "ThreadId": "361128",
    "Html": "<p>Thank you for your help markheath!</p>",
    "PostedDate": "2012-07-02T07:17:34.227-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1274168",
    "ThreadId": "361128",
    "Html": "Neither DirectSoundOut nor WaveOutEvent was an option for me. Both DirectSoundOut and WaveOutEvent made audible pops at the beginning and end of playback on all the machines I used for testing. Wasapi produces no pops with the same audio files on the same test machines. \r<br />\n<br />\nHere is how I got around the five second cut off with Wasapi used in shared mode in a Windows service. \r<br />\n<br />\n1) I installed NuGet. <a href=\"http://docs.nuget.org/docs/start-here/installing-nuget\" rel=\"nofollow\">http://docs.nuget.org/docs/start-here/installing-nuget</a>\r<br />\n2) I got the latest version of NAudio (1.7.1) using NuGet. <a href=\"https://www.nuget.org/packages/NAudio\" rel=\"nofollow\">https://www.nuget.org/packages/NAudio</a>\r<br />\n3) I used the code from this blog: <a href=\"http://bresleveloper.blogspot.co.il/2012/06/c-service-play-sound-with-naudio.html\" rel=\"nofollow\">http://bresleveloper.blogspot.co.il/2012/06/c-service-play-sound-with-naudio.html</a>. \r<br />\n4) I modified that code. The code is reproduced below with my modification, which checks the playstate every second and waits until the file is done playing before exiting the procedure.\r<br />\n<br />\nI hope this helps someone because getting audio to work nicely in a windows service is a pain.<br />\n<pre><code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.ComponentModel.Composition;\n\nusing NAudio.Wave;\nusing NAudio.CoreAudioApi;\nusing NAudio.Wave.SampleProviders;\n\nnamespace CallAndRead\n{\n    public interface IInputFileFormatPlugin\n    {\n        string Name { get; }\n        string Extension { get; }\n        WaveStream CreateWaveStream(string fileName);\n    }\n\n    [Export(typeof(IInputFileFormatPlugin))]\n    class WaveInputFilePlugin : IInputFileFormatPlugin\n    {\n        public string Name\n        { get { return &quot;WAV file&quot;; } }\n        public string Extension\n        { get { return &quot;.wav&quot;; } }\n\n        public WaveStream CreateWaveStream(string fileName)\n        {\n            WaveStream readerStream = new WaveFileReader(fileName);\n            if (readerStream.WaveFormat.Encoding != WaveFormatEncoding.Pcm\n                  &amp;&amp; readerStream.WaveFormat.Encoding != WaveFormatEncoding.IeeeFloat)\n            {\n                readerStream = WaveFormatConversionStream.CreatePcmStream(readerStream);\n                readerStream = new BlockAlignReductionStream(readerStream);\n            }\n            return readerStream;\n        }\n    }\n\n    class WASAPI\n    {\n        public static void Concatenate(string outputFile, IEnumerable&lt;string&gt; sourceFiles)\n        {\n            byte[] buffer = new byte[1024];\n            WaveFileWriter waveFileWriter = null;\n            try\n            {\n                foreach (string sourceFile in sourceFiles)\n                {\n                    using (WaveFileReader reader = new WaveFileReader(sourceFile))\n                    {\n                        if (waveFileWriter == null)\n                            waveFileWriter = new WaveFileWriter(outputFile, reader.WaveFormat);\n                        else\n                        {\n                            if (!reader.WaveFormat.Equals(waveFileWriter.WaveFormat))\n                                throw new InvalidOperationException(\n                                         &quot;Can't concatenate WAV Files that don't share the same format&quot;);\n                        }\n                        int read;\n                        while ((read = reader.Read(buffer, 0, buffer.Length)) &gt; 0)\n                        {\n                            waveFileWriter.Write(buffer, 0, read);\n                        }\n                    }\n                }\n            }\n            finally\n            {\n                if (waveFileWriter != null)\n                    waveFileWriter.Dispose();\n            }\n        }\n\n        private IWavePlayer waveOut = new WasapiOut(AudioClientShareMode.Shared, 300);\n        WaveStream fileWaveStream;\n        Action&lt;float&gt; setVolumeDelegate;\n\n        [ImportMany(typeof(IInputFileFormatPlugin))]\n        public IEnumerable&lt;IInputFileFormatPlugin&gt; InputFileFormats { get; set; }\n\n        void OnPreVolumeMeter(object sender, StreamVolumeEventArgs e)\n        {\n            // we know it is stereo\n            //w aveformPainter1.AddMax(e.MaxSampleValues[0]);\n            //waveformPainter2.AddMax(e.MaxSampleValues[1]);\n        }\n\n        public ISampleProvider CreateInputStream(string fileName)\n        {\n            var plugin = new WaveInputFilePlugin();\n            if (plugin == null)\n                throw new InvalidOperationException(&quot;Unsupported file extension&quot;);\n            fileWaveStream = plugin.CreateWaveStream(fileName);\n            var waveChannel = new SampleChannel(fileWaveStream);\n            setVolumeDelegate = (vol) =&gt; waveChannel.Volume = vol;\n            waveChannel.PreVolumeMeter += OnPreVolumeMeter;\n            var postVolumeMeter = new MeteringSampleProvider(waveChannel);\n            postVolumeMeter.StreamVolume += OnPostVolumeMeter;\n            return postVolumeMeter;\n        }\n\n        void OnPostVolumeMeter(object sender, StreamVolumeEventArgs e)\n        {\n            // we know it is stereo\n            //volumeMeter1.Amplitude = e.MaxSampleValues[0];\n            //volumeMeter2.Amplitude = e.MaxSampleValues[1];\n        }\n\n        public WASAPI(string fileName)\n        {\n            ISampleProvider sampleProvider = null;\n            sampleProvider = CreateInputStream(fileName);\n            waveOut.Init(new SampleToWaveProvider(sampleProvider));\n            waveOut.Play();\n            while (waveOut.PlaybackState == PlaybackState.Playing)\n            {\n                Thread.Sleep(1000);\n            }\n            return;\n        }\n    }\n}</code></pre>\n\nTo play a file just call this:<br />\n<pre><code>CallAndRead.WASAPI Player = new CallAndRead.WASAPI(&lt;string path to audio file&gt;);</code></pre>\n\nYeah, I know, NUTS! but it works.\r<br />\n<br />\n-Tom<br />\n",
    "PostedDate": "2014-07-18T21:55:09.947-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]