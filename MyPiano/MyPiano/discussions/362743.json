[
  {
    "Id": "860024",
    "ThreadId": "362743",
    "Html": "\r\n<p>Hello all,&nbsp;</p>\r\n<p>I was recently looking at a piece of code Mark posted on stackoverflow regarding fade in/fade out. &nbsp;</p>\r\n<p>The directions are, &quot;<span>Just call&nbsp;</span><code>BeginFadeIn</code><span>&nbsp;or&nbsp;</span><code>BeginFadeOut</code><span>&nbsp;with the appropriate fade duration.</span>&quot;</p>\r\n<p>So I tried to implement it like this:</p>\r\n<p></p>\r\n<pre>// fade it out over 2 seconds\r\n                var afr = new AudioFileReader(filename);\r\n                var fader = new FadeInOutSampleProvider(afr);\r\n                fader.BeginFadeOut(2000);</pre>\r\n<p></p>\r\n<p>But I am not exactly sure what to do next, because there is more to it than this. &nbsp;I am not sure what to do with the Read function. &nbsp;My goal is to be able to pass in a file that has a static volume throughout, and get a new file that fades to zero\r\n over the last 2 seconds of the file.</p>\r\n<p>Any pointers would be appreciated.</p>\r\n<p>//class</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> FadeInOutSampleProvider : ISampleProvider\r\n{\r\n    <span style=\"color:blue\">enum</span> FadeState\r\n    {\r\n        Silence,\r\n        FadingIn,\r\n        FullVolume,\r\n        FadingOut,\r\n    }\r\n\r\n    <span style=\"color:blue\">private</span> <span style=\"color:blue\">readonly</span> <span style=\"color:blue\">object</span> lockObject = <span style=\"color:blue\">new</span> <span style=\"color:blue\">object</span>();\r\n    <span style=\"color:blue\">private</span> <span style=\"color:blue\">readonly</span> ISampleProvider source;\r\n    <span style=\"color:blue\">private</span> <span style=\"color:blue\">int</span> fadeSamplePosition;\r\n    <span style=\"color:blue\">private</span> <span style=\"color:blue\">int</span> fadeSampleCount;\r\n    <span style=\"color:blue\">private</span> FadeState fadeState;\r\n\r\n    <span style=\"color:blue\">public</span> FadeInOutSampleProvider(ISampleProvider source)\r\n    {\r\n        <span style=\"color:blue\">this</span>.source = source;\r\n        <span style=\"color:blue\">this</span>.fadeState = FadeState.FullVolume;\r\n    }\r\n\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> BeginFadeIn(<span style=\"color:blue\">double</span> fadeDurationInMilliseconds)\r\n    {\r\n        <span style=\"color:blue\">lock</span> (lockObject)\r\n        { \r\n            fadeSamplePosition = 0;\r\n            fadeSampleCount = (<span style=\"color:blue\">int</span>)((fadeDurationInMilliseconds * source.WaveFormat.SampleRate) / 1000);\r\n            fadeState = FadeState.FadingIn;\r\n        }\r\n    }\r\n\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> BeginFadeOut(<span style=\"color:blue\">double</span> fadeDurationInMilliseconds)\r\n    {\r\n        <span style=\"color:blue\">lock</span> (lockObject)\r\n        {\r\n            fadeSamplePosition = 0;\r\n            fadeSampleCount = (<span style=\"color:blue\">int</span>)((fadeDurationInMilliseconds * source.WaveFormat.SampleRate) / 1000);\r\n            fadeState = FadeState.FadingOut;\r\n        }\r\n    }\r\n\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">int</span> Read(<span style=\"color:blue\">float</span>[] buffer, <span style=\"color:blue\">int</span> offset, <span style=\"color:blue\">int</span> count)\r\n    {\r\n        <span style=\"color:blue\">int</span> sourceSamplesRead = source.Read(buffer, offset, count);\r\n        <span style=\"color:blue\">lock</span> (lockObject)\r\n        {\r\n            <span style=\"color:blue\">if</span> (fadeState == FadeState.FadingIn)\r\n            {\r\n                FadeIn(buffer, offset, sourceSamplesRead);\r\n            }\r\n            <span style=\"color:blue\">else</span> <span style=\"color:blue\">if</span> (fadeState == FadeState.FadingOut)\r\n            {\r\n                FadeOut(buffer, offset, sourceSamplesRead);\r\n            }\r\n            <span style=\"color:blue\">else</span> <span style=\"color:blue\">if</span> (fadeState == FadeState.Silence)\r\n            {\r\n                ClearBuffer(buffer, offset, count);\r\n            }\r\n        }\r\n        <span style=\"color:blue\">return</span> sourceSamplesRead;\r\n    }\r\n\r\n    <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> ClearBuffer(<span style=\"color:blue\">float</span>[] buffer, <span style=\"color:blue\">int</span> offset, <span style=\"color:blue\">int</span> count)\r\n    {\r\n        <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> n = 0; n &lt; count; n&#43;&#43;)\r\n        {\r\n            buffer[n &#43; offset] = 0;\r\n        }\r\n    }\r\n\r\n    <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> FadeOut(<span style=\"color:blue\">float</span>[] buffer, <span style=\"color:blue\">int</span> offset, <span style=\"color:blue\">int</span> sourceSamplesRead)\r\n    {\r\n        <span style=\"color:blue\">int</span> sample = 0;\r\n        <span style=\"color:blue\">while</span> (sample &lt; sourceSamplesRead)\r\n        {\r\n            <span style=\"color:blue\">float</span> multiplier = 1.0f - (fadeSamplePosition / (<span style=\"color:blue\">float</span>)fadeSampleCount);\r\n            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> ch = 0; ch &lt; source.WaveFormat.Channels; ch&#43;&#43;)\r\n            {\r\n                buffer[offset &#43; sample&#43;&#43;] *= multiplier;\r\n            }\r\n            fadeSamplePosition&#43;&#43;;\r\n            <span style=\"color:blue\">if</span> (fadeSamplePosition &gt; fadeSampleCount)\r\n            {\r\n                fadeState = FadeState.Silence;\r\n                <span style=\"color:green\">// clear out the end</span>\r\n                ClearBuffer(buffer, sample &#43; offset, sourceSamplesRead - sample);\r\n                <span style=\"color:blue\">break</span>;\r\n            }\r\n        }\r\n    }\r\n\r\n    <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> FadeIn(<span style=\"color:blue\">float</span>[] buffer, <span style=\"color:blue\">int</span> offset, <span style=\"color:blue\">int</span> sourceSamplesRead)\r\n    {\r\n        <span style=\"color:blue\">int</span> sample = 0;\r\n        <span style=\"color:blue\">while</span> (sample &lt; sourceSamplesRead)\r\n        {\r\n            <span style=\"color:blue\">float</span> multiplier = (fadeSamplePosition / (<span style=\"color:blue\">float</span>)fadeSampleCount);\r\n            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> ch = 0; ch &lt; source.WaveFormat.Channels; ch&#43;&#43;)\r\n            {\r\n                buffer[offset &#43; sample&#43;&#43;] *= multiplier;\r\n            }\r\n            fadeSamplePosition&#43;&#43;;\r\n            <span style=\"color:blue\">if</span> (fadeSamplePosition &gt; fadeSampleCount)\r\n            {\r\n                fadeState = FadeState.FullVolume;\r\n                <span style=\"color:green\">// no need to multiply any more</span>\r\n                <span style=\"color:blue\">break</span>;\r\n            }\r\n        }\r\n    }\r\n\r\n    <span style=\"color:blue\">public</span> WaveFormat WaveFormat\r\n    {\r\n        <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> source.WaveFormat; }\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2012-07-10T16:40:58.587-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "860119",
    "ThreadId": "362743",
    "Html": "\r\n<p>I figured it out almost immediately after posting:</p>\r\n<p>&nbsp;</p>\r\n<pre><pre>var afr = new AudioFileReader(filename);\nvar fader = new FadeInOutSampleProvider(afr);\nfader.BeginFadeOut(2000);\nvar stwp = new NAudio.Wave.SampleProviders.SampleToWaveProvider(fader);\nWaveFileWriter.CreateWaveFile(&quot;faded&quot;&#43;filename, stwp);  </pre>\n<br></pre>\r\n",
    "PostedDate": "2012-07-10T20:53:54.827-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]