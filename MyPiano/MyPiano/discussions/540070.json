[
  {
    "Id": "1226400",
    "ThreadId": "540070",
    "Html": "Hello\r<br />\n<br />\nI'm implementing NAudio to a music player app. Previously the app has had MediaElement control which handles audio playing but now because of new requirements like fading next sound in and previous out, I'm trying to use NAudio for this, and have been successful for most parts.\r<br />\n<br />\nBut what I haven't been able to do is play audio in background similar to how MediaElement works when AudioCategory is set to AudioCategory.BackgroundCapableMedia. The way that works is that if I switch active app to something else, audio still continues to play. The way my NAudio implementation works at the moment is so that the music fades out immediately.\r<br />\n<br />\nIs such a thing possible with current build of NAudio for Windows Store apps? And if not, is it something that comes in one of the next versions of NAudio? Is it even possible through WASAPI? The only way I see it could work at the moment is that a right parameter is passed using PropVariant class but I don't have a clue what that might.\r<br />\n<br />\nRegards,\r<br />\nJanne<br />\n",
    "PostedDate": "2014-03-25T05:00:26.507-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1226403",
    "ThreadId": "540070",
    "Html": "hi, I'm afraid I don't have knowledge of how to do background audio in Windows Store apps. You'd probably need to do some digging around on MSDN to see if you can find what you're supposed to do with WASAPI (find the PropVariant), and then we can get that added into NAudio as an option.<br />\n",
    "PostedDate": "2014-03-25T05:03:22.163-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1226480",
    "ThreadId": "540070",
    "Html": "I'll take another look at this tomorrow but in case you got time + interest, I think I came pretty close to the solution.\r<br />\n<br />\nI found this nice WASAPI C++ sample which is capable of background audio:\r<br />\n<a href=\"http://code.msdn.microsoft.com/windowsapps/Windows-Audio-Session-22dcab6b\" rel=\"nofollow\">http://code.msdn.microsoft.com/windowsapps/Windows-Audio-Session-22dcab6b</a>\r<br />\n<br />\nI figured out the code required should be something like this. However, I wasn't able to get it work:\r<br />\n<br />\nReplace Activate method inside WasapiOutRT.cs with these:<br />\n<pre><code>    //    typedef struct AudioClientProperties\n    //{\n    //UINT32 cbSize;\n    //BOOL bIsOffload;\n    //AUDIO_STREAM_CATEGORY eCategory;\n    //AUDCLNT_STREAMOPTIONS Options;\n    //}     AudioClientProperties;\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct AudioClientProperties\n    {\n        public UInt32 cbSize;\n        public int bIsOffload;\n        public AUDIO_STREAM_CATEGORY eCategory;\n        public AUDCLNT_STREAMOPTIONS Options;\n    }\n\n    //-------------------------------------------------------------------------\n    // Description: Audio stream categories\n    //\n    // BackgroundCapableMedia  - Music, Streaming audio\n    // ForegroundOnlyMedia     - Video with audio\n    // Communications          - VOIP, chat, phone call\n    // Alerts                  - Alarm, Ring tones\n    // SoundEffects            - Sound effects, clicks, dings\n    // GameEffects             - Game sound effects\n    // GameMedia               - Background audio for games\n    // Other                   - All other streams (default)\n    //\n    public enum AUDIO_STREAM_CATEGORY\n    {\n        AudioCategory_Other = 0,\n        AudioCategory_ForegroundOnlyMedia,\n        AudioCategory_BackgroundCapableMedia,\n        AudioCategory_Communications,\n        AudioCategory_Alerts,\n        AudioCategory_SoundEffects,\n        AudioCategory_GameEffects,\n        AudioCategory_GameMedia,\n    }\n\n    public enum AUDCLNT_STREAMOPTIONS\n    {\n        AUDCLNT_STREAMOPTIONS_NONE = 0,\n        AUDCLNT_STREAMOPTIONS_RAW = 0x1\n    }\n\n\n    private async Task Activate()\n    {\n        var icbh = new ActivateAudioInterfaceCompletionHandler(\n            ac2 =&gt;\n            {\n                var prop = new AudioClientProperties();\n                prop.cbSize = (uint)Marshal.SizeOf(prop);\n                prop.bIsOffload = 0;\n                prop.eCategory = AUDIO_STREAM_CATEGORY.AudioCategory_BackgroundCapableMedia;\n                prop.Options = AUDCLNT_STREAMOPTIONS.AUDCLNT_STREAMOPTIONS_NONE;\n                IntPtr p = Marshal.AllocHGlobal(Marshal.SizeOf(prop));\n                Marshal.StructureToPtr(prop, p, false);\n                ac2.SetClientProperties(p);\n\n                /*var wfx = new WaveFormat(44100, 16, 2);\n            int hr = ac2.Initialize(AudioClientShareMode.Shared,\n                           AudioClientStreamFlags.EventCallback | AudioClientStreamFlags.NoPersist,\n                           10000000, 0, wfx, IntPtr.Zero);*/\n            });\n        var IID_IAudioClient2 = new Guid(&quot;726778CD-F60A-4eda-82DE-E47610CD78AA&quot;);\n        IActivateAudioInterfaceAsyncOperation activationOperation;\n        NativeMethods.ActivateAudioInterfaceAsync(device, IID_IAudioClient2, IntPtr.Zero, icbh, out activationOperation);\n        var audioClient2 = await icbh;\n        this.audioClient = new AudioClient((IAudioClient)audioClient2);\n    }\n\n</code></pre>\n\nI changed NAudioWin8Demo's target to Windows 8.1 and added Background audio capability in appxmanifest but with no luck.\r<br />\n<br />\nI'll get back to this tomorrow and try to find out what I am missing or doing wrong.<br />\n<ul>\n<li>Janne</li>\n</ul>\n",
    "PostedDate": "2014-03-25T08:37:32.99-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1226810",
    "ThreadId": "540070",
    "Html": "It seemed that the above code actually was working but for some reason, not in the NAudioWin8Demo that I tried it in. When I created new test project, it started working. And in NAudioWin8Demo it started working if I set AudioStreamCategory to Communications.\r<br />\n<br />\nHere is how the code looks after cleaning, in case you want to implement it too. Feel free to make changes if these changes fight against the architectural ideology behind NAudio:\r<br />\n<br />\n(All changes are just into Win8 project, nothing was added to NAudio core project)\r<br />\n<br />\nAdd the following enums and struct to CoreAudioApi folder<br />\n<pre><code>namespace NAudio.CoreAudioApi\n{\n    /// &lt;summary&gt;\n    /// Specifies the category of an audio stream.\n    /// &lt;/summary&gt;\n    public enum AudioStreamCategory\n    {\n        /// &lt;summary&gt;\n        /// Other audio stream.\n        /// &lt;/summary&gt;\n        Other = 0,\n        /// &lt;summary&gt;\n        /// Media that will only stream when the app is in the foreground.\n        /// &lt;/summary&gt;\n        ForegroundOnlyMedia,\n        /// &lt;summary&gt;\n        /// Media that can be streamed when the app is in the background.\n        /// &lt;/summary&gt;\n        BackgroundCapableMedia,\n        /// &lt;summary&gt;\n        /// Real-time communications, such as VOIP or chat.\n        /// &lt;/summary&gt;\n        Communications,\n        /// &lt;summary&gt;\n        /// Alert sounds.\n        /// &lt;/summary&gt;\n        Alerts,\n        /// &lt;summary&gt;\n        /// Sound effects.\n        /// &lt;/summary&gt;\n        SoundEffects,\n        /// &lt;summary&gt;\n        /// Game sound effects.\n        /// &lt;/summary&gt;\n        GameEffects,\n        /// &lt;summary&gt;\n        /// Background audio for games.\n        /// &lt;/summary&gt;\n        GameMedia,\n    }\n}\n\nnamespace NAudio.CoreAudioApi\n{\n    /// &lt;summary&gt;\n    /// Defines values that describe the characteristics of an audio stream.\n    /// &lt;/summary&gt;\n    public enum AudioClientStreamOptions\n    {\n        /// &lt;summary&gt;\n        /// No stream options.\n        /// &lt;/summary&gt;\n        None = 0,\n        /// &lt;summary&gt;\n        /// The audio stream is a 'raw' stream that bypasses all signal processing except for endpoint specific, always-on processing in the APO, driver, and hardware.\n        /// &lt;/summary&gt;\n        Raw = 0x1\n    }\n}\n\nnamespace NAudio.CoreAudioApi\n{\n    /// &lt;summary&gt;\n    /// The AudioClientProperties structure is used to set the parameters that describe the properties of the client's audio stream.\n    /// &lt;/summary&gt;\n    /// &lt;remarks&gt;http://msdn.microsoft.com/en-us/library/windows/desktop/hh968105(v=vs.85).aspx&lt;/remarks&gt;\n    [StructLayout(LayoutKind.Sequential)]\n    public struct AudioClientProperties\n    {\n        /// &lt;summary&gt;\n        /// The size of the buffer for the audio stream.\n        /// &lt;/summary&gt;\n        public UInt32 cbSize;\n        /// &lt;summary&gt;\n        /// Boolean value to indicate whether or not the audio stream is hardware-offloaded\n        /// &lt;/summary&gt;\n        public int bIsOffload;\n        /// &lt;summary&gt;\n        /// An enumeration that is used to specify the category of the audio stream.\n        /// &lt;/summary&gt;\n        public AudioStreamCategory eCategory;\n        /// &lt;summary&gt;\n        /// A bit-field describing the characteristics of the stream. Supported in Windows 8.1 and later.\n        /// &lt;/summary&gt;\n        public AudioClientStreamOptions Options;\n    }\n}</code></pre>\n\nAdd this to WaveOutputs/IWavePlayer<br />\n<pre><code>        \n        /// &lt;summary&gt;\n        /// Sets the parameters that describe the properties of the client's audio stream.\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;useHardwareOffload&quot;&gt;Boolean value to indicate whether or not the audio stream is hardware-offloaded.&lt;/param&gt;\n        /// &lt;param name=&quot;category&quot;&gt;An enumeration that is used to specify the category of the audio stream.&lt;/param&gt;\n        /// &lt;param name=&quot;options&quot;&gt;A bit-field describing the characteristics of the stream. Supported in Windows 8.1 and later.&lt;/param&gt;\n        void SetClientProperties(bool useHardwareOffload, AudioStreamCategory category, AudioClientStreamOptions options);\n</code></pre>\n\nChanges to WasapiOutRT:<br />\n<pre><code>        /// &lt;summary&gt;\n        /// Properties of the client's audio stream.\n        /// &lt;/summary&gt;\n        private AudioClientProperties? audioClientProperties = null;\n\n        /// &lt;summary&gt;\n        /// Sets the parameters that describe the properties of the client's audio stream.\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;useHardwareOffload&quot;&gt;Boolean value to indicate whether or not the audio stream is hardware-offloaded.&lt;/param&gt;\n        /// &lt;param name=&quot;category&quot;&gt;An enumeration that is used to specify the category of the audio stream.&lt;/param&gt;\n        /// &lt;param name=&quot;options&quot;&gt;A bit-field describing the characteristics of the stream. Supported in Windows 8.1 and later.&lt;/param&gt;\n        public void SetClientProperties(bool useHardwareOffload, AudioStreamCategory category, AudioClientStreamOptions options)\n        {\n            var audioClientProperties = new AudioClientProperties();\n            audioClientProperties.cbSize = (uint)Marshal.SizeOf&lt;AudioClientProperties&gt;();\n            audioClientProperties.bIsOffload = Convert.ToInt32(useHardwareOffload);\n            audioClientProperties.eCategory = category;\n            audioClientProperties.Options = options;\n            this.audioClientProperties = audioClientProperties;\n        }\n\n\n        private async Task Activate()\n        {\n            var icbh = new ActivateAudioInterfaceCompletionHandler(\n                ac2 =&gt;\n                {\n                    if (this.audioClientProperties != null)\n                    {\n                        IntPtr p = Marshal.AllocHGlobal(Marshal.SizeOf(this.audioClientProperties.Value));\n                        Marshal.StructureToPtr(this.audioClientProperties.Value, p, false);\n                        ac2.SetClientProperties(p);\n                    }\n\n                    /*var wfx = new WaveFormat(44100, 16, 2);\n                int hr = ac2.Initialize(AudioClientShareMode.Shared,\n                               AudioClientStreamFlags.EventCallback | AudioClientStreamFlags.NoPersist,\n                               10000000, 0, wfx, IntPtr.Zero);*/\n                });\n            var IID_IAudioClient2 = new Guid(&quot;726778CD-F60A-4eda-82DE-E47610CD78AA&quot;);\n            IActivateAudioInterfaceAsyncOperation activationOperation;\n            NativeMethods.ActivateAudioInterfaceAsync(device, IID_IAudioClient2, IntPtr.Zero, icbh, out activationOperation);\n            var audioClient2 = await icbh;\n            this.audioClient = new AudioClient((IAudioClient)audioClient2);\n        }</code></pre>\n\nWhen testing, call SetClientProperties before Init(). Remember to set background capability in appxmanifest.\r<br />\n<br />\nI haven't tested the changes much yet and all testing I have done is with Windows 8.1. And AudioClientProperties.Options is only supported in Windows 8.1 as the comments state so I'm not sure what happens when trying to set it in Windows 8.0.\r<br />\n<br />\nRegards,\r<br />\nJanne<br />\n",
    "PostedDate": "2014-03-26T01:49:32.697-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1226815",
    "ThreadId": "540070",
    "Html": "thanks for this, I'll look to getting this into NAudio when I next do some work on the Windows Store part<br />\n",
    "PostedDate": "2014-03-26T02:11:50.523-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1232998",
    "ThreadId": "540070",
    "Html": "OK, I've put this in although there are a few small changes I've made. This doesn't belong in IWavePlayer as it is only relevant to WASAPI.\r<br />\nAlso, I'd ideally like to avoid the Marshal.StructureToPtr. Is there any chance you could try testibg this with a different signature in IAudioClient2?<br />\n<pre><code>void SetClientProperties([In, MarshalAs(UnmanagedType.LPStruct)] AudioClientProperties pProperties);</code></pre>\n\n",
    "PostedDate": "2014-04-10T14:37:57.767-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1238436",
    "ThreadId": "540070",
    "Html": "Thank you a lot for this solution Jannera. For me too it works on my project, if I set AudioStreamCategory to Communications and not if I set to BackgroundCapableMedia. Have you find for which reasons since last time ? <br />\n",
    "PostedDate": "2014-04-26T13:47:16.583-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]