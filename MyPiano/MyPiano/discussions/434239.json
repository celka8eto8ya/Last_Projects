[
  {
    "Id": "1005674",
    "ThreadId": "434239",
    "Html": "Hi Mark,<br />\n<br />\nI have two small code classes (written in VB2010) whose functionality I would like to suggest to add to NAudio. These classes were developed to ease the process of creating DAW sampler plugin instruments.<br />\n<h1>A. SmplChunk</h1>\nA simple wrapper for Sampler Chunk of a wav file as described in:<br />\n<br />\n<a href=\"http://www.sonicspot.com/guide/wavefiles.html\" rel=\"nofollow\">http://www.sonicspot.com/guide/wavefiles.html</a><br />\n(refer to the Sampler Chunk - &quot;smpl&quot; section near the bottom of the page).<br />\n<br />\nOf particular interest is the Midi Unity Note as well as the &quot;List of Sample Loops&quot;:<br />\n<ol>\n<li>\nThe MIDI Unity Note is a nice piece of metadata to have embedded in the file itself as opposed to relying on the filename to specify this  info.<br />\n</li>\n<li>\nIf the sample loop points are defined in the wav file itself, files can be moved between DAW sampler formats without having to (externally)  specify the loop points in the new sampler format. <br />\n</li>\n</ol>\nReading these parameters has been implemented; I have not completed the ability to update an existing WAV file with a missing smpl chunk or updated values.<br />\n<br />\nExample usage:<br />\n<pre><code>Dim Filename As String = &quot;c:\\new_wloop.wav&quot;\nDim myWavFile As New WavFile(Filename)\nIf myWavFile.SamplerChunk IsNot Nothing Then\n    Console.WriteLine(myWavFile.SamplerChunk.MidiUnityNote)\n    Console.WriteLine(myWavFile.SamplerChunk.SampleLoopCount)\n    Dim I as Integer\n    For I = 0 to myWavFile.SamplerChunk.SampleLoopCount - 1\n        Console.WriteLine(myWavFile.SamplerChunk.SampleLoop(I).Start)\n        Console.WriteLine(myWavFile.SamplerChunk.SampleLoop(I)._End)\n    Next \nEnd If</code></pre>\n\n<h1>B. SFZdotNet</h1>\nA simple wrapper around the sfz Sampler file format as described in:<br />\n<br />\n<a href=\"http://www.cakewalk.com/DevXchange/article.aspx?aid=108\" rel=\"nofollow\">http://www.cakewalk.com/DevXchange/article.aspx?aid=108</a><br />\n<br />\nSFZ is an open file format for samplers, currently evolving to a standard among many commercial samplers.<br />\nA partial list of samplers that support sfz:<br />\n<br />\n<a href=\"http://www.linuxsampler.org/sfz/\" rel=\"nofollow\">http://www.linuxsampler.org/sfz/</a><br />\n(Windows binaries are available)<br />\n<br />\n<a href=\"http://www.plogue.com/products/sforzando/\" rel=\"nofollow\">http://www.plogue.com/products/sforzando/</a><br />\n<br />\n<a href=\"http://www.cakewalk.com/Download/sfz.aspx\" rel=\"nofollow\">http://www.cakewalk.com/Download/sfz.aspx</a><br />\n<br />\n<a href=\"http://www.camelaudio.com/AlchemyPlayer.php\" rel=\"nofollow\">http://www.camelaudio.com/AlchemyPlayer.php</a><br />\n<br />\n<a href=\"http://www.zampler.de/\" rel=\"nofollow\">http://www.zampler.de/</a><br />\n<br />\n<br />\nOne application for this class is to programmatically generate sfz instrument files from a folder a wav files. At present, I've wrapped up ~25 of the most common Region parameters.<br />\n<br />\nThe class does not currently support reading/editing existing files; this is a bit more complicated primarily because the file can be organized in arbitrary order (groups, etc.); plus I didn't require this functionality at the time :)<br />\n<br />\n<br />\n<br />\nSimple code example:<br />\n<pre><code>Dim mysfz As New SFZdotNET.sfz\nmysfz.Comment.Add(&quot;This file was generated by a tool.&quot;)\nmysfz.Comment.Add(&quot;Samples courtesy of http://www.freesound.org/people/canucklovingbrit/&quot;)\nmysfz.Group.Add(New SFZdotNET.Group)\nmysfz.Group(0).loop_mode = SFZdotNET.Region.loop_mode_value.one_shot\nDim I As Integer\nDim myFiles() As String\nmyFiles = IO.Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) &amp; &quot;\\Samples&quot;)\nDim StartingNoteNumber As Integer = 36\nFor Each aFile As String In myFiles\n    mysfz.Group(0).Region.Add(New SFZdotNET.Region(IO.Path.GetFileName(aFile), I))\n    I = I + 1\n    Next\nmysfz.Save(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) &amp; &quot;\\test.sfz&quot;)</code></pre>\n\nOutput file:<br />\n<br />\n// This file was generated by a tool.<br />\n// Samples courtesy of <a href=\"http://www.freesound.org/people/canucklovingbrit/\" rel=\"nofollow\">http://www.freesound.org/people/canucklovingbrit/</a><br />\n<br />\n&lt;group&gt; loop_mode=one_shot<br />\n&lt;region&gt; sample=110641__canucklovingbrit__santa-ho-ho-ho-1_001.wav key=36<br />\n&lt;region&gt; sample=110641__canucklovingbrit__santa-ho-ho-ho-1_002.wav key=37<br />\n&lt;region&gt; sample=110641__canucklovingbrit__santa-ho-ho-ho-1_003.wav key=38<br />\n&lt;region&gt; sample=110641__canucklovingbrit__santa-ho-ho-ho-1_004.wav key=39<br />\n&lt;region&gt; sample=110641__canucklovingbrit__santa-ho-ho-ho-1_005.wav key=40<br />\n<br />\n<br />\n<br />\n <br />\n<br />\n<br />\nIf you think either of these classes are a good addition to NAudio, please let me know.<br />\n<br />\nThanks again for NAudio.<br />\n<br />\nGreg<br />\n",
    "PostedDate": "2013-02-23T08:44:07.013-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1009170",
    "ThreadId": "434239",
    "Html": "hi Greg, thanks for this. NAudio is in C#, so they would need to be converted. The sampChunk would be particularly nice if it could integrate with NAudio's existing WAV chunk support (convert from RiffChunk). \r<br />\n<br />\nNAudio did include a sfz parser but I took it out because it wasn't fully featured. I'd probably just go with a demo app for sfz for now, and only move it into NAudio when both a reader and a writer are available.\r<br />\n<br />\nMark<br />\n",
    "PostedDate": "2013-03-02T01:24:48.1-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]