[
  {
    "Id": "657791",
    "ThreadId": "268987",
    "Html": "<pre class=\"csharpcode\">Goal - I'm making a basic mistake no doubt.  In this example, my goal is to play two audio files in time.  \"hat\" on each beat, \"kick\" on beat one.</pre>\n<pre class=\"csharpcode\">Problem - The rhythm is choppy and uneven.  At first I thought it was the accuracy of system.timer events so I changed it up to a loop dependent on the system.diagnostics.stopwatch.  No dice.</pre>\n<pre class=\"csharpcode\"><br /></pre>\n<pre class=\"csharpcode\"><span class=\"kwrd\">using</span> System;\n<span class=\"kwrd\">using</span> System.Collections.Generic;\n<span class=\"kwrd\">using</span> System.Linq;\n<span class=\"kwrd\">using</span> System.Text;\n\n<span class=\"kwrd\">using</span> NAudio.Wave;\n<span class=\"kwrd\">using</span> NAudio.CoreAudioApi;\n\n<span class=\"kwrd\">namespace</span> Beat\n{\n    <span class=\"kwrd\">class</span> Program\n    {\n        <span class=\"kwrd\">static</span> <span class=\"kwrd\">void</span> Main(<span class=\"kwrd\">string</span>[] args)\n        {\n            IWavePlayer player = <span class=\"kwrd\">null</span>;\n            WaveMixerStream32 mixer = <span class=\"kwrd\">null</span>;\n            WaveStream ws = <span class=\"kwrd\">null</span>;\n            WaveChannel32 wc1 = <span class=\"kwrd\">null</span>;\n            WaveChannel32 wc2 = <span class=\"kwrd\">null</span>;\n\n            ws = <span class=\"kwrd\">new</span> WaveFileReader(<span class=\"str\">\"kick.wav\"</span>);\n            wc1 = <span class=\"kwrd\">new</span> WaveChannel32(ws);\n            ws = <span class=\"kwrd\">new</span> WaveFileReader(<span class=\"str\">\"hat.wav\"</span>);\n            wc2 = <span class=\"kwrd\">new</span> WaveChannel32(ws);\n\n            mixer = <span class=\"kwrd\">new</span> WaveMixerStream32();\n            mixer.AutoStop = <span class=\"kwrd\">false</span>;\n            mixer.AddInputStream(wc1);\n            mixer.AddInputStream(wc2);\n\n            player = <span class=\"kwrd\">new</span> DirectSoundOut();\n            player.Init(mixer);\n            player.Play();\n\n            System.Diagnostics.Stopwatch sw = <span class=\"kwrd\">new</span> System.Diagnostics.Stopwatch();\n            sw.Reset();\n            sw.Start();\n            TimeSpan interval = <span class=\"kwrd\">new</span> TimeSpan(0, 0, 0, 0, 180);\n            \n            <span class=\"kwrd\">int</span> nCount = 0;\n            <span class=\"kwrd\">while</span> (<span class=\"kwrd\">true</span>)\n            {\n                System.Threading.Thread.Sleep(1);\n\n                <span class=\"kwrd\">if</span> (sw.Elapsed &gt; interval)\n                {\n                    sw.Reset();\n                    sw.Start();\n                    wc2.Position = 0;\n\n                    nCount++;\n                    <span class=\"kwrd\">if</span> (nCount == 4)\n                    {\n                        wc1.Position = 0;\n                        nCount = 0;\n                    }\n                }\n            }\n        }\n    }\n}\n</pre>",
    "PostedDate": "2011-08-13T11:08:08.477-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "663192",
    "ThreadId": "268987",
    "Html": "<p>This is because of buffer read sizes. The soundcard is requesting (say) 100ms at a time from the input streams, and although you are repositioning the inputs at a specific moment, the reposition doens't take effect until another Read takes place when the soundcard needs another buffer. Have a look at the latest source code for a drum machine that puts the beats in sample accurate positions.</p>\r\n<p>Mark</p>",
    "PostedDate": "2011-08-25T05:42:43.397-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]