[
  {
    "Id": "256249",
    "ThreadId": "74869",
    "Html": "<p>Hello,<br><br>Was pleased with the &quot;Trim Audio&quot; code snippet. (<a href=\"http://mark-dot-net.blogspot.com/2009/09/trimming-wav-file-using-naudio.html\">http://mark-dot-net.blogspot.com/2009/09/trimming-wav-file-using-naudio.html</a>)<br>Tried it out with NAudio 1.3 (which was totally new to me) and worked perfectly on regular wav disk files.<br><br>My scenario involed in-memory Waves so I was pleased to see that (apparently starting with 1.3 release) WaveFileReader/Writer did support Streams.<br><br>Problem is that in the current WaveFileWriter class design, wave header and length is only updated when the object is disposed... which is ok when writing to a file, a little bit less when the stream is from another kind, because we might want to copy the result stream somewhere before disposing it.<br><br>Correct me if I'm wrong, but I was thinking of copying the block of code that updates the header from the Dispose method into the Flush method. Do you think that could do the job without breaking anything else?<br><br>UPDATE: Actually I did try this quick fix and it dit it, at least to me. Keep on the good work on this very helpful library.<br><br>Regards<br>Frederic</p>",
    "PostedDate": "2009-11-12T01:52:14.75-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "256758",
    "ThreadId": "74869",
    "Html": "<p>Hi Frederic,</p>\r\n<p>Glad you got it working. I hope to make the WaveFileWriter class a bit more effective as a base class, so people can extend it for custom behaviour. If I made the Flush method virtual, and put the code that updated the header in a protected method, then you could get your desired behaviour without having to modify WaveFileWriter.</p>\r\n<p>Mark</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-11-13T06:39:04.393-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1265447",
    "ThreadId": "74869",
    "Html": "Hello,\r<br />\n<br />\nI'm trying to do what the original poster described - created a complete wave in memory using the WaveFileWriter and then passing the memorystream to another component. I need the wave header and length updating so am trying override the WaveFileWriter.Flush() method to call UpdateHeader().\r<br />\n<br />\nHowever, the BinaryWriter seems to be a private variable so I don't have access to this to pass it to the UpdateHeader method.\r<br />\n<br />\nAm I missing something?\r<br />\n<br />\nCheers,\r<br />\n<br />\nThom<br />\n",
    "PostedDate": "2014-07-14T03:32:41.467-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1273560",
    "ThreadId": "74869",
    "Html": "UpdateHeader is virtual, so you can create your own class that inherits WaveFileWriter and do whatever you like in there<br />\n",
    "PostedDate": "2014-07-17T07:29:37.13-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1273608",
    "ThreadId": "74869",
    "Html": "Yeah but what I want to do involves the BinaryWriter member variable which is private. \r<br />\n<br />\nI would suggest that this is made protected so that it is accessible to classes that inherit from WaveFileWriter.\r<br />\n<br />\nThanks,\r<br />\n<br />\nThom<br />\n",
    "PostedDate": "2014-07-17T08:56:42.913-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1273611",
    "ThreadId": "74869",
    "Html": "it's a parameter to UpdateHeader, so you can use it in there<br />\n",
    "PostedDate": "2014-07-17T09:03:06.25-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]