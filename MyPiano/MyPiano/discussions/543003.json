[
  {
    "Id": "1236839",
    "ThreadId": "543003",
    "Html": "Hello Mark,\r<br />\n<br />\nI tried to work the low level winmm.dll functionality out, but encountered several problems. My goal is to play a wave file from stream using WaveOutOpen, WaveOutPrepareHeader und WaveOutWrite, using it only once to play the whole file:<br />\n<pre><code>Imports System.Globalization\nImports System.Runtime.InteropServices\nImports System.Text\nImports System.IO\nImports System.Threading\n\nPublic Class Form1\n\n    &lt;StructLayout(LayoutKind.Sequential)&gt; _\n    Private Structure WAVEHDR\n        Public lpData As Integer\n        Public dwBufferLength As Integer\n        Public dwBytesRecorded As Integer\n        Public dwUser As Integer\n        Public dwFlags As Integer\n        Public dwLoops As Integer\n        Public lpNext As Integer\n        Public Reserved As Integer\n    End Structure\n\n    &lt;StructLayout(LayoutKind.Sequential)&gt; _\n    Private Structure WAVEFORMATEX\n        Public wFormatTag As Int16\n        Public nChannels As Int16\n        Public nSamplesPerSec As Int32\n        Public nAvgBytesPerSec As Int32\n        Public nBlockAlign As Int16\n        Public wBitsPerSample As Int16\n        Public cbSize As Int16\n    End Structure\n\n    Public Const CALLBACK_WINDOW As UInteger = &amp;H10000\n\n    Private Declare Function waveOutGetNumDevs Lib &quot;winmm.dll&quot; () As UInteger\n    Private Declare Function waveOutOpen Lib &quot;winmm.dll&quot; (ByRef lphWaveOut As Int32, ByVal uDeviceID As Int32, ByRef lpFormat As WAVEFORMATEX, ByVal dwCallback As waveOutProc, ByVal dwInstance As Int32, ByVal dwFlags As Int32) As Int32\n    Private Declare Function waveOutClose Lib &quot;winmm.dll&quot; (ByVal hWaveOut As Int32) As Int32\n    Private Declare Function waveOutPrepareHeader Lib &quot;winmm.dll&quot; (ByVal hWaveOut As Int32, ByRef lpWaveOutHdr As IntPtr, ByVal uSize As Int32) As Int32\n    Private Declare Function waveOutUnprepareHeader Lib &quot;winmm.dll&quot; (ByVal hWaveOut As Int32, ByRef lpWaveOutHdr As IntPtr, ByVal uSize As Int32) As Int32\n    Private Declare Function waveOutWrite Lib &quot;winmm.dll&quot; (ByVal hWaveOut As Int32, ByRef lpWaveOutHdr As IntPtr, ByVal uSize As Int32) As Int32\n    Private Delegate Sub waveOutProc(ByVal hwo As IntPtr, ByVal uMsg As Integer, ByVal dwInstance As IntPtr, ByVal dwParam1 As IntPtr, ByVal dwParam2 As IntPtr)\n\n\n    Dim hWaveOut As IntPtr = 0\n    Private callback As waveOutProc\n\n    Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load\n        Dim Song As Stream = My.Resources.AiR___Waves_Complete_VST_RTAS_TDM_7_1_1_6_installer\n\n        'FormatDataLength lesen.\n        Song.Seek(16, SeekOrigin.Begin)\n        Dim FormatDataLength As Integer = Song.ReadByte '16 or 17 or 18 Bytes Sized FormatDataBlock. =&gt; Benötigt für Bytes Luft.\n        FormatDataLength += Song.ReadByte * 256\n        FormatDataLength += Song.ReadByte * 256 * 256\n        FormatDataLength += Song.ReadByte * 256 * 256 * 256\n\n        'FormatType lesen.\n        Song.Seek(20, SeekOrigin.Begin)\n        Dim FormatType As Short = Song.ReadByte '1 = PCM.\n        FormatType += Song.ReadByte * 256\n\n        'Channels lesen.\n        Song.Seek(22, SeekOrigin.Begin)\n        Dim Channels As Short = Song.ReadByte '2 Channels.\n        Channels += Song.ReadByte * 256\n\n        'SampleRate lesen.\n        Song.Seek(24, SeekOrigin.Begin)\n        Dim SampleRate As Integer = Song.ReadByte '44100 Hz.\n        SampleRate += Song.ReadByte * 256\n        SampleRate += Song.ReadByte * 256 * 256\n        SampleRate += Song.ReadByte * 256 * 256 * 256\n\n        'Bytes / Second lesen.\n        Song.Seek(28, SeekOrigin.Begin)\n        Dim BytesPerSecond As Integer = Song.ReadByte '176400 Bytes/s.\n        BytesPerSecond += Song.ReadByte * 256\n        BytesPerSecond += Song.ReadByte * 256 * 256\n        BytesPerSecond += Song.ReadByte * 256 * 256 * 256\n\n        'Bytes / Sample lesen.\n        Song.Seek(32, SeekOrigin.Begin)\n        Dim BytesPerSample As Short = Song.ReadByte '4 Bytes/Sample.\n        BytesPerSample += Song.ReadByte * 256\n\n        'Bits / Sample lesen.\n        Song.Seek(34, SeekOrigin.Begin)\n        Dim BitsPerSample As Short = Song.ReadByte '16 Bits/Sample.\n        BitsPerSample += Song.ReadByte * 256\n\n        'DataSize und DataBeginOffset lesen.\n        Dim DataSize As Integer = 0\n        Dim DataOffset As Byte = 0\n        If 18 - FormatDataLength = 2 Then '0 Bytes Luft.\n\n            'DataSize auslesen.\n            Song.Seek(40, SeekOrigin.Begin)\n\n            'Ab Offset 44 ist alles Data innerhalb der Datasize.\n            DataOffset = 44\n\n        ElseIf 18 - FormatDataLength = 1 Then '1 Byte Luft.\n\n            'DataSize auslesen.\n            Song.Seek(41, SeekOrigin.Begin)\n\n            'Ab Offset 45 ist alles Data innerhalb der Datasize.\n            DataOffset = 45\n\n        ElseIf 18 - FormatDataLength = 0 Then '2 Byte Luft.\n\n            'DataSize auslesen.\n            Song.Seek(42, SeekOrigin.Begin)\n\n            'Ab Offset 46 ist alles Data innerhalb der Datasize.\n            DataOffset = 46\n\n        End If\n\n        DataSize += Song.ReadByte\n        DataSize += Song.ReadByte * 256\n        DataSize += Song.ReadByte * 256 * 256\n        DataSize += Song.ReadByte * 256 * 256 * 256\n\n\n        Dim wfx As New WAVEFORMATEX\n        With wfx\n            .wFormatTag = FormatType\n            .nChannels = Channels\n            .nSamplesPerSec = SampleRate\n            .nAvgBytesPerSec = BytesPerSecond\n            .nBlockAlign = BytesPerSample\n            .wBitsPerSample = BitsPerSample\n            .cbSize = 0\n        End With\n\n        waveOutOpen(hWaveOut, -1, wfx, callback, CType(0, IntPtr), 196608 Or 8)\n        Dim bufferData(DataSize - 1) As Byte\n        For i = 0 To DataSize - 1\n            bufferData(i) = Song.ReadByte\n        Next\n\n        Dim dataHandle As GCHandle = GCHandle.Alloc(bufferData, GCHandleType.Pinned)\n        Dim wavHeader As New WAVEHDR\n        With wavHeader\n            .dwBufferLength = 44100 * Channels * ((BitsPerSample + 7) / 8)\n            .dwFlags = 0\n            .lpData = dataHandle.AddrOfPinnedObject\n            .dwBytesRecorded = 0\n            .dwUser = IntPtr.Zero\n            .dwLoops = 0\n            .lpNext = IntPtr.Zero\n            .Reserved = 0\n        End With\n        Dim headerHandle As GCHandle = GCHandle.Alloc(wavHeader, GCHandleType.Pinned)\n\n        MsgBox(waveOutPrepareHeader(hWaveOut, headerHandle.AddrOfPinnedObject(), Len(wavHeader)))\n        MsgBox(waveOutWrite(hWaveOut, headerHandle.AddrOfPinnedObject, Len(wavHeader)))\n\n    End Sub\n\nEnd Class</code></pre>\n\nUnfortunately, the messageboxes return the code &quot;INVALPARAM = 11&quot;, Invalid parameter passed. Can you help me to fix this?\r<br />\n<br />\nBest regards,\r<br />\n<br />\nFreefall<br />\n",
    "PostedDate": "2014-04-22T16:22:01.213-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]