[
  {
    "Id": "1350327",
    "ThreadId": "579826",
    "Html": "Hello! I read the article posted on Coding4Fun where someone created a Skype-voicechanger and had an idea to loop my audio through skype, since I and my friends always have to put our microphones near headphones to make them hear funny songs etc that we share.. Anyway.. <br />\n<br />\nI thought that the best method would be to use the WasapiLoopbackCapture and write the buffer to a networkstream (like the article sort of did), but when I'm in a call and call start recording and change the output-device to a port. All my friends can hear is really loud whitenoise which doesn't seem to have any correlation to the audio I'm hearing in my headphones (ie the noise doesn't stop when I mute my volume etc). <br />\n<br />\nWhat is it that I'm doing wrong here? Is there some kind of conversion in bitrates I have to do? I'm really new to audio and DSP so I'm not sure what to do.<br />\n<br />\nHere is the class I created. I call loopSystemAudio to start recording and initializing the network sockets. <br />\n<br />\nclass Interceptor<br />\n<pre><code>{\n    #region fields\n    public TCallStatus currentCallStatus = TCallStatus.clsUnknown;\n    public delegate void OnStatusChanged(object sender, TCallStatus oldStatus, TCallStatus newStatus);\n    public event OnStatusChanged OnCallStatusChanged;\n\n    public NAudio.Wave.WasapiLoopbackCapture capture;\n    #endregion\n\n    private const int micInPort = 667;\n    private const int micOutPort = 668;\n    private const int Protocol = 8;\n    private Skype skype;\n    private Call currentCall;\n\n\n    NAudio.CoreAudioApi.MMDevice device;\n\n    private NetworkStream outputDeviceStream;\n    TcpServer outputDeviceServer;\n\n    #region Public Methods\n    public void loopSystemAudio()\n    {\n\n\n        outputDeviceServer = new TcpServer(micOutPort);\n        outputDeviceServer.Connect += outputDeviceServer_Connect;\n        outputDeviceServer.Disconnect += outputDeviceServer_Disconnect;\n        outputDeviceServer.DataReceived += outputDeviceServer_DataReceived;\n\n        capture.StartRecording();\n\n        currentCall.InputDevice[TCallIoDeviceType.callIoDeviceTypePort] = micOutPort.ToString();\n        currentCall.set_InputDevice(TCallIoDeviceType.callIoDeviceTypePort, micOutPort.ToString());\n    }\n\n    public void loopSkypeAudio(bool includeUserMic)\n    {\n\n    }\n\n    #endregion\n\n\n    #region Constructors\n    public Interceptor()\n    {\n        skype = new Skype();\n        skype.Attach(Protocol, false);\n        _ISkypeEvents_Event events = (_ISkypeEvents_Event)skype;\n        events.AttachmentStatus += events_AttachmentStatus;\n        skype.CallStatus += skype_CallStatus;\n\n\n        device = NAudio.Wave.WasapiLoopbackCapture.GetDefaultLoopbackCaptureDevice();\n        capture = new WasapiLoopbackCapture(device);\n        capture.ShareMode = NAudio.CoreAudioApi.AudioClientShareMode.Shared;\n        capture.DataAvailable += capture_DataAvailable;\n        capture.RecordingStopped += capture_RecordingStopped;\n    }\n    #endregion\n\n    #region Private Methods\n    void capture_RecordingStopped(object sender, StoppedEventArgs e)\n    {\n        Debug.WriteLine(&quot;Recording Stopped&quot;);\n    }\n\n    void capture_DataAvailable(object sender, WaveInEventArgs e)\n    {\n        outputDeviceStream.Write(e.Buffer, 0, e.BytesRecorded);\n    }\n\n    void outputDeviceServer_DataReceived(object sender, DataReceivedEventArgs e)\n    {\n        Debug.WriteLine(e.Buffer.Length.ToString());\n    }\n\n    void outputDeviceServer_Disconnect(object sender, EventArgs e)\n    {\n        Debug.WriteLine(&quot;OutputDeviceServer Disconnected&quot;);\n    }\n\n    void outputDeviceServer_Connect(object sender, ConnectedEventArgs e)\n    {\n        Debug.WriteLine(&quot;OutputDeviceServer Connected&quot;);\n        outputDeviceStream = e.Stream;\n\n\n    }\n    void skype_CallStatus(Call pCall, TCallStatus Status)\n    {\n        currentCall = pCall;\n    }\n\n    void events_AttachmentStatus(TAttachmentStatus Status)\n    {\n        //throw new NotImplementedException();\n    }\n    #endregion\n}\nclass SkypeBufferStream : WaveStream\n{\n    byte[] latestInBuffer;\n    WaveFormat waveFormat;\n\n    public SkypeBufferStream(int sampleRate)\n    {\n        waveFormat = new WaveFormat(sampleRate, 16, 2);\n    }\n\n    public override WaveFormat WaveFormat\n    {\n        get { return waveFormat; }\n    }\n\n    public override long Length\n    {\n        get { return 0; }\n    }\n\n    public override long Position\n    {\n        get\n        {\n            return 0;\n        }\n        set\n        {\n            throw new NotImplementedException();\n        }\n    }\n\n    public void SetLatestInBuffer(byte[] buffer)\n    {\n        latestInBuffer = buffer;\n    }\n\n    public override int Read(byte[] buffer, int offset, int count)\n    {\n        if (offset != 0)\n            throw new ArgumentOutOfRangeException(&quot;offset&quot;);\n        if (buffer != latestInBuffer)\n            Array.Copy(latestInBuffer, buffer, count);\n        return count;\n    }\n}\nclass TcpServer : IDisposable\n{\n    TcpListener listener;\n    public event EventHandler&lt;ConnectedEventArgs&gt; Connect;\n    public event EventHandler Disconnect;\n    public event EventHandler&lt;DataReceivedEventArgs&gt; DataReceived;\n\n    public TcpServer(int port)\n    {\n        listener = new TcpListener(IPAddress.Loopback, port);\n        listener.Start();\n        ThreadPool.QueueUserWorkItem(Listen);\n    }\n\n    private void Listen(object state)\n    {\n        while (true)\n        {\n            using (TcpClient client = listener.AcceptTcpClient())\n            {\n                AcceptClient(client);\n            }\n        }\n    }\n\n    private void AcceptClient(TcpClient client)\n    {\n        using (NetworkStream inStream = client.GetStream())\n        {\n            OnConnect(inStream);\n            while (client.Connected)\n            {\n                int available = client.Available;\n                if (available &gt; 0)\n                {\n                    byte[] buffer = new byte[available];\n                    int read = inStream.Read(buffer, 0, available);\n                    Debug.Assert(read == available);\n                    OnDataReceived(buffer);\n                }\n                else\n                {\n                    Thread.Sleep(50);\n                }\n            }\n        }\n        OnDisconnect();\n    }\n\n    private void OnConnect(NetworkStream stream)\n    {\n        var connect = Connect;\n        if (connect != null)\n        {\n            connect(this, new ConnectedEventArgs() { Stream = stream });\n        }\n    }\n\n    private void OnDisconnect()\n    {\n        var disconnect = Disconnect;\n        if (disconnect != null)\n        {\n            disconnect(this, EventArgs.Empty);\n        }\n    }\n\n    private void OnDataReceived(byte[] buffer)\n    {\n        var execute = DataReceived;\n        if (execute != null)\n        {\n            execute(this, new DataReceivedEventArgs() { Buffer = buffer });\n        }\n    }\n\n    #region IDisposable Members\n\n    public void Dispose()\n    {\n        listener.Stop();\n    }\n\n    #endregion\n}\npublic class DataReceivedEventArgs : EventArgs\n{\n    public byte[] Buffer { get; set; }\n}\n\npublic class ConnectedEventArgs : EventArgs\n{\n    public NetworkStream Stream { get; set; }\n}\n</code></pre>\n\nIf there is anything more you need to know, feel free to ask me here =)<br />\n<br />\nThank you guys, and excuse my english(!)<br />\n",
    "PostedDate": "2015-02-09T09:44:47.283-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1351926",
    "ThreadId": "579826",
    "Html": "hi there, I was the author of that Coding4Fun article. The first thing you need to know is that Skype deals with mono, 16bit PCM audio at 16kHz, whereas the audio you are capturing with WASAPI will likely be 44.1kHz IEEE floating point and stereo. So you are going to need to go through a multi-step conversion process to do that. Have a read of my article on <a href=\"http://www.codeproject.com/Articles/501521/How-to-convert-between-most-audio-formats-in-NET\" rel=\"nofollow\">converting audio between different formats</a> to learn how to do this.\r<br />\n<br />\nMark<br />\n",
    "PostedDate": "2015-02-12T12:39:03.163-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]