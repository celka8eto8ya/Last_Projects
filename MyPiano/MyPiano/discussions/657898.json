[
  {
    "Id": "1483507",
    "ThreadId": "657898",
    "Html": "Hello,\r<br />\nI'm new to NAudio. I try to learn to program with NAudio. I found a demo to produce a sine wave tune at here: <a href=\"https://mark-dot-net.blogspot.de/2009/10/playback-of-sine-wave-in-naudio.html\" rel=\"nofollow\">TEXT</a>. I create a project in VS2015 and put the demo in and the code was working fine.\r<br />\n<br />\nIn the example, there is a method StartStopSineWave() and in it (in short)\r<br />\nvar sineWaveProvider = new SineWaveProvider32();\r<br />\nsineWaveProvider.SetWaveFormat(48000, 2);  // Parameters are (int SampleRate, int channels)\r<br />\n<br />\nThis is working. But !? when I give the values for CD stereo, 2 channels as\r<br />\nsineWaveProvider.SetWaveFormat(44100, 2);\r<br />\n<br />\nan exception occurs later on at the Init() method:<br />\n<pre><code>            sineWaveProvider.Frequency = 432;\n            sineWaveProvider.Amplitude = 0.25f;\n\n            waveOut = new WaveOut();\n            waveOut.Init(sineWaveProvider);    //ERROR</code></pre>\n\n==&gt; \r<br />\n// ERROR: 44,1 kHz, 2 channels stereo CD \r<br />\n// -&gt; Exception: <strong>NAudio.MmException</strong> &quot;<strong>UnspecifiedError calling waveOutOpen</strong>&quot;\r<br />\n<br />\nwith sineWaveProvider.SetWaveFormat(44101, 2) and other values for the SampleRate there are no problems.\r<br />\n<br />\nCan anyone help me what this is, and what to do to fix this?\r<br />\n<br />\nOr how can I debug into the NAudio.dll; means how do I get the source code for NAudio.dll into the Studio so I can debug thorough it by myself?\r<br />\n<br />\nHarald<br />\n",
    "PostedDate": "2016-09-12T11:22:49.573-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1483940",
    "ThreadId": "657898",
    "Html": "It's quite unusual to find a soundcard that doesn't let you play 44.1kHz but this error is coming from your soundcard driver. Have you tried with different soundcards?\r<br />\n<br />\nYou can debug into NAudio DLL by getting the latest code from <a href=\"https://github.com/naudio/NAudio/\" rel=\"nofollow\">GitHub</a>, building locally and referencing that dll.<br />\n",
    "PostedDate": "2016-09-17T07:11:08.65-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1484760",
    "ThreadId": "657898",
    "Html": "Hello Mark <br />\nthank You for your answer. Sorry for the late response - its a hobby project of mine. In between I have figured out some interesting things:<br />\nFirst: I tried a different PC with an other soundcard. Yes - there are not the problem - no crash.<br />\nSecond: Debugging. I had ask because I suspect some *.pdb files or symbol files like for the .Net-Framework who would can be downloaded. So know I fetch the sources for NAudio and build a debug DLL. I figured out what happens and like to give you some information about (sorry about the long text - I do not found how I can append some files here). I do this 2 times, one with 44100 (error) and one with 48000 (no error)<br />\n<br />\n44100 (error) <br />\nIn debug I stopped at &quot;result = callbackInfo.WaveOutOpen(out hWaveOut, DeviceNumber, waveStream.WaveFormat, callback);&quot; in NAudio<br />\nthe Watch-Window  for waveStream.WaveFormat<br />\n<pre><code>+       hWaveOut    {0} System.IntPtr\n        DeviceNumber    0   int\n-       waveStream.WaveFormat   {IeeeFloat} NAudio.Wave.WaveFormat\n        AverageBytesPerSecond   352800  int\n        BitsPerSample   32  int\n        BlockAlign  8   int\n        Channels    2   int\n        Encoding    IeeeFloat   NAudio.Wave.WaveFormatEncoding\n        ExtraSize   0   int\n        SampleRate  44100   int\n        averageBytesPerSecond   352800  int\n        bitsPerSample   32  short\n        blockAlign  8   short\n        channels    2   short\n        extraSize   0   short\n        sampleRate  44100   int\n        waveFormatTag   IeeeFloat   NAudio.Wave.WaveFormatEncoding\n+       callback    {Method = {Void Callback(IntPtr, WaveMessage, IntPtr, NAudio.Wave.WaveHeader, IntPtr)}} NAudio.Wave.WaveInterop.WaveCallback</code></pre>\n\nnext: &quot;result = WaveInterop.waveOutOpenWindow(out waveOutHandle, (IntPtr)deviceNumber, waveFormat, this.Handle, IntPtr.Zero, WaveInterop.WaveInOutOpenFlags.CallbackWindow);&quot;<br />\n<br />\nin the the Watch-Window<br />\n<pre><code>\n+       waveOutHandle   {0} System.IntPtr\n+       (IntPtr)deviceNumber    {0} System.IntPtr\n+       waveFormat  {IeeeFloat} NAudio.Wave.WaveFormat\n+       this.Handle {722242}    System.IntPtr\n+       IntPtr.Zero {0} System.IntPtr\n        WaveInterop.WaveInOutOpenFlags.CallbackWindow   CallbackWindow  NAudio.Wave.WaveInterop.WaveInOutOpenFlags</code></pre>\n\nand<br />\n<pre><code>-       waveFormat  {IeeeFloat} NAudio.Wave.WaveFormat\n        AverageBytesPerSecond   352800  int\n        BitsPerSample   32  int\n        BlockAlign  8   int\n        Channels    2   int\n        Encoding    IeeeFloat   NAudio.Wave.WaveFormatEncoding\n        ExtraSize   0   int\n        SampleRate  44100   int\n        averageBytesPerSecond   352800  int\n        bitsPerSample   32  short\n        blockAlign  8   short\n        channels    2   short\n        extraSize   0   short\n        sampleRate  44100   int\n        waveFormatTag   IeeeFloat   NAudio.Wave.WaveFormatEncoding</code></pre>\n\n<strong>The error comes form here:</strong><br />\n<br />\nWaveOut.cs<br />\nrow-84:  result = WaveInterop.waveOutOpenWindow(out waveOutHandle, (IntPtr)deviceNumber, waveFormat, this.Handle, IntPtr.Zero, WaveInterop.WaveInOutOpenFlags.CallbackWindow);<br />\n<br />\n&quot;result = UnspecifiedError&quot;<br />\n<h2>because: out waveOutHandle get no Handle means: waveOutHandle == 0;</h2>\n48000 (no error)<br />\nIn debug I stopped at &quot;result = callbackInfo.WaveOutOpen(out hWaveOut, DeviceNumber, waveStream.WaveFormat, callback);&quot; in NAudio<br />\nthe Watch-Window  for waveStream.WaveFormat  (HL means - has changed)<br />\n<pre><code>+       hWaveOut    {0} System.IntPtr\n        DeviceNumber    0   int\n-       waveStream.WaveFormat   {IeeeFloat} NAudio.Wave.WaveFormat\nHL      AverageBytesPerSecond   384000  int\n        BitsPerSample   32  int\n        BlockAlign  8   int\n        Channels    2   int\n        Encoding    IeeeFloat   NAudio.Wave.WaveFormatEncoding\n        ExtraSize   0   int\nHL      SampleRate  48000   int\nHL      averageBytesPerSecond   384000  int\n        bitsPerSample   32  short\n        blockAlign  8   short\n        channels    2   short\n        extraSize   0   short\nHL      sampleRate  48000   int\n        waveFormatTag   IeeeFloat   NAudio.Wave.WaveFormatEncoding\n+       callback    {Method = {Void Callback(IntPtr, WaveMessage, IntPtr, NAudio.Wave.WaveHeader, IntPtr)}} NAudio.Wave.WaveInterop.WaveCallback</code></pre>\n\nnext: &quot;result = WaveInterop.waveOutOpenWindow(out waveOutHandle, (IntPtr)deviceNumber, waveFormat, this.Handle, IntPtr.Zero, WaveInterop.WaveInOutOpenFlags.CallbackWindow);&quot;<br />\n<br />\nin the the Watch-Window<br />\n<pre><code>+       waveOutHandle   {0} System.IntPtr\n+       (IntPtr)deviceNumber    {0} System.IntPtr\n+       waveFormat  {IeeeFloat} NAudio.Wave.WaveFormat\nHL +        this.Handle {329090}    System.IntPtr\n+       IntPtr.Zero {0} System.IntPtr\n        WaveInterop.WaveInOutOpenFlags.CallbackWindow   CallbackWindow  NAudio.Wave.WaveInterop.WaveInOutOpenFlags</code></pre>\n\nand<br />\n<pre><code>-       waveFormat  {IeeeFloat} NAudio.Wave.WaveFormat\nHL      AverageBytesPerSecond   384000  int\n        BitsPerSample   32  int\n        BlockAlign  8   int\n        Channels    2   int\n        Encoding    IeeeFloat   NAudio.Wave.WaveFormatEncoding\n        ExtraSize   0   int\nHL      SampleRate  48000   int\nHL      averageBytesPerSecond   384000  int\n        bitsPerSample   32  short\n        blockAlign  8   short\n        channels    2   short\n        extraSize   0   short\n        sampleRate  48000   int\n        waveFormatTag   IeeeFloat   NAudio.Wave.WaveFormatEncoding</code></pre>\n\nWaveOut.cs<br />\nrow-84:  result = WaveInterop.waveOutOpenWindow(out waveOutHandle, (IntPtr)deviceNumber, waveFormat, this.Handle, IntPtr.Zero, WaveInterop.WaveInOutOpenFlags.CallbackWindow);<br />\nresult = NoError<br />\n<ul>\n<li>\nwaveOutHandle\t{17556744}\tSystem.IntPtr<br />\n</li>\n</ul>\nWaveCallbackInfo.cs<br />\nrow-123: callbackInfo.WaveOutOpen(out hWaveOut, DeviceNumber, waveStream.WaveFormat, callback);<br />\nhWaveOut = {17556744}<br />\n<br />\nnext (just to comlete debug analyse  &quot;=&gt;&quot; <em>is &quot;it follows that&quot; no Lambda</em>):<br />\n<pre><code>+       buffers {NAudio.Wave.WaveOutBuffer[2]}  NAudio.Wave.WaveOutBuffer[]\n\nin MyForm:\n waveOut.Play();\n \n    Play() \n    playbackState == PlaybackState.Stopped //true\n    playbackState //get state Playing\n    EnqueueBuffers();\n        buffers[n].OnDone()  //tune (short because if debug step)\n\n            internal bool OnDone()\n            bytes = waveStream.Read(buffer, 0, buffer.Length);\n                buffer        = {byte[57600]}\n                buffer.Length = 57600\n            //then  \n            for (int n = bytes; n &lt; buffer.Length; n++)\n                {\n                    buffer[n] = 0;\n                    }\n                    \n                    WriteToWaveOut();\n\n                private void WriteToWaveOut()\n            {\n                MmResult result;\n\n                lock (waveOutLock)\n                {\n                result = WaveInterop.waveOutWrite(hWaveOut, header, Marshal.SizeOf(header));\n                }\n                if (result != MmResult.NoError)\n                {\n                throw new MmException(result, &quot;waveOutWrite&quot;);\n                }\n\n                GC.KeepAlive(this);\n            }                       \n                    \n                    \n                    result = WaveInterop.waveOutWrite(hWaveOut, header, Marshal.SizeOf(header));\n                    =&gt; tune                 </code></pre>\n\nmore in next answer...<br />\n",
    "PostedDate": "2016-09-27T04:24:54.087-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1484763",
    "ThreadId": "657898",
    "Html": "Hello mark,\r<br />\nin a second step I find out more. It doesn't depends only on the frequency of 44.100 khz. \r<br />\nI have the audio driver: Realtek Semiconductor Corp. (Vers 6.0.1.7885) from 19.07.2016\r<br />\n<br />\nThe error depends on what I defined in the Windows dialog &quot;Realtek HD Audio Mananger&quot; from &quot;Realtek High Definition Audio&quot; in the tab &quot;Standardformat&quot;:<br />\n<pre><code>if I define there 24 bits / 48.000 (studio sound)  -&gt; error in  NAudio when set .SetWaveFormat(48000, 2); \nif I define there 16 bits / 48.000 (DVD sound)     -&gt; error in  NAudio when set .SetWaveFormat(48000, 2); \nif I define there 24 bits / 44.100 (studio sound)  -&gt; error in  NAudio when set .SetWaveFormat(44100, 2); \nif I define there 16 bits / 44.100 (CD sound)       -&gt; error in  NAudio when set .SetWaveFormat(44100, 2); </code></pre>\n\nFor every frequency which is setting to &quot;Standardformat&quot; for the audio card in NAudio &quot;waveOutHandle&quot;  get &quot;0&quot;, means get no handle. And then NAudio crashes.\r<br />\n<br />\n<strong>Is there a way we can fix this?</strong>\r<br />\n<br />\nMay be there is a step left in the code that, with other words, the code should has &quot;asked&quot;: &quot;hello audio card - if you blocked for that frequency? - yes! then give it free - and then try to get the handle to it? - other give the handle without freeing it. \r<br />\n<br />\nBut I don't now how to do that. It should be done elsewhere in NAudio code.\r<br />\nMaybe anything must be done in the unmanaged code, what is calling from C# - yet, I haven't understand der NAudio code very much.\r<br />\n<br />\nOr have you a other idea for a workaround? It would be bad if anyone have a Realtek soundcard and use the same settings as I do in my program and it will crashed every time.<br />\n",
    "PostedDate": "2016-09-27T04:40:45.11-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1484768",
    "ThreadId": "657898",
    "Html": "Maybe its IEEE float that's causing the issue. You could try opening at 16 bit.\r<br />\n<br />\nIf the soundcard is really blocking a particular frequency, then you'd have to insert a resampler into your pipeline. NAudio has a DMO based resampler you could try.<br />\n",
    "PostedDate": "2016-09-27T05:39:53.23-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1485027",
    "ThreadId": "657898",
    "Html": "<strong>markheath wrote:</strong><br />\n<blockquote>\nMaybe its IEEE float that's causing the issue. You could try opening at 16 bit.<br />\n</blockquote>\nI have tested it with:<br />\n<pre><code>public void SetWaveFormat(int sampleRate, int channels)\n        {\n            //WaveFromat von NAudio\n            //Create an new IEEE floating point wave format\n            //this.waveFormat = WaveFormat.CreateIeeeFloatWaveFormat(sampleRate, channels);\n            this.waveFormat = WaveFormat.CreateCustomFormat(WaveFormatEncoding.IeeeFloat, sampleRate, channels, 384000, 8, 16);\n        }</code></pre>\n\nwas that right?\r<br />\nbut, the error is also there, also with bitsPerSample = 16 then 32<br />\n<blockquote>\nyou'd have to insert a resampler into your pipeline. NAudio has a DMO based resampler you could try.<br />\nHow can I do that? <br />\nIn which pipeline?<br />\nWhat is a DMO based resampler?<br />\n</blockquote>\nBackground: I just need to create one sine tune and change the frequency programmable. I had done this with DirectX SDK and a C# Audio example for that; a long time earlier. But know DirectX is included into the Microsoft operation system and Audio is now only programmable with C++ project not with a C# project. So I kook for a solution and came to NAudio.<br />\n",
    "PostedDate": "2016-09-30T09:40:47.947-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1485043",
    "ThreadId": "657898",
    "Html": "I find a workaround for the problem and a solution: using &quot;DirectSoundOut&quot;<br />\n<br />\nthe workaround is a bit stupid but works: I do a &quot;try and catch&quot; and when it crashes I caught the exception, add 1 to the frequency and call WaveOut.Intit() again:<br />\n<br />\nwhen button is clicked:<br />\n<pre><code>       private void btnSineWave_Click(object sender, EventArgs e)\n        {\n            //There are Audio devices?\n            int anzahlAudioDevices = DirectSoundOut.Devices.Count();\n            bool bDevice = (anzahlAudioDevices &gt; 0);\n            if (!bDevice)\n            {\n                MessageBox.Show(&quot;Kein Audiogerät gefunden!&quot;, \n                                this.Text, \n                                MessageBoxButtons.OK, \n                                MessageBoxIcon.Error\n                               );\n                return; //error: no device for playing any sound\n            }\n\n            //ok some found\n            StartStopSineWave1(440F);     //Play with DirectSoundOut\n            //StartStopSineWave2(440F);    //Play with WaveOut (Error possible)\n        }</code></pre>\n\nWorkaround for the WaveOut error:<br />\n<pre><code>        private void StartStopSineWave2(float frequency)\n        {\n            if (waveOut == null)\n            {\n                var sineWaveProvider = new SineWaveProvider32();\n                // SetWaveFormat(int SampleRate, int channels)\n\n                int channels = 2; //stereo, =1 ist mono\n\n                //int sampleRate = 16000; \n                int sampleRate = 44100;     //CD-Qualität\n                //int sampleRate = 48000;   //Studioqualität\n                //int sampleRate = 96000;   //Studioqualität\n                if (bNAudioUnspecifiedError) { ++sampleRate; }  //if error in NAudio SampleRate plus 1  - works then.\n\n                /* ERROR: when  sampleRate xx.nnnn kHz == standard-settings of the Realteak Soundcard, \n                        2 channels Stereo CD Qualität\n                 -&gt; Exception: NAudio.MmException &quot;UnspecifiedError calling waveOutOpen&quot;\n                 came from: \n                 result = WaveInterop.waveOutOpenWindow(out waveOutHandle, \n                                                        (IntPtr)deviceNumber, \n                                                        waveFormat, \n                                                        this.Handle, \n                                                        IntPtr.Zero, \n                                                        WaveInterop.WaveInOutOpenFlags.CallbackWindow\n                                                       );\n\n\n                waveOutHandle is &quot;0&quot; without the handle it crashed (only with Realteak-Audio driver)\n                C++ The waveOutOpen function opens the given waveform-audio output device for playback.\n                in NAudio [DllImport(&quot;winmm.dll&quot;)] and call of unamanged code: waveOutOpen(...)\n                */\n\n                sineWaveProvider.SetWaveFormat(sampleRate, channels);\n\n                sineWaveProvider.Frequency = frequency;\n                sineWaveProvider.Amplitude = 0.25f;\n\n                //WaveOut should be thought of as the default audio output device in NAudio\n                waveOut = new WaveOut();\n\n                // –1 indicates the default output device, while \n                // 0 is the first output device(usually the same)\n                waveOut.DeviceNumber = -1;\n                try\n                {\n                    waveOut.Init(sineWaveProvider);\n                    waveOut.Play();\n                }\n                catch (MmException mMExp)\n                {\n                    //if special Realtek-Audio-Card driver error occurse  (Workaround)\n                    if (mMExp.Result == MmResult.UnspecifiedError)\n                    {\n                        sampleRate += 1;\n                        sineWaveProvider.SetWaveFormat(sampleRate, channels);\n                        try\n                        {\n                            //nochmal - sollte jetzt gehen\n                            waveOut.Init(sineWaveProvider);\n                            waveOut.Play();\n\n                            //a flag to do not get into error every time so long the program is running\n                            bNAudioUnspecifiedError = true;\n                        }\n                        catch (Exception exp)\n                        {\n                            MessageBox.Show(&quot;Error: Audiodriver Standard-Einstellungen kollidieren...&quot;\n                                            + Environment.NewLine\n                                            + exp.Message.ToString()\n                                           );\n                        }\n                    }\n                    else\n                    {   //all other errors\n                        MessageBox.Show(&quot;Error in StartStopSineWave():&quot;\n                                        + Environment.NewLine\n                                        + mMExp.Message.ToString()\n                                       );\n                        throw;\n                    }\n                }\n            }//eof-if(...)\n            else\n            {\n                waveOut.Stop();\n\n                //If you need to play something else, you should Dispose \n                //of your output device and create a new one.\n                waveOut.Dispose();\n                waveOut = null;\n            }\n        }</code></pre>\n\nWith DirectSoundOut<br />\n<pre><code>      private void StartStopSineWave1(float frequency)\n        {\n            if (directSoundOut == null)\n            {\n                var sineWaveProvider = new SineWaveProvider32();\n\n                // Für SetWaveFormat(int SampleRate, int channels)\n                int channels = 2; //stereo, =1 ist mono\n\n                //int sampleRate = 16000; \n                int sampleRate = 44100;     //CD-Qualität\n                //int sampleRate = 48000;   //Studioqualität\n                //int sampleRate = 96000;   //Studioqualität\n\n                sineWaveProvider.SetWaveFormat(sampleRate, channels);\n\n                sineWaveProvider.Frequency = frequency;\n                sineWaveProvider.Amplitude = 0.25f;\n\n\n                directSoundOut = new DirectSoundOut(); //select default device\n\n                try \n                {\n                    directSoundOut.Init(sineWaveProvider); //init with source\n                    directSoundOut.Play();          //play tune\n                }\n                catch (Exception exp)\n                {   \n                    MessageBox.Show(&quot;Error in StartStopSineWave():&quot;\n                                    + Environment.NewLine\n                                    + exp.Message.ToString()\n                                   );\n                    throw;\n                }\n\n            }//eof-if(...)\n            else\n            {\n                directSoundOut.Stop();          //tune playing\n\n                //freeing, releasing, or resetting unmanaged resources.\n                directSoundOut.Dispose();       //GC may destroy later (releases the memory)\n                directSoundOut = null;           //so it needs to set 'null' for the selection \n            }\n        }</code></pre>\n\nI thing that could work for me - thanks a lot for your help! :) <br />\n",
    "PostedDate": "2016-09-30T12:36:11.44-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1485044",
    "ThreadId": "657898",
    "Html": "wow, that is weird, but glad you found something that works<br />\n",
    "PostedDate": "2016-09-30T12:49:06.12-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]