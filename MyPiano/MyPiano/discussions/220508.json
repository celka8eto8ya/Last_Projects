[
  {
    "Id": "470548",
    "ThreadId": "220508",
    "Html": "<p>Hey, I thought originally that stop would automatically rewind, however it doesnt seem to (is there a difference between paused and stopped?)</p>\r\n<p>Anyway ive got a simple audio interface:</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System;\r\n\r\n<span style=\"color:blue\">namespace</span> CoreAudio\r\n{\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">interface</span> IMusicPlayer : IDisposable\r\n    {\r\n        TimeSpan TotalTime { <span style=\"color:blue\">get</span>;}\r\n        TimeSpan CurrentTime { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n        <span style=\"color:blue\">long</span> Position { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n        <span style=\"color:blue\">long</span> Length { <span style=\"color:blue\">get</span>; }\r\n        <span style=\"color:blue\">bool</span> HasEnded { <span style=\"color:blue\">get</span>; }\r\n\r\n        <span style=\"color:blue\">float</span> Volume { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n        PlaybackState PlaybackState { <span style=\"color:blue\">get</span>; }\r\n\r\n        <span style=\"color:blue\">void</span> Play();\r\n        <span style=\"color:blue\">void</span> Pause();\r\n        <span style=\"color:blue\">void</span> Stop();\r\n        <span style=\"color:blue\">void</span> Rewind();\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Now I cant find any built in way to rewind so ive just looked at the various examples and just set the underlying streams position to 0 however it just cuts the audio and it gets shorter and shorter every time you do it, could anyone please tell me the &quot;official&quot; way to rewind an audio stream... here is my implementation for the class... hopefully you guys can tell me where im going wrong!</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System;\r\n<span style=\"color:blue\">using</span> System.IO;\r\n<span style=\"color:blue\">using</span> CoreAudio;\r\n<span style=\"color:blue\">using</span> NAudio.CoreAudioApi;\r\n<span style=\"color:blue\">using</span> NAudio.Wave;\r\n<span style=\"color:blue\">using</span> PlaybackState=CoreAudio.PlaybackState;\r\n\r\n<span style=\"color:blue\">namespace</span> Players.NAudio\r\n{\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> NAudioMusicPlayer : IMusicPlayer\r\n    {\r\n        <span style=\"color:blue\">protected</span> IWavePlayer m_WaveOut;\r\n        <span style=\"color:blue\">protected</span> BlockAlignReductionStream m_BlockAlignedStream;\r\n        <span style=\"color:blue\">protected</span> WaveStream m_MediaStream, m_ConvertedStream;\r\n        <span style=\"color:blue\">protected</span> WaveChannel32 m_Channel;\r\n        <span style=\"color:blue\">protected</span> WavePlayerType m_WavePlayerType;\r\n\r\n        <span style=\"color:blue\">public</span> TimeSpan TotalTime\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> m_BlockAlignedStream.TotalTime; }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> TimeSpan CurrentTime\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> m_BlockAlignedStream.CurrentTime; }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                <span style=\"color:blue\">if</span>(value &lt; TotalTime)\r\n                { m_BlockAlignedStream.CurrentTime = value; }   \r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">long</span> Position\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> m_BlockAlignedStream.Position; }\r\n            <span style=\"color:blue\">set</span> { m_BlockAlignedStream.Position = value; }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">long</span> Length\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> m_BlockAlignedStream.Length; }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> HasEnded\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (Position == Length); }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">float</span> Volume\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> m_Channel.Volume; }\r\n            <span style=\"color:blue\">set</span> { m_Channel.Volume = value; }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> PlaybackState PlaybackState\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> m_WaveOut.PlaybackState.ToCorePlaybackState(); }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Play()\r\n        {\r\n            <span style=\"color:blue\">if</span> (m_WaveOut.PlaybackState != global::NAudio.Wave.PlaybackState.Playing)\r\n            { m_WaveOut.Play(); }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Pause() { m_WaveOut.Pause(); }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Stop()\r\n        {\r\n            m_WaveOut.Stop();\r\n            Rewind();\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Rewind()\r\n        { m_BlockAlignedStream.Position = 0; }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Dispose()\r\n        {\r\n            <span style=\"color:blue\">if</span> (m_Channel != <span style=\"color:blue\">null</span>)\r\n            {\r\n                m_Channel.Dispose();\r\n                m_Channel = <span style=\"color:blue\">null</span>;\r\n            }\r\n\r\n            <span style=\"color:blue\">if</span> (m_MediaStream != <span style=\"color:blue\">null</span>)\r\n            { \r\n                m_MediaStream.Dispose();\r\n                m_MediaStream = <span style=\"color:blue\">null</span>;\r\n            }\r\n\r\n            <span style=\"color:blue\">if</span> (m_WaveOut != <span style=\"color:blue\">null</span>)\r\n            {\r\n                m_WaveOut.Stop();\r\n                m_WaveOut.Dispose();\r\n                m_WaveOut = <span style=\"color:blue\">null</span>;\r\n            }\r\n\r\n            <span style=\"color:blue\">if</span> (m_ConvertedStream != <span style=\"color:blue\">null</span>)\r\n            {\r\n                m_ConvertedStream.Dispose();\r\n                m_ConvertedStream = <span style=\"color:blue\">null</span>;\r\n            }\r\n\r\n            <span style=\"color:blue\">if</span> (m_BlockAlignedStream != <span style=\"color:blue\">null</span>)\r\n            {\r\n                m_BlockAlignedStream.Dispose();\r\n                m_BlockAlignedStream = <span style=\"color:blue\">null</span>;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> NAudioMusicPlayer(FileStream musicStream, WavePlayerType wavePlayerType)\r\n        {\r\n            m_WavePlayerType = wavePlayerType;\r\n            ProcessStream(musicStream);\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> ProcessStream(FileStream musicStream)\r\n        {\r\n            m_MediaStream = CreateMediaStream(musicStream);\r\n            m_ConvertedStream = WaveFormatConversionStream.CreatePcmStream(m_MediaStream);\r\n            m_BlockAlignedStream = <span style=\"color:blue\">new</span> BlockAlignReductionStream(m_ConvertedStream);\r\n            m_Channel = <span style=\"color:blue\">new</span> WaveChannel32(m_BlockAlignedStream);\r\n\r\n            m_WaveOut = CreateWavePlayer();\r\n            m_WaveOut.Init(m_Channel);\r\n\r\n            m_WaveOut.Volume = 1.0f;\r\n            m_Channel.Volume = Volume;\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> WaveStream CreateMediaStream(FileStream fileStream)\r\n        {\r\n            <span style=\"color:blue\">var</span> fileExtension = Path.GetExtension(fileStream.Name).ToLower();\r\n\r\n            <span style=\"color:blue\">switch</span> (fileExtension)\r\n            {\r\n                <span style=\"color:blue\">case</span> <span style=\"color:#a31515\">&quot;.mp3&quot;</span>: { <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> Mp3FileReader(fileStream.Name); }\r\n                <span style=\"color:blue\">case</span> <span style=\"color:#a31515\">&quot;.wav&quot;</span>: { <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> WaveFileReader(fileStream.Name); }\r\n                <span style=\"color:blue\">default</span>: { <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> Exception(<span style=\"color:#a31515\">&quot;Unsupported file&quot;</span>); }\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> IWavePlayer CreateWavePlayer()\r\n        {\r\n            <span style=\"color:blue\">switch</span>(m_WavePlayerType)\r\n            {\r\n                <span style=\"color:blue\">case</span> WavePlayerType.DirectSound: { <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> DirectSoundOut(300); }\r\n                <span style=\"color:blue\">case</span> WavePlayerType.WasApi: { <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> WasapiOut(AudioClientShareMode.Shared, <span style=\"color:blue\">false</span>, 300); }\r\n                <span style=\"color:blue\">default</span>: { <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> WaveOut(WaveCallbackInfo.FunctionCallback()); }\r\n            }\r\n        }\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>The input file could be Mp3 or Wav, so im not sure if the streams should really be different based on the type. Mp3's seem to require lots of conversions rather than Wav files. Help would be GREAT as i cant find much *solid* help anywhere else :(</p>\r\n<p>I wish MS would make an editor that works in other browsers, trying to embed the code was a nightmare...</p>",
    "PostedDate": "2010-07-21T12:27:52.777-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]