[
  {
    "Id": "1485207",
    "ThreadId": "658450",
    "Html": "Hello,\r<br />\n<br />\nI am fairly new to using NAudio and I'm currently trying to build a program, that can record for a few seconds after the microphone detects a sound level that exceeds a threshold I've set. \r<br />\n<br />\nCurrently, I'm checking the sound level (Root-mean squared) and writing to a WAV in the WaveIn EventHandler called source_DataAvailable and I have a flag called recordedFlag that is set to false. \r<br />\n<br />\nRight now there is an 'if' statement that checks if the flag is false and if it is then there will be another 'if' statement inside that checks the RMS. If it exceeds the RMS set, then it will write to a WaveFileWriter object then sets the flag to true. \r<br />\n<br />\nSince the EventHandler is constantly checking when the microphone is listening, the next time the 'if' statement checks the flag (it will be true), it will display a MessageBox and then dispose the WaveFileWriter, setting it to null and then changing the flag back to false, so the process can repeat.\r<br />\n<br />\nI'm currently facing a few problems:\r<br />\n<br />\n1) I can only get the 1 sound that exceeds the RMS (I know with the way I've set things up it only does this, but what I want to be able to write to a WAV for <strong>a few seconds</strong> instead of writing 1 byte that was recorded, when the threshold exceeds and I do not know how)\r<br />\n<br />\n2) I want the same WAV file to be overwritten with every successful recording, but I've noticed that there are 3 processor threads, so whenever I've written data to a WAV. There will be 3 different writes to the same waveWriter instance, causing the end WAV to be empty, due to the way I set up the flags<br />\n<pre><code>        private void btnRecordEverything_Click(object sender, EventArgs e)\n        {\n            // Checks to see if any device was selected\n            if (lvSource.SelectedItems.Count == 0) return;\n \n            // Obtain device number from the index of the first selected item\n            int deviceNumber = lvSource.SelectedItems[0].Index;\n \n            // Inititalise the source stream\n            sourceStream = new NAudio.Wave.WaveIn();\n            // Set the device number to the source stream\n            sourceStream.DeviceNumber = deviceNumber;\n            // Assign a wave format with the standard 44.1kHz and the device number's channel\n            sourceStream.WaveFormat = new NAudio.Wave.WaveFormat(44100, NAudio.Wave.WaveIn.GetCapabilities(deviceNumber).Channels);\n \n            // source stream will want a new event when there is data available  \n            sourceStream.DataAvailable += new EventHandler&lt;NAudio.Wave.WaveInEventArgs&gt;(source_DataAvailable);\n            // Inititalise WaveWriter\n            // Enter file location and make sure the format saved is the same as the source stream\n            waveWriter = new NAudio.Wave.WaveFileWriter(&quot;aaa.wav&quot;, sourceStream.WaveFormat);\n \n            sourceStream.StartRecording();\n        }\n \n        private bool recordedFlag = false;\n \n        private void source_DataAvailable(object sender, NAudio.Wave.WaveInEventArgs e)\n        {\n            // Checks if wave writer exists\n            if (waveWriter == null)\n            {\n                waveWriter = new NAudio.Wave.WaveFileWriter(&quot;aaa.wav&quot;, sourceStream.WaveFormat);\n            }\n \n            double rms = calculateDBinRMS(e);\n \n            string rmsFormatted = string.Format(&quot;{0:0.00}&quot;, rms); // Just formats the RMS value\n \n            int seconds = (int)(waveWriter.Length / waveWriter.WaveFormat.AverageBytesPerSecond); // Calculates the length of the WAV file\n \n            rbSoundLevel.AppendText(rmsFormatted + &quot;\\n&quot;); // Writes RMS to the rich text box\n \n            if (recordedFlag == false)\n            {\n                if (rms &gt; 800)\n                {\n                    // Write data to the waveWriter\n                    // Data is a byte array\n                    // Offset set to 0 to write the whole array of data\n                    // Count is the bytes recorded\n                    waveWriter.Write(e.Buffer, 0, e.BytesRecorded);\n \n                    // Ensure wave file is written by flushing the data out with each write\n                    // Prevent RAM from being held\n                    waveWriter.Flush();\n \n                    recordedFlag = true;\n                }\n                else\n                {\n                    MessageBox.Show(&quot;Record success!&quot;);\n                    waveWriter.Dispose();\n                    waveWriter = null;\n \n                    recordedFlag = false;\n                }\n            }\n        }</code></pre>\n\nHere's the code and a link to the <a href=\"http://pastebin.com/gD8GMVqq\" rel=\"nofollow\">pastebin code</a>\r<br />\n<br />\nIn short, I just want to get my program to start writing to a WAV <strong>for a few seconds</strong> when the mic picks up an audio level that exceeds the set threshold. <br />\n",
    "PostedDate": "2016-10-03T19:10:46.737-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1485249",
    "ThreadId": "658450",
    "Html": "you don't seem that far off. Have a flag saying whether you are currently recording or not. In data available - if the flag is not set, check the RMS and if it exceeds the threshold, then set the flag true.\r<br />\n<br />\nNow, if the flag is true, create the WaveFileWriter if it doesn't already exist and then write the data to the file. If the length of the file is greater than 3 seconds (or whatever) then dispose the wavefilewriter and set the flag back to false.<br />\n",
    "PostedDate": "2016-10-04T06:11:05.217-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1485308",
    "ThreadId": "658450",
    "Html": "Thanks Mark!! I was able to fix all the issues with the help of your solution :)<br />\n",
    "PostedDate": "2016-10-04T23:38:03.283-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]