[
  {
    "Id": "1427792",
    "ThreadId": "638847",
    "Html": "I'm working in a script based on the NAudio Demo script modified for streaming a Shoutcast inside my Unity game.\r<br />\n<br />\nI have tried to remove the original while loop using the update from the MonoBehvaiour class, I only get some noises but not music during the time I'm streaming with this script.\r<br />\n<br />\nI usually get an error while the execution related with the format<br />\n<blockquote>\nMmException: AcmNotPossible calling acmStreamConvert NAudio.MmException.Try (MmResult result, System.String function) NAudio.Wave.Compression.AcmStreamHeader.Convert (Int32 bytesToConvert, System.Int32&amp; sourceBytesConverted) NAudio.Wave.Compression.AcmStream.Convert (Int32 bytesToConvert, System.Int32&amp; sourceBytesConverted) NAudio.Wave.AcmMp3FrameDecompressor.DecompressFrame (NAudio.Wave.Mp3Frame frame, System.Byte[] dest, Int32 destOffset)<br />\n</blockquote>\nI have tried with different radios online, but I always get that error. I don't know what is happening... Any help?\r<br />\n<br />\n public class NAudioStreamer : MonoBehaviour {<br />\n<pre><code>private IWavePlayer mWaveOutDevice;\n\n\nprivate WaveStream  mMainOutputStream;\nprivate WaveChannel32 mVolumeStream;\nprivate VolumeWaveProvider16 volumeProvider;\n\n\n\nprivate string m_Url = &quot;http://37.59.32.115:8122/&quot;;\n\n\nenum StreamingPlaybackState\n{\n    Stopped,\n    Playing,\n    Buffering,\n    Paused\n}\n\nprivate volatile StreamingPlaybackState playbackState = StreamingPlaybackState.Stopped;\n\n\nprivate bool fullyDownloaded = false;\npublic bool m_Play = false;\nfloat timer;\n\nvoid Update()\n{\n    if (m_Play)\n    {\n        playbackState = StreamingPlaybackState.Buffering;\n        StreamMP3(m_Url);\n        m_Play = false;\n    }\n\n    switch (playbackState)\n    {\n        case StreamingPlaybackState.Buffering:\n        case StreamingPlaybackState.Playing:\n            StreamMP3(m_Url);\n            break;\n\n        default:        \n            break;\n    }\n\n}\n\nHttpWebRequest webRequest;\nBufferedWaveProvider bufferedWaveProvider = null;\nbyte[] buffer = new byte[16384 * 4];\n\n\nprivate void StreamMP3(string lUrl)\n{\n    this.fullyDownloaded = false;\n    webRequest = (HttpWebRequest)WebRequest.Create(lUrl);\n\n    int metaInt = 0; // blocksize of mp3 data\n\n    webRequest.Headers.Clear();\n    webRequest.Headers.Add(&quot;GET&quot;, &quot;/ HTTP/1.0&quot;);\n\n    webRequest.Headers.Add(&quot;Icy-MetaData&quot;, &quot;1&quot;);\n    webRequest.UserAgent = &quot;WinampMPEG/5.09&quot;;\n\n    HttpWebResponse resp = null;\n    try\n    {\n        resp = (HttpWebResponse)webRequest.GetResponse();\n    }\n    catch(WebException e)\n    {\n        if (e.Status != WebExceptionStatus.RequestCanceled)\n        {\n            Debug.LogError(e.Message);\n        }\n        return;\n    }\n     // needs to be big enough to hold a decompressed frame\n\n    try\n    {\n        // read blocksize to find metadata block\n        metaInt = Convert.ToInt32(resp.GetResponseHeader(&quot;icy-metaint&quot;));\n\n    }\n    catch\n    {\n    }\n\n    IMp3FrameDecompressor decompressor = null;\n\n    try\n    {\n        using (var responseStream = resp.GetResponseStream())\n        {\n\n            ReadFullyStream readFullyStream = new ReadFullyStream(responseStream);\n            //do\n            {\n                if (bufferedWaveProvider != null &amp;&amp; bufferedWaveProvider.BufferLength - bufferedWaveProvider.BufferedBytes &lt; bufferedWaveProvider.WaveFormat.AverageBytesPerSecond / 4)\n                {\n                    Debug.LogError(&quot;Buffer getting full, taking a break&quot;);\n                    Thread.Sleep(500);\n                }\n                else\n                {\n                    Mp3Frame frame = null;\n                    try\n                    {\n\n                        frame = Mp3Frame.LoadFromStream(readFullyStream, true);\n\n\n\n                    }\n                    catch (EndOfStreamException)\n                    {\n                        this.fullyDownloaded = true;\n                        Debug.LogError(&quot;reached the end of the MP3 file / stream&quot;);\n                        // reached the end of the MP3 file / stream</code></pre>\n\n//                          break;<br />\n<pre><code>                    }\n                    catch (WebException)\n                    {\n                        // probably we have aborted download from the GUI thread</code></pre>\n\n//                          break;<br />\n<pre><code>                    }\n                    if (decompressor == null &amp;&amp; frame != null)\n                    {\n                        // don't think these details matter too much - just help ACM select the right codec\n                        // however, the buffered provider doesn't know what sample rate it is working at\n                        // until we have a frame\n                        WaveFormat waveFormat = new Mp3WaveFormat(frame.SampleRate, frame.ChannelMode == ChannelMode.Mono ? 1 : 2, frame.FrameLength, frame.BitRate);\n                        decompressor = new AcmMp3FrameDecompressor(waveFormat);\n                        if(bufferedWaveProvider == null)\n                        {\n                            this.bufferedWaveProvider = new BufferedWaveProvider(decompressor.OutputFormat);\n                            this.bufferedWaveProvider.BufferDuration = TimeSpan.FromSeconds(20); // allow us to get well ahead of ourselves\n                        }\n\n                    }\n\n                    int decompressed =  decompressor.DecompressFrame(frame, buffer, 0);\n\n                    if(bufferedWaveProvider != null)\n                    {\n                        bufferedWaveProvider.AddSamples(buffer, 0, decompressed);\n\n                    }\n                }\n            } \n\n            if (this.mWaveOutDevice == null &amp;&amp; this.bufferedWaveProvider != null)\n            {\n                Debug.Log(&quot;Creating WaveOut Device&quot;);\n                this.mWaveOutDevice = new  WaveOut();\n                this.volumeProvider = new VolumeWaveProvider16(bufferedWaveProvider);\n                this.volumeProvider.Volume = 100.0f;\n                mWaveOutDevice.Init(volumeProvider);\n\n            }\n            else if (bufferedWaveProvider != null)\n            {\n                double bufferedSeconds = bufferedWaveProvider.BufferedDuration.TotalSeconds;\n                if(bufferedSeconds &gt; 0.2f &amp;&amp; playbackState == StreamingPlaybackState.Buffering)\n                {\n                    Debug.Log(&quot;PLaying music...&quot;);\n                    mWaveOutDevice.Play();\n                    playbackState = StreamingPlaybackState.Playing;\n                }\n\n            }\n        }\n    }\n    finally\n    {\n        if (decompressor != null)\n        {\n            decompressor.Dispose();\n        }\n    }\n}</code></pre>\n\n}<br />\n",
    "PostedDate": "2015-05-27T07:23:11.12-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]