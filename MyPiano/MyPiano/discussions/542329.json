[
  {
    "Id": "1234394",
    "ThreadId": "542329",
    "Html": "I am working on a simple WPF application that allows for multiple stereo sine wave sounds to be mixed together and played to the user.<br />\n\r<br />\nThe user is able to choose the amplitude, frequency, and channel of the sine waves in order to create different types of output.  Everything is working well except for when the user chooses floating point frequencies which are not whole numbers (ex 100.5), I hear an audible &quot;click&quot; sound occurring on a regular period in the sound output.  Everything sounds good for whole number frequencies.\r<br />\n<br />\nHere is the code used to generate the sine waves:<br />\n<pre><code>public class SineWaveProvider32 : WaveProvider32, INotifyPropertyChanged\n{\n        public enum EStereoChannel\n        {\n            ChannelLeft = 0,\n            ChannelRight,\n            ChannelBoth\n        };\n\n        int sample;\n\n        public SineWaveProvider32() :\n            base(44100, 2) // 44.1 kHz sample, stereo \n        {\n            Frequency = 1000.5;\n            Amplitude = 0.25f; // let's not hurt our ears   \n            ChannelMode = EStereoChannel.ChannelBoth;\n\n        }\n\n        private float freq;\n        public float Frequency\n        {\n            get\n            {\n                return freq;\n            }\n            set\n            {\n                if (freq != value)\n                {\n                    freq = value;\n                    OnPropertyChanged(&quot;Frequency&quot;);\n                }\n            }\n        }\n\n        private float amp;\n        public float Amplitude\n        {\n            get\n            {\n                return amp;\n            }\n            set\n            {\n                if (amp != value)\n                {\n                    amp = value;\n                    OnPropertyChanged(&quot;Amplitude&quot;);\n                }\n            }\n        }\n\n        private EStereoChannel channelMode;\n        public EStereoChannel ChannelMode\n        {\n            get\n            {\n                return channelMode;\n            }\n            set\n            {\n                if (channelMode != value)\n                {\n                    channelMode = value;\n                    OnPropertyChanged(&quot;ChannelMode&quot;);\n                }\n            }\n        }\n\n        public override int Read(float[] buffer, int offset, int sampleCount)\n        {\n            int sampleRate = WaveFormat.SampleRate;\n            float sound;\n            float chan1;\n            float chan2;\n            for (int n = 0; n &lt; sampleCount; n += 2)\n            {\n                sound = (float)(Amplitude * Math.Sin((2.0f * Math.PI * ((float)sample) * Frequency) / ((float)sampleRate)));\n                \n                switch (ChannelMode)\n                {\n                    \n                    case EStereoChannel.ChannelRight:\n                        chan1 = 0;\n                        chan2 = sound;\n                        break;\n                    case EStereoChannel.ChannelLeft:\n                        chan1 = sound;\n                        chan2 = 0;\n                        break;\n                    case EStereoChannel.ChannelBoth: // fall through\n                    default: // we default to mono\n                        chan1 = sound;\n                        chan2 = sound;\n                        break;\n                }\n\n                buffer[n + offset] = chan1;\n                buffer[n + offset + 1] = chan2;\n\n                sample++;\n                if (sample &gt;= sampleRate)\n                {\n                    sample = 0;\n                } \n            }\n            return sampleCount;\n        }</code></pre>\n\nAnd this is the code used to generate the WaveOut:<br />\n<pre><code>                mixer = new MixingWaveProvider32();\n\n                foreach (SineWaveProvider32 wav in WaveCollection)\n                {\n                    mixer.AddInputStream(wav);\n                }\n\n                waveOut = new WaveOut();\n                waveOut.Init(mixer);\n                waveOut.Play();\n                IsPlaying = true;\n                Seconds = 0;\n                timer.Start();</code></pre>\n\nAny idea where this clicking sound is coming from?<br />\n",
    "PostedDate": "2014-04-15T10:06:40.503-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1234485",
    "ThreadId": "542329",
    "Html": "because you're restarting the sin wave every second, which won't necessarily be a zero crossing point<br />\n",
    "PostedDate": "2014-04-15T14:06:15.813-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1234740",
    "ThreadId": "542329",
    "Html": "Thanks for pointing our my error.  I didn't fully understand the code previously.  Here's my fix if anyone is interested:<br />\n<pre><code>        int phaseAngle = 0;\n        int zeroes = 0;\n\n        public override int Read(float[] buffer, int offset, int sampleCount)\n        {\n            float sampleRate = (float)WaveFormat.SampleRate;\n            float sound;\n            float chan1;\n            float chan2;\n            for (int n = 0; n &lt; sampleCount; n += 2)\n            {\n                sound = (float)(Amplitude * Math.Sin((2 * Math.PI * phaseAngle * Frequency) / sampleRate));\n                phaseAngle++;\n\n                if (sound == 0)\n                {\n                    zeroes++;\n                }\n\n                switch (ChannelMode)\n                {\n                    case EStereoChannel.ChannelRight:\n                        chan1 = 0;\n                        chan2 = sound;\n                        break;\n                    case EStereoChannel.ChannelLeft:\n                        chan1 = sound;\n                        chan2 = 0;\n                        break;\n                    case EStereoChannel.ChannelBoth: // fall through\n                    default: // we default to mono\n                        chan1 = sound;\n                        chan2 = sound;\n                        break;\n                }\n\n                buffer[n + offset] = chan1;\n                buffer[n + offset + 1] = chan2;\n\n                // if we've completed 1 wave, reset phase and counters\n                if (zeroes == 3)\n                {\n                    zeroes = 1;\n                    phaseAngle = 1;\n                }\n                \n            }\n            return sampleCount;\n        }</code></pre>\n\n",
    "PostedDate": "2014-04-16T08:12:56.1-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]