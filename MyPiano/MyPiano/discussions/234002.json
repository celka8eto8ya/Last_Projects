[
  {
    "Id": "519275",
    "ThreadId": "234002",
    "Html": "\r\n<p>Hi,<br>\r\n&nbsp; while playing audio using NAudio library from a network stream, After playing the audio for about 1 minute i got the exception's in the line\r\n<br>\r\nwaveOut.Init(new WaveOutStream(AudioRxvdStream));<br>\r\nThe exceptions are either<br>\r\n<br>\r\n1.NAudio.MmException: MemoryAllocationError calling waveOutOpen <br>\r\n&nbsp;&nbsp; at NAudio.MmException.Try(MmResult result, String function)<br>\r\n&nbsp;&nbsp; at NAudio.Wave.WaveOut.Init(IWaveProvider waveProvider)<br>\r\n<br>\r\nor<br>\r\n<br>\r\n2.NAudio.MmException: AlreadyAllocated calling waveOutOpen<br>\r\n&nbsp;&nbsp; at NAudio.Wave.WaveOut.Init(IWaveProvider waveProvider)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n<br>\r\nMy code is</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">//For initialize thread</span>\r\n\r\nsocket_Audio = <span style=\"color:blue\">new</span> Socket(AddressFamily.InterNetworkV6, SocketType.Dgram, ProtocolType.Udp);\r\n\r\nmyAudioThread = <span style=\"color:blue\">new</span> Thread(<span style=\"color:blue\">new</span> ThreadStart(AudioListener));\r\n\r\nmyAudioThread.Start();\r\n\r\n//******<br><span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> AudioListener()\r\n        {            \r\n            MemoryStream AudioRxvdStream;\r\n\r\n            <span style=\"color:blue\">#region</span> Its rxving audio From Network Continously\r\n\r\n                socket_Audio.Bind(<span style=\"color:blue\">new</span> IPEndPoint(IPAddress.IPv6Any, SoundPort));\r\n          \r\n               \r\n                <span style=\"color:blue\">byte</span>[] byteData;\r\n                <span style=\"color:blue\">while</span> (<span style=\"color:blue\">true</span>)\r\n                {\r\n                    AudioRxvdStream = <span style=\"color:blue\">null</span>;\r\n                    AudioRxvdStream = <span style=\"color:blue\">new</span> MemoryStream();\r\n\r\n                    byteData = <span style=\"color:blue\">new</span> <span style=\"color:blue\">byte</span>[1600];\r\n\r\n                    <span style=\"color:blue\">if</span> (socket_Audio != <span style=\"color:blue\">null</span>)\r\n                        socket_Audio.Receive(byteData, SocketFlags.None);\r\n                                  \r\n                    AudioRxvdStream.Write(byteData , 0, byteData .Length);\r\n\r\n                   \r\n                    <span style=\"color:blue\">if</span> (AudioRxvdStream != <span style=\"color:blue\">null</span>)\r\n                    {\r\n                        waveOut = <span style=\"color:blue\">null</span>;\r\n                        waveOut = <span style=\"color:blue\">new</span> WaveOut();\r\n                 \r\n                        <span style=\"color:blue\">try</span>\r\n                        {\r\n                           \r\n\r\n                            waveOut.Init(<span style=\"color:blue\">new</span> WaveOutStream(AudioRxvdStream));\r\n                            waveOut.Play();\r\n\r\n                          \r\n\r\n                        }\r\n                        <span style=\"color:blue\">catch</span> (Exception te)\r\n                        {\r\n                            ObjLog.Write(<span style=\"color:#a31515\">&quot;Exception-iNIT waveout&quot;</span> &#43; te.ToString());\r\n                            \r\n                        }\r\n                       \r\n                    }\r\n\r\n\r\n                }          \r\n            <span style=\"color:blue\">#endregion</span>\r\n        } \r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>The 2 derived classes used are ( code is from other discussions results )</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span>  <span style=\"color:blue\">class</span> BufferedAudioStream\r\n    {\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">byte</span>[] _buffer;\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">int</span> _position;\r\n\r\n        <span style=\"color:blue\">public</span> BufferedAudioStream(<span style=\"color:blue\">byte</span>[] buffer)\r\n        {\r\n            _position = 0;\r\n            _buffer = buffer;\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">byte</span>[] Buffer\r\n        {\r\n            <span style=\"color:blue\">get</span>\r\n            {\r\n                <span style=\"color:blue\">return</span> _buffer;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">int</span> Position\r\n        {\r\n            <span style=\"color:blue\">get</span>\r\n            {\r\n                <span style=\"color:blue\">return</span> _position;\r\n            }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                _position = value;\r\n            }\r\n        }\r\n    }\r\n\r\n  <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> WaveOutStream : WaveStream\r\n    {\r\n        <span style=\"color:blue\">private</span> Queue&lt;BufferedAudioStream&gt; _sampQueue;\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">long</span> _position;\r\n      \r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">long</span> Position\r\n        {\r\n            <span style=\"color:blue\">get</span>\r\n            {\r\n                <span style=\"color:blue\">return</span> _position;\r\n            }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                _position = value;\r\n            }\r\n        }\r\n\r\n\r\n        MemoryStream AudioRxvdStream;\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">bool</span> Streaming=<span style=\"color:blue\">true</span>;\r\n        clsLog ObjLog = <span style=\"color:blue\">new</span> clsLog();\r\n\r\n        <span style=\"color:blue\">public</span> WaveOutStream(MemoryStream _AudioRxvdStream)\r\n        {\r\n            <span style=\"color:blue\">try</span>\r\n            {\r\n                AudioRxvdStream = _AudioRxvdStream;\r\n                <span style=\"color:blue\">try</span>\r\n                {\r\n                    _sampQueue.Clear();\r\n                }\r\n                <span style=\"color:blue\">catch</span>\r\n                {\r\n\r\n                }\r\n\r\n                _position = 0;\r\n                _sampQueue = <span style=\"color:blue\">new</span> Queue&lt;BufferedAudioStream&gt;();\r\n\r\n                <span style=\"color:blue\">byte</span>[] nbuffer = AudioRxvdStream.ToArray();\r\n                <span style=\"color:blue\">lock</span> (_sampQueue)\r\n                {\r\n                    _sampQueue.Enqueue(<span style=\"color:blue\">new</span> BufferedAudioStream(nbuffer));\r\n                }\r\n            }             \r\n            <span style=\"color:blue\">catch</span> (Exception ex)\r\n            {\r\n                ObjLog.Write(<span style=\"color:#a31515\">&quot;-Exception at WaveOutStream()&quot;</span>&#43;ex.Message);\r\n            }\r\n        }\r\n\r\n   <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n   <span style=\"color:gray\">///</span><span style=\"color:green\"> Reads sample data from queued samples, if queue is empty generates silence</span>\r\n   <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n   \r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">int</span> Read(<span style=\"color:blue\">byte</span>[] buffer, <span style=\"color:blue\">int</span> offset, <span style=\"color:blue\">int</span> count)\r\n        {\r\n            <span style=\"color:blue\">int</span> read = 0;\r\n            <span style=\"color:blue\">try</span>\r\n            {\r\n                <span style=\"color:blue\">while</span> (read &lt; count)\r\n                {\r\n                    <span style=\"color:blue\">int</span> required = count - read;\r\n                    <span style=\"color:blue\">if</span> (_sampQueue.Count == 0)\r\n                    {\r\n                        <span style=\"color:green\">// Return a zero filled buffer</span>\r\n                        <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> n = 0; n &lt; required; n&#43;&#43;)\r\n                            buffer[offset &#43; n] = 0;\r\n\r\n                        read &#43;= required;\r\n                    }\r\n                    <span style=\"color:blue\">else</span>\r\n                    {\r\n                        BufferedAudioStream sblock = (BufferedAudioStream)_sampQueue.Peek();\r\n\r\n                        <span style=\"color:blue\">int</span> nread = sblock.Buffer.Length - sblock.Position;\r\n\r\n                        <span style=\"color:green\">// If this buffer must be read in it's entirety</span>\r\n                        <span style=\"color:blue\">if</span> (nread &lt;= required)\r\n                        {\r\n                            <span style=\"color:green\">// Read entire buffer</span>\r\n                            Buffer.BlockCopy(sblock.Buffer, sblock.Position, buffer, offset &#43; read, nread);\r\n                            read &#43;= nread;\r\n\r\n                            _sampQueue.Dequeue();\r\n\r\n                        }\r\n                        <span style=\"color:blue\">else</span> <span style=\"color:green\">// the number of bytes that can be read is greater than that required</span>\r\n                        {\r\n                            Buffer.BlockCopy(sblock.Buffer, sblock.Position, buffer, offset &#43; read, required);\r\n                            sblock.Position &#43;= required;\r\n                            read &#43;= required;\r\n                        }\r\n                    }\r\n                }\r\n                _position &#43;= read;\r\n            }\r\n            <span style=\"color:blue\">catch</span> (Exception ex)\r\n            {\r\n                ObjLog.Write(<span style=\"color:#a31515\">&quot;-Exception at Read()&quot;</span> &#43; ex.Message);\r\n\r\n            }\r\n            <span style=\"color:blue\">return</span> read;\r\n        }\r\n          \r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> WaveFormat WaveFormat\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> WaveFormat(8000, 16, 2); }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">long</span> Length\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> AudioRxvdStream.Length; }\r\n        }\r\n\r\n       \r\n    }\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>Thanks,</p>\r\n<p>JIbin</p>\r\n",
    "PostedDate": "2010-11-09T03:04:10.983-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "519277",
    "ThreadId": "234002",
    "Html": "\r\n<p>there should only be one call to waveout.init and you need one master wave stream that returns received data from the network from its Read method. Have a look at BufferedWaveProvider in the latest NAudio source code (see the source code tab)</p>\r\n<p>Mark</p>\r\n",
    "PostedDate": "2010-11-09T03:16:37.333-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "519777",
    "ThreadId": "234002",
    "Html": "\r\n<p>Hi Mark,</p>\r\n<p>*****&nbsp; THANK YOU SO MUCH ***</p>\r\n<p>The problem is solved now and i am able to do voice chat between 2 systems over internet&nbsp; using NAudio Library without any errors..</p>\r\n<p>Thanks</p>\r\n<p>jibin</p>\r\n<p>jibin.mn@hotmail.com</p>\r\n",
    "PostedDate": "2010-11-09T21:48:43.94-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]