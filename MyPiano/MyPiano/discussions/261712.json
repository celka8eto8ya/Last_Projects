[
  {
    "Id": "628990",
    "ThreadId": "261712",
    "Html": "<p>﻿﻿Please can tellme and if possible correct my code for make this work?<br />basically i need run MIDI in background using backgroundworker.</p>\n<p><br />Im not lazy, just confused with this.<br /><br />I open this new discussion, for not make the other ultra large adn due the other is mixed with MIDI, you know.</p>\n<pre>NAudio.MmException was unhandled by user code\r\nMessage=AlreadyAllocated calling midiOutOpen\r\nSource=NAudio\r\nStackTrace:\r\n       at NAudio.MmException.Try(MmResult result, String function)\r\n       at NAudio.Midi.MidiOut..ctor(Int32 deviceNo)\r\n       at MTHR_Bug.MainWindow.RunInBackground(Object sender, DoWorkEventArgs e) in <br />C:\\Users\\Groboto\\Desktop\\MTHR-bug - Copy\\MTHR-Bug\\MTHR-Bug\\MainWindow.xaml.cs:line 62\r\n       at System.ComponentModel.BackgroundWorker.OnDoWork(DoWorkEventArgs e)\r\n       at System.ComponentModel.BackgroundWorker.WorkerThreadStart(Object argument)\r\n  InnerException: \r\n</pre>\n<p>Here the code, i use timer at 1ms for simulate multiple faster&nbsp;event fired.<br />At the end, of the code, i show more code, making the same, but outside of backgroundworker, with 0 error or problem!<br />Why, with backgroudn worker happen this and without no?<br /><br /><br /><br />using System;<br />using System.Collections.Generic;<br />using System.Linq;<br />using System.Text;<br />using System.Windows;<br />using System.Windows.Controls;<br />using System.Windows.Data;<br />using System.Windows.Documents;<br />using System.Windows.Input;<br />using System.Windows.Media;<br />using System.Windows.Media.Imaging;<br />using System.Windows.Navigation;<br />using System.Windows.Media.Animation;<br />using System.Windows.Shapes;<br />using System.Threading;<br />using System.Windows.Threading;<br />using NAudio.Midi;<br /><br /><br />namespace MTHR_Bug<br />{<br /><br />&nbsp;&nbsp;&nbsp; public partial class MainWindow : Window<br />&nbsp;&nbsp;&nbsp; {<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int MIDIDEVICE = 1;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public MainWindow()<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InitializeComponent();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br /><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.ComponentModel.BackgroundWorker backgroundWorker;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void Window_Loaded(object sender, RoutedEventArgs e)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DispatcherTimer timer = new DispatcherTimer();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; timer.Interval = TimeSpan.FromMilliseconds(1);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; timer.Tick += new EventHandler(timer_run);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; timer.Start();<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br /><br /><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void timer_run(Object sender, EventArgs args)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; backgroundWorker = new System.ComponentModel.BackgroundWorker();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; backgroundWorker.WorkerSupportsCancellation = true;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; backgroundWorker.DoWork += new System.ComponentModel.DoWorkEventHandler(RunInBackground);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; backgroundWorker.RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(RunInBackgroundComplete);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; backgroundWorker.RunWorkerAsync();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br /><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void RunInBackground(object sender, System.ComponentModel.DoWorkEventArgs e)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MidiOut midiOut = new MidiOut(MIDIDEVICE);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; midiOut.Send(MidiMessage.StartNote(1, 1, 1).RawData);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; midiOut.Dispose();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void RunInBackgroundComplete(object sender, System.ComponentModel.AsyncCompletedEventArgs e)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; backgroundWorker.Dispose();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br /><br />&nbsp;&nbsp;&nbsp; }<br />}</p>\n<p><br />-------------------------------------------------------------------------------------------------------</p>\n<pre>This is the same, but without backgroundworker! 0 problem!\r\n\r\n\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Windows;\r\nusing System.Windows.Controls;\r\nusing System.Windows.Data;\r\nusing System.Windows.Documents;\r\nusing System.Windows.Input;\r\nusing System.Windows.Media;\r\nusing System.Windows.Media.Imaging;\r\nusing System.Windows.Navigation;\r\nusing System.Windows.Media.Animation;\r\nusing System.Windows.Shapes;\r\nusing System.Threading;\r\nusing System.Windows.Threading;\r\nusing NAudio.Midi;</pre>\n<pre>namespace MTHR_Bug\r\n{\r\n\r\n    public partial class MainWindow : Window\r\n    {\r\n\r\n       int MIDIDEVICE = 1;\r\n      \r\n        public MainWindow()\r\n        {\r\n            InitializeComponent();\r\n        }\r\n        private void Window_Loaded(object sender, RoutedEventArgs e)\r\n        {        \r\n            DispatcherTimer timer = new DispatcherTimer();\r\n            timer.Interval = TimeSpan.FromMilliseconds(1);\r\n            timer.Tick += new EventHandler(timer_run);\r\n            timer.Start();\r\n        }\r\n\r\n        private void timer_run(Object sender, EventArgs args)\r\n        {\r\n                MidiOut midiOut = new MidiOut(MIDIDEVICE);\r\n                midiOut.Send(MidiMessage.StartNote(1, 1, 1).RawData);\r\n                midiOut.Dispose();\r\n        }\r\n\r\n    }\r\n}\r\n</pre>",
    "PostedDate": "2011-06-16T16:51:24.973-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "629065",
    "ThreadId": "261712",
    "Html": "<p>First, you need to stop opening and closing MIDI out all the time. Open it once when your app starts. Close it when your app ends:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">partial</span> <span style=\"color: blue;\">class</span> MainWindow : Window\r\n    {\r\n\r\n       <span style=\"color: blue;\">int</span> MIDIDEVICE = 1;\r\n       MidiOut midiOut;\r\n      \r\n        <span style=\"color: blue;\">public</span> MainWindow()\r\n        {\r\n            InitializeComponent();\r\n        }\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> Window_Loaded(<span style=\"color: blue;\">object</span> sender, RoutedEventArgs e)\r\n        {        \r\n            <span style=\"color: blue;\">this</span>.midiOut = <span style=\"color: blue;\">new</span> MidiOut(MIDIDEVICE);\r\n \r\n            DispatcherTimer timer = <span style=\"color: blue;\">new</span> DispatcherTimer();\r\n            timer.Interval = TimeSpan.FromMilliseconds(1);\r\n            timer.Tick += <span style=\"color: blue;\">new</span> EventHandler(timer_run);\r\n            timer.Start();\r\n\r\n            <span style=\"color: blue;\">this</span>.Closed += (o,s) =&gt; midiOut.Dispose();\r\n        }\r\n\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> timer_run(Object sender, EventArgs args)\r\n        {\r\n                midiOut.Send(MidiMessage.StartNote(1, 1, 1).RawData);\r\n        }\r\n\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Second, the reason your app is falling over is because you are creating MIDI events faster than you can send them. You end up with multiple threads trying to send MIDI at the same time. If you really want to use a background thread, create just one background thead and let that send events in a loop / read from a queue.</p>\r\n<p>Mark</p>",
    "PostedDate": "2011-06-16T23:13:23.247-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "629353",
    "ThreadId": "261712",
    "Html": "<p>Mark you are 100% right.<br />No bug just my fault!!<br />Thankyou so much !</p>",
    "PostedDate": "2011-06-17T10:53:55.423-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "894587",
    "ThreadId": "261712",
    "Html": "<p>mark can post some example of how do this \"If you really want to use a background thread, create just one background thread and let that send events in a loop / read from a queue\"</p>\r\n<p>I need find way to send midi in faster way, without thread affect all application.<br />Right now send midi act like a bottleneck, specially affecting the UI thread making all work slow when send midi.<br />Bets regards!</p>",
    "PostedDate": "2012-08-02T04:10:25.037-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]