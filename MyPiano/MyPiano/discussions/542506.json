[
  {
    "Id": "1235022",
    "ThreadId": "542506",
    "Html": "Hi mark,<br />\nI want to calculate cuein(I also trying to get the start position to remove silence at the beginning of the mp3 file) and cueout(I also trying to get the end position to remove silence at the end of the mp3 file).I have done this.But problem is that to execute below method CPU usage goes to 50% fo ra single player(i have implemented multiplier concept).If any other way calculate this silence bit please share with me(very urgent).If a song is 3 mb then wave.Length goes to 41515315.<br />\n<pre><code>private void CalculateCueInOutTime(string EncryptFileName, Playlist m_objPlaylist)\n        {\n            try\n            {\n                //double MaxDBValue = 0.00;\n                var plugin = GetPluginForFile(EncryptFileName);\n                if (plugin == null)\n                {\n                    throw new InvalidOperationException(&quot;Unsupported file extension&quot;);\n                }\n\n                //  Mp3FileReader reader = new Mp3FileReader(EncryptFileName);\n                //  WaveStream pcm = WaveFormatConversionStream.CreatePcmStream(reader);\n\n                WaveStream pcm = WaveFormatConversionStream.CreatePcmStream(plugin.CreateWaveStream(EncryptFileName));\n                \n                NAudio.Wave.WaveChannel32 wave = new NAudio.Wave.WaveChannel32(pcm);\n                byte[] buffer = new byte[16384];\n                int read = 0;\n                int count = 0;\n                int totalCount = 0;\n                List&lt;double&gt; lstStore = new List&lt;double&gt;();\n\n                while (wave.Position &lt; wave.Length)\n                {\n                    read = wave.Read(buffer, 0, 16384);\n                    for (int i = 0; i &lt; read / 8; i++)\n                    {\n                        if ((BitConverter.ToSingle(buffer, i * 8) &lt; -0.06) || (BitConverter.ToSingle(buffer, i * 8) &gt; 0.06))\n                        {\n                            if (count == 0)\n                            {\n                                count = totalCount;\n                            }\n                        }\n                        //if (BitConverter.ToSingle(buffer, i * 8) &gt; MaxDBValue)\n                        //{\n                        //    MaxDBValue = Convert.ToDouble(BitConverter.ToSingle(buffer, i * 8));\n                        //}\n                        lstStore.Add(BitConverter.ToSingle(buffer, i * 8));\n                        totalCount++;\n                    }\n\n                    //for (int i = 0; i &lt; read / 4; i++)\n                    //{\n                    //    MaxPeakValue = Math.Max(MaxPeakValue, BitConverter.ToSingle(buffer, i * 4));\n                    //}\n                }\n                //MaxPeakofSong.Add(MaxPeakValue);\n                Double CueInTime = (wave.TotalTime.TotalSeconds * count) / totalCount;\n                int CueMin = (int)CueInTime / 60;\n                double CueSec = (CueInTime - CueMin * 60);\n                string s_CueInTime = String.Format(&quot;{0:00}:{1:00.00}&quot;, CueMin, CueSec);\n\n                count = 0;\n                for (int i = lstStore.Count - 1; i &gt;= 0; i--)\n                {\n                    if ((lstStore[i] &lt; -0.09) || (lstStore[i] &gt; 0.09))   //0.07 //0.14\n                    {\n                        if (count == 0)\n                        {\n                            count = lstStore.Count - i - 1;\n                            break;\n                        }\n                    }\n                }\n                Double CueOutTime = (wave.TotalTime.TotalSeconds * count) / totalCount;\n                CueMin = (int)CueOutTime / 60;\n                CueSec = (CueOutTime - CueMin * 60);\n                string s_CueOutTime = String.Format(&quot;{0:00}:{1:00.00}&quot;, CueMin, CueSec);\n}</code></pre>\n\n",
    "PostedDate": "2014-04-17T06:02:39.48-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1242253",
    "ThreadId": "542506",
    "Html": "I'd recommend you start by using AudioFileReader and read using the float[] overload for an easier way to access each sample. <br />\n",
    "PostedDate": "2014-05-06T13:08:02.95-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]