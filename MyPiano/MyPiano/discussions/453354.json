[
  {
    "Id": "1080386",
    "ThreadId": "453354",
    "Html": "HI Mark,<br />\n<pre><code> I use naudio gui component SongPositionSlider as a my song trackbar. But problem is that after some time interval it's vibrate.</code></pre>\n\n```\r\nThis is my SongPositionSlider.cs class<br />\n\r<br />\nusing System;\r<br />\nusing System.Collections;\r<br />\nusing System.ComponentModel;\r<br />\nusing System.Drawing;\r<br />\nusing System.Data;\r<br />\nusing System.Windows.Forms;\r<br />\n<br />\nnamespace NAudio.Gui\r<br />\n{<br />\n<pre><code>/// &lt;summary&gt;\n/// VolumeSlider control\n/// &lt;/summary&gt;\npublic class SongPositionSlider : System.Windows.Forms.UserControl\n{\n    /// &lt;summary&gt;\n    /// Required designer variable.\n    /// &lt;/summary&gt;\n    private System.ComponentModel.Container components = null;\n    private int _SongLength = 0;\n    private int _CuttentTime = 0;\n    private float MinDb =-20;// -48;\n    private int currentVolumn = 582;\n    /// &lt;summary&gt;\n    /// Volume changed event\n    /// &lt;/summary&gt;\n    public event EventHandler VolumeChanged;\n\n    /// &lt;summary&gt;\n    /// Creates a new VolumeSlider control\n    /// &lt;/summary&gt;\n    public SongPositionSlider()\n    {\n        // This call is required by the Windows.Forms Form Designer.\n        InitializeComponent();\n\n        // TODO: Add any initialization after the InitComponent call\n    }\n\n    /// &lt;summary&gt;\n    /// Clean up any resources being used.\n    /// &lt;/summary&gt;\n    protected override void Dispose(bool disposing)\n    {\n        if (disposing)\n        {\n            if (components != null)\n                components.Dispose();\n        }\n        base.Dispose(disposing);\n    }\n\n    #region Component Designer generated code\n    /// &lt;summary&gt;\n    /// Required method for Designer support - do not modify \n    /// the contents of this method with the code editor.\n    /// &lt;/summary&gt;\n    private void InitializeComponent()\n    {\n        this.SuspendLayout();\n        // \n        // SongPositionSlider\n        // \n        this.BackColor = System.Drawing.Color.Transparent;\n        this.Name = &quot;SongPositionSlider&quot;;\n        this.Size = new System.Drawing.Size(96, 16);\n        this.ResumeLayout(false);\n\n    }\n    #endregion\n\n    /// &lt;summary&gt;\n    /// &lt;see cref=&quot;Control.OnPaint&quot;/&gt;\n    /// &lt;/summary&gt;\n    protected override void OnPaint(PaintEventArgs pe)\n    {\n        //int _PaintWidth = 0;\n        //if (_SongLength &gt; 0)\n        //{\n        //    _PaintWidth = (int)((_CuttentTime * 580) / _SongLength);\n        //}\n\n        pe.Graphics.FillRectangle(new SolidBrush(Color.FromArgb(0, 0, 0)), 0, 0, _CuttentTime, this.Height);\n\n        // Calling the base class OnPaint\n        //base.OnPaint(pe);\n        pe.Graphics.Dispose();\n    }\n\n    /// &lt;summary&gt;\n    /// &lt;see cref=&quot;Control.OnMouseMove&quot;/&gt;\n    /// &lt;/summary&gt;\n    protected override void OnMouseMove(MouseEventArgs e)\n    {\n        if (e.Button == MouseButtons.Left)\n        {\n            SetVolumeFromMouse(e.X);\n        }\n        base.OnMouseMove(e);\n    }\n\n    /// &lt;summary&gt;\n    /// &lt;see cref=&quot;Control.OnMouseDown&quot;/&gt;\n    /// &lt;/summary&gt;\n    protected override void OnMouseDown(MouseEventArgs e)\n    {\n        SetVolumeFromMouse(e.X);\n        base.OnMouseDown(e);\n    }\n\n    private void SetVolumeFromMouse(int x)\n    {\n        //currentVolumn = x;\n        //// linear Volume = (float) x / this.Width;\n        //float dbVolume = (1 - (float)x / this.Width) * MinDb;\n        //if (x &lt;= 0)\n        //    Volume = 0;\n        //else\n        //    Volume = (float)Math.Pow(10, dbVolume / 20);\n        CuttentTime = x;\n    }\n\n    /// &lt;summary&gt;\n    /// The volume for this control\n    /// &lt;/summary&gt;\n    [DefaultValue(0)]\n    public int SongLength\n    {\n        get\n        {\n            return _SongLength;\n        }\n        set\n        {\n            _SongLength = value;\n        }\n    }\n\n    [DefaultValue(0)]\n    public int CuttentTime\n    {\n        get\n        {\n            return _CuttentTime;\n        }\n        set\n        {\n            _CuttentTime = value;\n            if (VolumeChanged != null)\n                VolumeChanged(this, EventArgs.Empty);\n            Invalidate();\n        }\n    }\n}</code></pre>\n\n}\r<br />\n<br />\n```HOw can i solved my problem?pls i wait for your help.<br />\n",
    "PostedDate": "2013-08-14T00:02:39.16-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]