[
  {
    "Id": "1461427",
    "ThreadId": "650700",
    "Html": "I have a signal chain where I mix the audio from a headset microphone with the headset speakers and write the audio data to a .wma or a .wav file block by block. This does work if I write to a .wav file. If I use WmaWriter, when the microphone data available event occurs, and call WmaWriter.Write in the event handler function with the block of data received,  immediately my code receives a recording stopped event from the microphone.\r<br />\n<br />\nHere is my code:<br />\n<pre><code>        /// &lt;summary&gt;\n        /// Records Mic and Audio to separate files, combines to a single WAV\n        /// and calls the WMA conversation method\n        /// &lt;/summary&gt;\n        public void StartRecording()\n        {\n            if (!_disposed)\n            {\n                if (!Directory.Exists(SaveLocation))\n                {\n                    Directory.CreateDirectory(SaveLocation);\n                }\n                CurrentDateTime = DateTime.UtcNow.ToString(&quot;yyyy_MM_dd_HH_mm_ss_fff&quot;);\n                SpeakerAudioRecordingStopped = false;\n                MicAudioRecordingStopped = false;\n\n                _microphone = new WasapiCapture();\n                _microphone.ShareMode = AudioClientShareMode.Shared;\n                _microphone.WaveFormat = new WaveFormat(44100, 16, 2);\n\n                _speakers = new WasapiLoopbackCapture();\n                _speakers.ShareMode = AudioClientShareMode.Shared;\n\n                _micAudioBuffer = new BufferedWaveProvider(_microphone.WaveFormat);\n                _micAudioBuffer.DiscardOnBufferOverflow = true;\n                _speakersAudioBuffer = new BufferedWaveProvider(_speakers.WaveFormat);\n                _speakersAudioBuffer.DiscardOnBufferOverflow = true;\n\n                _microphone.DataAvailable += _microphone_DataAvailable;\n                _microphone.RecordingStopped += _microphone_RecordingStopped;\n\n                _speakers.DataAvailable += _speakersAudio_DataAvailable;\n                _speakers.RecordingStopped += _speakersAudio_RecordingStopped;\n\n                _mixer = new MixingSampleProvider(WaveFormat.CreateIeeeFloatWaveFormat(44100, 1));\n                _mixer.ReadFully = true;\n\n                _micAudioReSampler = new MediaFoundationResampler(_micAudioBuffer, new WaveFormat(44100, 1)) { ResamplerQuality = 60 };\n                _speakersAudioReSampler = new MediaFoundationResampler(_speakersAudioBuffer, new WaveFormat(44100, 1)) { ResamplerQuality = 60 };\n              \n                _mixer.AddMixerInput(_micAudioReSampler);\n                _mixer.AddMixerInput(_speakersAudioReSampler);\n\n                MixedWavFile = SaveLocation + User + &quot;_&quot; + CurrentDateTime + &quot;_&quot; + &quot;mixed.wav&quot;;\n                MixedWmaFile = SaveLocation + User + &quot;_&quot; + CurrentDateTime + &quot;_&quot; + &quot;mixed.wma&quot;;\n                _mixerOutputConverter = new SampleToWaveProvider16(_mixer);\n                \n                var cx =  Codec.GetCodecs(MediaTypes.WMMEDIATYPE_Audio);\n                if (cx == null)\n                {\n                    throw new IOException(&quot;No Codec Available to convert to WMA file&quot;);\n                }\n\n                var co = cx.FirstOrDefault(c =&gt; c.Name == &quot;Windows Media Audio Voice 9&quot;);\n                if (co != null)\n                {\n                    var cf = co.CodecFormats.FirstOrDefault(c =&gt; c.Description == &quot;16 kbps, 16 kHz, mono&quot;);\n                    if (cf == null)\n                    {\n                        throw new IOException(&quot;Could not find 16kbs, 16kHz, mono codec format&quot;);\n                    }\n\n                    _wmaWriter = new WmaWriter(new FileStream(MixedWmaFile, FileMode.Create), _mixerOutputConverter.WaveFormat, cf);\n                    \n                }\n                else\n                {\n                    throw new IOException(&quot;Could not find Windows Media Audio Voice 9&quot;);\n                }\n\n                // Assuming the bytes recorded are at 16k / 2 channel\n                micBitsPerSecond = _micAudioBuffer.WaveFormat.Channels * _micAudioBuffer.WaveFormat.BitsPerSample * _micAudioBuffer.WaveFormat.SampleRate;\n                mixerOutputBitsPerSecond = _mixerOutputConverter.WaveFormat.Channels * _mixerOutputConverter.WaveFormat.BitsPerSample * _mixerOutputConverter.WaveFormat.SampleRate;\n\n                micToMixerRatio = micBitsPerSecond / mixerOutputBitsPerSecond;\n                mixedBuffer = new byte[_micAudioBuffer.BufferLength];\n\n                _microphone.StartRecording();\n                _speakers.StartRecording();\n            }\n            else\n            {\n                throw new ObjectDisposedException(&quot;Object has been disposed. Cannot start recording.&quot;);\n            }\n        }\n\n        void StopMixing()\n        {\n            if (SpeakerAudioRecordingStopped &amp;&amp; MicAudioRecordingStopped)\n            {\n                _mixer.RemoveAllMixerInputs();\n                CleanupRecording();\n            }\n        }\n\n        void _speakersAudio_RecordingStopped(object sender, StoppedEventArgs e)\n        {\n            SpeakerAudioRecordingStopped = true;\n            StopMixing();\n        }\n\n        void _microphone_RecordingStopped(object sender, StoppedEventArgs e)\n        {\n            MicAudioRecordingStopped = true;\n            StopMixing();\n        }\n\n        void _microphone_DataAvailable(object sender, WaveInEventArgs e)\n        {\n            _micAudioBuffer.AddSamples(e.Buffer, 0, e.BytesRecorded);\n            int mixedBytesRead = _mixerOutputConverter.Read(mixedBuffer, 0, e.BytesRecorded / micToMixerRatio);\n            _wmaWriter.Write(mixedBuffer, 0, mixedBytesRead);\n        }\n\n        void _speakersAudio_DataAvailable(object sender, WaveInEventArgs e)\n        {\n            _speakersAudioBuffer.AddSamples(e.Buffer, 0, e.BytesRecorded);\n\n        }\n\n        /// &lt;summary&gt;\n        /// This method disposes and closes all the recording objects\n        /// and calls the mixer function\n        /// &lt;/summary&gt;\n        public void StopRecording()\n        {\n            if (!_disposed)\n            {\n                _microphone.StopRecording();\n                _speakers.StopRecording();\n            }\n            else\n            {\n                throw new ObjectDisposedException(&quot;Object has been disposed. No recording to stop.&quot;);\n            }\n        }\n</code></pre>\n\n",
    "PostedDate": "2016-01-29T21:03:19.587-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1461483",
    "ThreadId": "650700",
    "Html": "I examined the call stack and found an exception is being thrown with this message:\r<br />\n<br />\nUnable to cast COM object of type 'System.__ComObject' to interface type 'NAudio.WindowsMediaFormat.IWMWriter'. This operation failed because the QueryInterface call on the COM component for the interface with IID '{96406BD4-2B2B-11D3-B36B-00C04F6108FF}' failed due to the following error: No such interface supported (Exception from HRESULT: 0x80004002 (E_NOINTERFACE)).\r<br />\n<br />\nDo I need to install some Windows Media Audio component to create the COM interface that is missing?<br />\n",
    "PostedDate": "2016-01-30T12:12:19.877-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1461943",
    "ThreadId": "650700",
    "Html": "The WMA codecs are installed by default on most consumer versions of Windows. Are you on a server version? If so there are various Windows extensions called something like &quot;Desktop Media Experience&quot; that you can install<br />\n",
    "PostedDate": "2016-02-04T06:27:04.063-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1462266",
    "ThreadId": "650700",
    "Html": "Hi Mark, what I am trying to do is write to a WMA file, encoding buffer by buffer in the DataAvailable event handler of a WasapiCapture and WasapbLoopbackCapture objects. I did not see any API to do that in NAudio. I do see the  MediaFoundationEncoder can convert an entire .wav file into .wma using a signal chain, but there seems to be no function to directly encode to a file buffer by buffer from a DataAvailable event. Encoding an entire file will take too long in my application. So I tried to use WmaWriter.Write to encode wma block by block. I am using Windows 8.1. Do I have to install the Windows Media Format 11 SDK first for the IWMWriter COM object to be installed? This SDK will only install on Windows XP. I would rather use the Media Foundation classes, but there is no way to encode WMA buffer by buffer as audio comes in from the microphone and speakers.<br />\n",
    "PostedDate": "2016-02-06T08:10:11.82-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1464116",
    "ThreadId": "650700",
    "Html": "I'm surprised it's not available in Windows 8.1. Are you using one of the N or K versions of Windows perhaps?<br />\n",
    "PostedDate": "2016-02-23T04:57:29.807-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1464143",
    "ThreadId": "650700",
    "Html": "As far as I can tell, I am not using the N or K version of Windows. I read that the Windows Media Format 11 SDK was merged into the &quot;Windows SDK&quot; for Windows 7. I installed the Windows SDK for Windows 8.1, I searched and see no Windows Media Format SDK in the Windows 8.1 SDK, and the IWMWriter COM object or corresponding GUID did not get installed in the Registry. Maybe I am looking in the wrong place? Or Maybe I should not expect to see IWMWriter GUID 96406BD4-2B2B-11D3-B36B-00C04F6108FF anywhere? My problem is this code causes an immediate recording stopped event:\r<br />\n<br />\nvoid _microphone_DataAvailable(object sender, WaveInEventArgs e)<br />\n<pre><code>    {\n        _micAudioBuffer.AddSamples(e.Buffer, 0, e.BytesRecorded);\n        int mixedBytesRead = _mixerOutputConverter.Read(mixedBuffer, 0, e.BytesRecorded / micToMixerRatio);\n        _wmaWriter.Write(mixedBuffer, 0, mixedBytesRead);\n    }\n</code></pre>\n\nPlease see the entire code in my first post.<br />\n",
    "PostedDate": "2016-02-23T05:52:04.84-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]