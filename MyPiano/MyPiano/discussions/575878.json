[
  {
    "Id": "1334987",
    "ThreadId": "575878",
    "Html": "Hello, \r<br />\n<br />\nI want to build an Application which allows me to Playback some Audiofiles (.wav and .mp3), this was realy easy with an online Tutorial on Youtube [1].\r<br />\n<br />\nMy Problem is that i want to have an FadeIn when i press &quot;Play&quot; and an FadeOut when i press Stop. I found an solution[2] for naudio to do this but i cant bring this solution together with my existing code for normal Playback without Fading.\r<br />\n<br />\nMy Code:<br />\n<pre><code>OpenFileDialog dialog = new OpenFileDialog();\n            dialog.Filter = &quot;Audio File (*.mp3;*.wav)|*.mp3;*.wav;&quot;;\n            if (dialog.ShowDialog() != DialogResult.OK) return;\n          \n            if (this.audioFile.EndsWith(&quot;.mp3&quot;))\n            {\n                NAudio.Wave.WaveStream pcm = NAudio.Wave.WaveFormatConversionStream.CreatePcmStream(new NAudio.Wave.Mp3FileReader(this.audioFile));\n                stream = new NAudio.Wave.BlockAlignReductionStream(pcm);\n            }\n            else if (this.audioFile.EndsWith(&quot;.wav&quot;))\n            {\n                NAudio.Wave.WaveStream pcm = new NAudio.Wave.WaveChannel32(new NAudio.Wave.WaveFileReader(this.audioFile));\n                stream = new NAudio.Wave.BlockAlignReductionStream(pcm);\n            }\n            else throw new InvalidOperationException(&quot;Not a correct audio file type.&quot;);          \n            output = new NAudio.Wave.DirectSoundOut();         \n            output.Init(stream);\n            this.btn_play.Enabled = true;</code></pre>\n\nMy &quot;Play&quot; button Click-Event triggers only the output.play() function.\r<br />\n<br />\nThe Code i found online for Fading:<br />\n<pre><code>public class FadeInOutSampleProvider : ISampleProvider\n{\n    enum FadeState\n    {\n        Silence,\n        FadingIn,\n        FullVolume,\n        FadingOut,\n    }\n\n    private readonly object lockObject = new object();\n    private readonly ISampleProvider source;\n    private int fadeSamplePosition;\n    private int fadeSampleCount;\n    private FadeState fadeState;\n\n    public FadeInOutSampleProvider(ISampleProvider source)\n    {\n        this.source = source;\n        this.fadeState = FadeState.FullVolume;\n    }\n\n    public void BeginFadeIn(double fadeDurationInMilliseconds)\n    {\n        lock (lockObject)\n        { \n            fadeSamplePosition = 0;\n            fadeSampleCount = (int)((fadeDurationInMilliseconds * source.WaveFormat.SampleRate) / 1000);\n            fadeState = FadeState.FadingIn;\n        }\n    }\n\n    public void BeginFadeOut(double fadeDurationInMilliseconds)\n    {\n        lock (lockObject)\n        {\n            fadeSamplePosition = 0;\n            fadeSampleCount = (int)((fadeDurationInMilliseconds * source.WaveFormat.SampleRate) / 1000);\n            fadeState = FadeState.FadingOut;\n        }\n    }\n\n    public int Read(float[] buffer, int offset, int count)\n    {\n        int sourceSamplesRead = source.Read(buffer, offset, count);\n        lock (lockObject)\n        {\n            if (fadeState == FadeState.FadingIn)\n            {\n                FadeIn(buffer, offset, sourceSamplesRead);\n            }\n            else if (fadeState == FadeState.FadingOut)\n            {\n                FadeOut(buffer, offset, sourceSamplesRead);\n            }\n            else if (fadeState == FadeState.Silence)\n            {\n                ClearBuffer(buffer, offset, count);\n            }\n        }\n        return sourceSamplesRead;\n    }\n\n    private static void ClearBuffer(float[] buffer, int offset, int count)\n    {\n        for (int n = 0; n &lt; count; n++)\n        {\n            buffer[n + offset] = 0;\n        }\n    }\n\n    private void FadeOut(float[] buffer, int offset, int sourceSamplesRead)\n    {\n        int sample = 0;\n        while (sample &lt; sourceSamplesRead)\n        {\n            float multiplier = 1.0f - (fadeSamplePosition / (float)fadeSampleCount);\n            for (int ch = 0; ch &lt; source.WaveFormat.Channels; ch++)\n            {\n                buffer[offset + sample++] *= multiplier;\n            }\n            fadeSamplePosition++;\n            if (fadeSamplePosition &gt; fadeSampleCount)\n            {\n                fadeState = FadeState.Silence;\n                // clear out the end\n                ClearBuffer(buffer, sample + offset, sourceSamplesRead - sample);\n                break;\n            }\n        }\n    }\n\n    private void FadeIn(float[] buffer, int offset, int sourceSamplesRead)\n    {\n        int sample = 0;\n        while (sample &lt; sourceSamplesRead)\n        {\n            float multiplier = (fadeSamplePosition / (float)fadeSampleCount);\n            for (int ch = 0; ch &lt; source.WaveFormat.Channels; ch++)\n            {\n                buffer[offset + sample++] *= multiplier;\n            }\n            fadeSamplePosition++;\n            if (fadeSamplePosition &gt; fadeSampleCount)\n            {\n                fadeState = FadeState.FullVolume;\n                // no need to multiply any more\n                break;\n            }\n        }\n    }\n\n    public WaveFormat WaveFormat\n    {\n        get { return source.WaveFormat; }\n    }\n}</code></pre>\n\nmy problem is to connect this sampleProvider to my Playback. Can somebody show a small example on how i do this.\r<br />\n<br />\nThanks in advance and sorry for my bad english.\r<br />\n<br />\n<br />\nLinks:\r<br />\n[1] <a href=\"https://www.youtube.com/watch?v=2ij2vqgprU0\" rel=\"nofollow\">https://www.youtube.com/watch?v=2ij2vqgprU0</a>\r<br />\n[2] <a href=\"http://stackoverflow.com/a/9471208\" rel=\"nofollow\">http://stackoverflow.com/a/9471208</a><br />\n",
    "PostedDate": "2014-12-19T12:24:44.627-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1337506",
    "ThreadId": "575878",
    "Html": "you're using quite an old tutorial there, Try just using an AudioFileReader, and then passing that directly into the FadeInOutSampleProvider. Then pass that into the Init method of your WaveOut device\r<br />\n<br />\nMark<br />\n",
    "PostedDate": "2014-12-28T07:35:59.713-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]