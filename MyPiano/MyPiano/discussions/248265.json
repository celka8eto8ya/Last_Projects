[
  {
    "Id": "574859",
    "ThreadId": "248265",
    "Html": "\r\n<p>Hi@all,</p>\r\n<p>i have adopted mark's example for creating a sinewave.&nbsp;<a href=\"http://mark-dot-net.blogspot.com/2009/10/playback-of-sine-wave-in-naudio.html\">http://mark-dot-net.blogspot.com/2009/10/playback-of-sine-wave-in-naudio.html</a></p>\r\n<p>This works great when i directly put it into an waveout stream.&nbsp;</p>\r\n<p>What i wanted to have was panning and volume adjustment. For that i created an SineStream passed it to an Wave32To16Stream and this into an WaveChannel32 object. The WaveChannel32 object is given to an WaveMixerStream32 object and this is given to the WaveOut\r\n Stream. Now i have a few gaps in my sine signal.&nbsp;</p>\r\n<p>Can anyone explain what i'm doing wrong?</p>\r\n<p>Any help is highly appreciated.</p>\r\n<p>ralph</p>\r\n<p>&nbsp;</p>\r\n<p>Here is my code</p>\r\n<p>&nbsp;</p>\r\n<p>-- MY DLL</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System;\r\n<span style=\"color:blue\">using</span> NAudio.Wave;\r\n\r\n<span style=\"color:blue\">namespace</span> SoundGenerator.Streams {\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> SineWaveStream : ComputedWaveStreamProvider {\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">long</span> length = 100000000;\r\n\r\n        <span style=\"color:blue\">int</span> sample;\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">float</span> Frequency { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">float</span> Amplitude { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }        \r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">int</span> Read(<span style=\"color:blue\">float</span>[] buffer, <span style=\"color:blue\">int</span> offset, <span style=\"color:blue\">int</span> sampleCount) {\r\n            <span style=\"color:blue\">var</span> sampleRate = WaveFormat.SampleRate;\r\n            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">var</span> n = 0; n &lt; sampleCount; n&#43;&#43;) {\r\n                buffer[n &#43; offset] = (<span style=\"color:blue\">float</span>)(Amplitude * Math.Sin((2 * Math.PI * sample * Frequency) / sampleRate));\r\n                sample&#43;&#43;;\r\n                <span style=\"color:blue\">if</span> (sample &gt;= sampleRate) sample = 0;\r\n            }\r\n            <span style=\"color:blue\">return</span> sampleCount;\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">long</span> Length {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> length; }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">long</span> Position { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> NAudio.Wave;\r\n\r\n<span style=\"color:blue\">namespace</span> SoundGenerator.Streams {\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">abstract</span> <span style=\"color:blue\">class</span> ComputedWaveStreamProvider : WaveStream {\r\n        <span style=\"color:blue\">private</span> WaveFormat waveFormat;\r\n\r\n        <span style=\"color:blue\">protected</span> ComputedWaveStreamProvider()\r\n            : <span style=\"color:blue\">this</span>(44100, 1) {\r\n        }\r\n\r\n        <span style=\"color:blue\">protected</span> ComputedWaveStreamProvider(<span style=\"color:blue\">int</span> sampleRate, <span style=\"color:blue\">int</span> channels) {\r\n            SetWaveFormat(sampleRate, channels);\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> SetWaveFormat(<span style=\"color:blue\">int</span> sampleRate, <span style=\"color:blue\">int</span> channels) {\r\n            waveFormat = WaveFormat.CreateIeeeFloatWaveFormat(sampleRate, channels);\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">int</span> Read(<span style=\"color:blue\">byte</span>[] buffer, <span style=\"color:blue\">int</span> offset, <span style=\"color:blue\">int</span> count) {\r\n            <span style=\"color:blue\">var</span> waveBuffer = <span style=\"color:blue\">new</span> WaveBuffer(buffer);\r\n            <span style=\"color:blue\">var</span> samplesRequired = count / 4;\r\n            <span style=\"color:blue\">var</span> samplesRead = Read(waveBuffer.FloatBuffer, offset / 4, samplesRequired);\r\n            <span style=\"color:blue\">return</span> samplesRead * 4;\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">abstract</span> <span style=\"color:blue\">int</span> Read(<span style=\"color:blue\">float</span>[] buffer, <span style=\"color:blue\">int</span> offset, <span style=\"color:blue\">int</span> sampleCount);\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> WaveFormat WaveFormat { <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> waveFormat; } }\r\n\r\n    }\r\n}\r\n\r\n</pre>\r\n<pre><br></pre>\r\n<pre><div style=\"color:black; background-color:white\"><pre><span style=\"color:blue\">using</span> System.Collections;\r\n<span style=\"color:blue\">using</span> NAudio.Wave;\r\n<span style=\"color:blue\">using</span> SoundGenerator.Streams;\r\n\r\n<span style=\"color:blue\">namespace</span> SoundGenerator {\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">class</span> StreamFactory {\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> SineWaveStream GetSineWaveStream(<span style=\"color:blue\">float</span> frequency, <span style=\"color:blue\">float</span> amplitude) {\r\n            <span style=\"color:green\">// create a sine wave stream</span>\r\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> SineWaveStream { Frequency = frequency, Amplitude = amplitude };            \r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> WaveChannel32 GetChannel(WaveStream stream, <span style=\"color:blue\">float</span> volume){           \r\n            <span style=\"color:green\">// Cast Ieee Stream to PCM Stream. needed for WaveChannel32</span>\r\n            <span style=\"color:blue\">var</span> stream16 = <span style=\"color:blue\">new</span> Wave32To16Stream(stream);\r\n\r\n            <span style=\"color:green\">// create channel to have panning and volume</span>\r\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> WaveChannel32(stream16) {Position = 0, Volume = volume};\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> WaveMixerStream32 GetMixer(IEnumerable streams) {\r\n            <span style=\"color:blue\">var</span> mixer = <span style=\"color:blue\">new</span> WaveMixerStream32 { AutoStop = <span style=\"color:blue\">false</span> };\r\n            <span style=\"color:blue\">foreach</span> (WaveStream stream <span style=\"color:blue\">in</span> streams){\r\n                mixer.AddInputStream(stream);\r\n            }\r\n            <span style=\"color:blue\">return</span> mixer;\r\n        }\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n-- GUI CODE</pre>\r\n<pre><br></pre>\r\n</div>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> StartStopSineWaveStream() {\r\n            <span style=\"color:blue\">if</span> (waveOut == <span style=\"color:blue\">null</span>) {\r\n                <span style=\"color:green\">// create mixer</span>\r\n                mixer = StreamFactory.GetMixer(<span style=\"color:blue\">new</span> List&lt;WaveStream&gt;());\r\n\r\n                <span style=\"color:blue\">if</span>(checkBoxTone1.IsChecked == <span style=\"color:blue\">true</span>){\r\n                    AddTone1();\r\n                }\r\n                \r\n                <span style=\"color:green\">// play streams on soundcard</span>\r\n                waveOut = <span style=\"color:blue\">new</span> WaveOut();\r\n                waveOut.Init(mixer);\r\n                waveOut.Play();               \r\n            } <span style=\"color:blue\">else</span> {\r\n                waveOut.Stop();\r\n                waveOut.Dispose();\r\n                waveOut = <span style=\"color:blue\">null</span>;\r\n            }\r\n        }\r\n                   \r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> AddTone1(){\r\n            sineWaveStream1 = StreamFactory.GetSineWaveStream((<span style=\"color:blue\">float</span>)SliderFrequency1.Value, (<span style=\"color:blue\">float</span>)SliderAmplitude1.Value);\r\n            channel1 = StreamFactory.GetChannel(sineWaveStream1, (<span style=\"color:blue\">float</span>)SliderVolume1.Value);\r\n            mixer.AddInputStream(channel1);\r\n        }\r\n</pre>\r\n</div>\r\n<p></p>\r\n",
    "PostedDate": "2011-03-03T01:32:14.32-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]