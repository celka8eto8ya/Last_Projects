[
  {
    "Id": "1243428",
    "ThreadId": "544796",
    "Html": "Hi members\r<br />\nI am builiding a cut and join audio program and using Naudio reference.\r<br />\nI am building a media player. But see this error: <img src=\"http://i1266.photobucket.com/albums/jj539/45inh12335/up_zps21a1cf0e.png\" alt=\"Image\" /> while click ButtonPlay.\r<br />\nI do it. Because I want to get current time for cut audio \r<br />\nI don't this resolve!\r<br />\nHelp me please!\r<br />\nThanks\r<br />\n```\r\n\r\nnamespace CutAndJoin\r<br />\n{<br />\n<pre><code>public partial class MainForm : Form\n{\n    private IWavePlayer waveOut;\n    private string fileName = null;\n    private WaveStream fileWaveStream;\n    private Action&lt;float&gt; setVolumeDelegate;\n    private NAudio.Wave.BlockAlignReductionStream stream = null;\n    private NAudio.Wave.DirectSoundOut output = null;\n\n    public MainForm()\n    {\n        InitializeComponent();\n    }\n\n\n    public IEnumerable&lt;IInputFileFormatPlugin&gt; InputFileFormats { get; set; }        \n    void OnPlaybackStopped(object sender, StoppedEventArgs e)\n    {\n\n        if (e.Exception != null)\n        {\n            MessageBox.Show(e.Exception.Message, &quot;Playback Device Error&quot;);\n        }\n        fileWaveStream.Position = 0;\n    }\n    private void CloseWaveOut()\n    {\n        if (waveOut != null)\n        {\n            waveOut.Stop();\n        }\n        if (fileWaveStream != null)\n        {\n            // this one really closes the file and ACM conversion\n            fileWaveStream.Dispose();\n            this.setVolumeDelegate = null;\n        }\n        if (waveOut != null)\n        {\n            waveOut.Dispose();\n            waveOut = null;\n        }\n    }\n\n    private IInputFileFormatPlugin GetPluginForFile(string fileName)\n    {\n        var mp3Plugin = new Mp3InputFilePlugin();\n        if (fileName.EndsWith(mp3Plugin.Extension))\n        {\n            return mp3Plugin;\n        }\n        var wavPlugin = new WaveInputFilePlugin();\n        if (fileName.EndsWith(wavPlugin.Extension))\n        {\n            return wavPlugin;\n        }\n        var aiffPlugin = new AiffInputFilePlugin();\n        if (fileName.EndsWith(aiffPlugin.Extension))\n        {\n            return aiffPlugin;\n        }\n        return null;\n        //return (from f in this.InputFileFormats where fileName.EndsWith(f.Extension, StringComparison.OrdinalIgnoreCase) select f).FirstOrDefault();\n    }\n    private ISampleProvider CreateInputStream(string fileName)\n    {\n        var plugin = GetPluginForFile(fileName);\n        if (plugin == null)\n        {\n            throw new InvalidOperationException(&quot;Unsupported file extension&quot;);\n        }\n        this.fileWaveStream = plugin.CreateWaveStream(fileName);\n        var waveChannel = new SampleChannel(this.fileWaveStream);\n        this.setVolumeDelegate = (vol) =&gt; waveChannel.Volume = vol;\n        waveChannel.PreVolumeMeter += OnPreVolumeMeter;\n\n        var postVolumeMeter = new MeteringSampleProvider(waveChannel);\n        postVolumeMeter.StreamVolume += OnPostVolumeMeter;\n\n        return postVolumeMeter;\n    }\n    void OnPreVolumeMeter(object sender, StreamVolumeEventArgs e)\n    {\n        // we know it is stereo\n        waveformPainter1.AddMax(e.MaxSampleValues[0]);\n        waveformPainter2.AddMax(e.MaxSampleValues[1]);\n    }\n\n    void OnPostVolumeMeter(object sender, StreamVolumeEventArgs e)\n    {\n        // we know it is stereo\n        volumeMeter1.Amplitude = e.MaxSampleValues[0];\n        volumeMeter2.Amplitude = e.MaxSampleValues[1];\n    }\n    private void CreateWaveOut()\n    {\n        CloseWaveOut();\n        //int latency = (int)comboBoxLatency.SelectedItem;\n        //this.waveOut = SelectedOutputDevicePlugin.CreateDevice(latency);\n    }\n\n\n    private void buttonPlay_Click(object sender, EventArgs e)\n    {\n\n\n        if (waveOut != null)\n        {\n            if (waveOut.PlaybackState == PlaybackState.Playing)\n            {\n                return;\n            }\n            else if (waveOut.PlaybackState == PlaybackState.Paused)\n            {\n               waveOut.Play();\n\n                return;\n            }\n        }\n        // we are in a stopped state\n        // TODO: only re-initialise if necessary\n\n        if (String.IsNullOrEmpty(fileName))\n        {\n            OnOpenFileClick(sender, e);\n        }\n        if (String.IsNullOrEmpty(fileName))\n        {\n            return;\n        }\n\n        try\n        {\n            CreateWaveOut();\n        }\n        catch (Exception driverCreateException)\n        {\n            MessageBox.Show(String.Format(&quot;{0}&quot;, driverCreateException.Message));\n            return;\n        }\n\n\n        ISampleProvider sampleProvider = null;\n        try\n        {\n            sampleProvider = CreateInputStream(fileName);\n        }\n        catch (Exception createException)\n        {\n            MessageBox.Show(String.Format(&quot;{0}&quot;, createException.Message), &quot;Error Loading File&quot;);\n            return;\n        }\n\n        trackBarPosition.Maximum = (int)fileWaveStream.TotalTime.TotalSeconds;\n        labelTotalTime.Text = String.Format(&quot;{0:00}:{1:00}&quot;, (int)fileWaveStream.TotalTime.TotalMinutes,\n          fileWaveStream.TotalTime.Seconds);\n        trackBarPosition.TickFrequency = trackBarPosition.Maximum / 30;\n        try\n        {\n            waveOut.Init(new SampleToWaveProvider(sampleProvider));\n        }\n        catch (Exception initException)\n        {\n            MessageBox.Show(String.Format(&quot;{0}&quot;, initException.Message), &quot;Error Initializing Output&quot;);\n            return;\n        }\n\n\n\n        setVolumeDelegate(volumeSlider1.Volume);\n\n        waveOut.Play();\n\n\n    }\n\n    private void buttonPause_Click(object sender, EventArgs e)\n    {\n        if (output != null)\n        {\n            if (output.PlaybackState == NAudio.Wave.PlaybackState.Playing) output.Pause();\n            else if (output.PlaybackState == NAudio.Wave.PlaybackState.Paused) output.Play();\n\n\n        }\n    }\n    private void DisposeWave()\n    {\n        if (output != null)\n        {\n            if (output.PlaybackState == NAudio.Wave.PlaybackState.Playing) output.Stop();\n            output.Dispose();\n            output = null;\n            if (stream != null)\n            {\n                stream.Dispose();\n                stream = null;\n\n            }\n        }\n    }\n\n    private void buttonStop_Click(object sender, EventArgs e)\n    {\n        if (waveOut != null)\n        {\n            waveOut.Stop();\n        }\n    }\n\n    private void trackBarPosition_Scroll(object sender, EventArgs e)\n    {\n        if (waveOut != null)\n        {\n            fileWaveStream.CurrentTime = TimeSpan.FromSeconds(fileWaveStream.TotalTime.TotalSeconds * trackBarPosition.Value / 100.0);\n        }\n    }\n    private void volumeSlider1_VolumeChanged(object sender, EventArgs e)\n    {\n        if (setVolumeDelegate != null)\n        {\n            setVolumeDelegate(volumeSlider1.Volume);\n        }\n    }\n    private void timer1_Tick(object sender, EventArgs e)\n    {\n        if (waveOut != null &amp;&amp; fileWaveStream != null)\n        {\n            TimeSpan currentTime = (waveOut.PlaybackState == PlaybackState.Stopped) ? TimeSpan.Zero : fileWaveStream.CurrentTime;\n            trackBarPosition.Value = Math.Min(trackBarPosition.Maximum, (int)(100 * currentTime.TotalSeconds / fileWaveStream.TotalTime.TotalSeconds));\n            labelCurrentTime.Text = String.Format(&quot;{0:00}:{1:00}&quot;, (int)currentTime.TotalMinutes,\n                currentTime.Seconds);\n        }\n        else\n        {\n            trackBarPosition.Value = 0;\n        }\n    }\n\n    private void timer1_Tick_1(object sender, EventArgs e)\n    {\n        if (waveOut != null &amp;&amp; fileWaveStream != null)\n        {\n            TimeSpan currentTime = (waveOut.PlaybackState == PlaybackState.Stopped) ? TimeSpan.Zero : fileWaveStream.CurrentTime;\n            trackBarPosition.Value = Math.Min(trackBarPosition.Maximum, (int)(100 * currentTime.TotalSeconds / fileWaveStream.TotalTime.TotalSeconds));\n            labelCurrentTime.Text = String.Format(&quot;{0:00}:{1:00}&quot;, (int)currentTime.TotalMinutes,\n                currentTime.Seconds);\n        }\n        else\n        {\n            trackBarPosition.Value = 0;\n        }\n    }</code></pre>\n\nprivate void OnOpenFileClick(object sender, EventArgs e)<br />\n<pre><code>    {\n        OpenFileDialog openFileDialog = new OpenFileDialog();\n\n        openFileDialog.FilterIndex = 1;\n        if (openFileDialog.ShowDialog() == DialogResult.OK)\n        {\n            fileName = openFileDialog.FileName;\n        }\n    }\n\n\n\n</code></pre>\n\n",
    "PostedDate": "2014-05-09T02:59:50.533-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1244549",
    "ThreadId": "544796",
    "Html": "Visual Studio should tell you which line the null reference exception was on.<br />\n",
    "PostedDate": "2014-05-12T13:21:19.49-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1247283",
    "ThreadId": "544796",
    "Html": "Can I fix this error ?\r<br />\nGet a solution to me, please!\r<br />\nThanks<br />\n",
    "PostedDate": "2014-05-20T00:58:13.87-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1247285",
    "ThreadId": "544796",
    "Html": "you need to provide us with a stack trace. Call .ToString on the exception and paste the result here<br />\n",
    "PostedDate": "2014-05-20T01:09:42.373-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]