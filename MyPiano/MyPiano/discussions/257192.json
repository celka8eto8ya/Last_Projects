[
  {
    "Id": "610881",
    "ThreadId": "257192",
    "Html": "\r\n<p>Hello<br>\r\n&nbsp;<br>\r\nI'm a beginer in Csharp and I'm trying to developpe using NAudio.I found in NAudio site a code which gives me the possibility to playback sound.<br>\r\nIn my case I will create three buttons and each button is related to an external sound card,when I click in a button I want to hear sound from the speaker which is related to my sound card( button 1 is related to sound card 1,...).So each function &quot;play back&quot;\r\n should play sound in a specific device.For performance issue it's not very pratic to create a &quot;playback&quot; function for each button (so for each sound card)and my sound allows me to play sound in only a sound card,Please can you help me to correct the code???????\r\n It's very important for me.</p>\r\n<div id=\"premain0\"></div>\r\n<pre id=\"pre0\"><pre>using System;\r\nusing System.Collections.Generic;\r\nusing System.Windows.Forms;\r\nusing NAudio.Wave;\r\nusing NAudio.CoreAudioApi;\r\nnamespace PaGa\r\n{\r\n    public partial class PlaybackForm : Form\r\n    {\r\n        IWavePlayer waveOut;\r\n        string fileName = null;\r\n        WaveStream mainOutputStream;\r\n        WaveChannel32 volumeStream;\r\n        public PlaybackForm()\r\n        {\r\n            InitializeComponent();\r\n        }\r\n        private void buttonPlay_Click(object sender, EventArgs e)\r\n        {\r\n            if (waveOut != null)\r\n            {\r\n                if (waveOut.PlaybackState == PlaybackState.Playing)\r\n                {\r\n                    return;\r\n                }\r\n                else if (waveOut.PlaybackState == PlaybackState.Paused)\r\n                {\r\n                    waveOut.Play();\r\n                    return;\r\n                }\r\n            }\r\n            // we are in a stopped state\r\n            // TODO: only re-initialise if necessary\r\n            if (String.IsNullOrEmpty(fileName))\r\n            {\r\n                toolStripButtonOpenFile_Click(sender, e);\r\n            }\r\n            if (String.IsNullOrEmpty(fileName))\r\n            {\r\n                return;\r\n            }\r\n            try\r\n            {\r\n                CreateWaveOut();\r\n            }\r\n            catch (Exception driverCreateException)\r\n            {\r\n                MessageBox.Show(String.Format(&quot;{0}&quot;, driverCreateException.Message));\r\n                return;\r\n            }\r\n            mainOutputStream = CreateInputStream(fileName);\r\n            trackBarPosition.Maximum = (int)mainOutputStream.TotalTime.TotalSeconds;\r\n            labelTotalTime.Text = String.Format(&quot;{0:00}:{1:00}&quot;, (int)mainOutputStream.TotalTime.TotalMinutes,\r\n                mainOutputStream.TotalTime.Seconds);\r\n            trackBarPosition.TickFrequency = trackBarPosition.Maximum / 30;\r\n            try\r\n            {\r\n                waveOut.Init(mainOutputStream);\r\n            }\r\n            catch (Exception initException)\r\n            {\r\n                MessageBox.Show(String.Format(&quot;{0}&quot;, initException.Message), &quot;Error Initializing Output&quot;);\r\n                return;\r\n            }\r\n            // not doing Volume on IWavePlayer any more\r\n            volumeStream.Volume = volumeSlider1.Volume;\r\n            waveOut.Play();\r\n        }\r\n        private WaveStream CreateInputStream(string fileName)\r\n        {\r\n            WaveChannel32 inputStream;\r\n            if (fileName.EndsWith(&quot;.wav&quot;))\r\n            {\r\n                WaveStream readerStream = new WaveFileReader(fileName);\r\n                if (readerStream.WaveFormat.Encoding != WaveFormatEncoding.Pcm)\r\n                {\r\n                    readerStream = WaveFormatConversionStream.CreatePcmStream(readerStream);\r\n                    readerStream = new BlockAlignReductionStream(readerStream);\r\n                }\r\n                if (readerStream.WaveFormat.BitsPerSample != 16)\r\n                {\r\n                    var format = new WaveFormat(readerStream.WaveFormat.SampleRate,\r\n                        16, readerStream.WaveFormat.Channels);\r\n                    readerStream = new WaveFormatConversionStream(format, readerStream);\r\n                }\r\n                inputStream = new WaveChannel32(readerStream);\r\n            }\r\n            else if (fileName.EndsWith(&quot;.mp3&quot;))\r\n            {\r\n                WaveStream mp3Reader = new Mp3FileReader(fileName);\r\n                WaveStream pcmStream = WaveFormatConversionStream.CreatePcmStream(mp3Reader);\r\n                WaveStream blockAlignedStream = new BlockAlignReductionStream(pcmStream);\r\n                inputStream = new WaveChannel32(blockAlignedStream);\r\n            }\r\n            else\r\n            {\r\n                throw new InvalidOperationException(&quot;Unsupported extension&quot;);\r\n            }\r\n            // we are not going into a mixer so we don't need to zero pad\r\n            //((WaveChannel32)inputStream).PadWithZeroes = false;\r\n            volumeStream = inputStream;\r\n            var meteringStream = new MeteringStream(inputStream, inputStream.WaveFormat.SampleRate / 10);\r\n            meteringStream.StreamVolume &#43;= new EventHandler(meteringStream_StreamVolume);\r\n            return meteringStream;\r\n        }\r\n        void meteringStream_StreamVolume(object sender, StreamVolumeEventArgs e)\r\n        {\r\n            volumeMeter1.Amplitude = e.MaxSampleValues[0];\r\n            waveformPainter1.AddMax(e.MaxSampleValues[0]);\r\n            if (e.MaxSampleValues.Length &gt; 1)\r\n            {\r\n                volumeMeter2.Amplitude = e.MaxSampleValues[1];\r\n                waveformPainter2.AddMax(e.MaxSampleValues[1]);\r\n            }\r\n        }\r\n        private void CreateWaveOut()\r\n        {\r\n            CloseWaveOut();\r\n            int latency = (int)comboBoxLatency.SelectedItem;\r\n            //if (radioButtonWaveOut.Checked)\r\n            {\r\n                //WaveCallbackInfo callbackInfo = checkBoxWaveOutWindow.Checked ?\r\n                WaveCallbackInfo callbackInfo = WaveCallbackInfo.FunctionCallback();\r\n                // WaveCallbackInfo callbackInfo = WaveCallbackInfo.FunctionCallback();\r\n                // WaveCallbackInfo.NewWindow(): WaveCallbackInfo.FunctionCallback();\r\n                WaveOut outputDevice = new WaveOut(callbackInfo);\r\n                outputDevice.DesiredLatency = latency;\r\n                waveOut = outputDevice;\r\n            }\r\n        }\r\n        private void CloseWaveOut()\r\n        {\r\n            if (waveOut != null)\r\n            {\r\n                waveOut.Stop();\r\n            }\r\n            if (mainOutputStream != null)\r\n            {\r\n                // this one really closes the file and ACM conversion\r\n                volumeStream.Close();\r\n                volumeStream = null;\r\n                // this one does the metering stream\r\n                mainOutputStream.Close();\r\n                mainOutputStream = null;\r\n            }\r\n            if (waveOut != null)\r\n            {\r\n                waveOut.Dispose();\r\n                waveOut = null;\r\n            }\r\n        }\r\n        private void Form1_FormClosing(object sender, FormClosingEventArgs e)\r\n        {\r\n            CloseWaveOut();\r\n        }\r\n        private void Form1_Load(object sender, EventArgs e)\r\n        {\r\n            comboBoxLatency.Items.Add(25);\r\n            comboBoxLatency.Items.Add(50);\r\n            comboBoxLatency.Items.Add(100);\r\n            comboBoxLatency.Items.Add(150);\r\n            comboBoxLatency.Items.Add(200);\r\n            comboBoxLatency.Items.Add(300);\r\n            comboBoxLatency.Items.Add(400);\r\n            comboBoxLatency.Items.Add(500);\r\n            comboBoxLatency.SelectedIndex = 5;\r\n        }\r\n        private void buttonPause_Click(object sender, EventArgs e)\r\n        {\r\n            if (waveOut != null)\r\n            {\r\n                if (waveOut.PlaybackState == PlaybackState.Playing)\r\n                {\r\n                    waveOut.Pause();\r\n                }\r\n            }\r\n        }\r\n        private void volumeSlider1_VolumeChanged(object sender, EventArgs e)\r\n        {\r\n            if (mainOutputStream != null)\r\n            {\r\n                volumeStream.Volume = volumeSlider1.Volume;\r\n            }\r\n        }\r\n        private void buttonControlPanel_Click(object sender, EventArgs e)\r\n        {\r\n            AsioOut asio = waveOut as AsioOut;\r\n            if (asio != null)\r\n            {\r\n                asio.ShowControlPanel();\r\n            }\r\n        }\r\n        private void buttonStop_Click(object sender, EventArgs e)\r\n        {\r\n            if (waveOut != null)\r\n            {\r\n                waveOut.Stop();\r\n                trackBarPosition.Value = 0;\r\n            }\r\n        }\r\n        private void timer1_Tick(object sender, EventArgs e)\r\n        {\r\n            if (waveOut != null)\r\n            {\r\n                if (mainOutputStream.Position &gt;= mainOutputStream.Length)\r\n                {\r\n                    buttonStop_Click(sender, e);\r\n                }\r\n                else\r\n                {\r\n                    TimeSpan currentTime = mainOutputStream.CurrentTime;\r\n                    trackBarPosition.Value = (int)currentTime.TotalSeconds;\r\n                    labelCurrentTime.Text = String.Format(&quot;{0:00}:{1:00}&quot;, (int)currentTime.TotalMinutes,\r\n                        currentTime.Seconds);\r\n                }\r\n            }\r\n        }\r\n        private void trackBarPosition_Scroll(object sender, EventArgs e)\r\n        {\r\n            if (waveOut != null)\r\n            {\r\n                mainOutputStream.CurrentTime = TimeSpan.FromSeconds(trackBarPosition.Value);\r\n            }\r\n        }\r\n        private void toolStripButtonOpenFile_Click(object sender, EventArgs e)\r\n        {\r\n            OpenFileDialog openFileDialog = new OpenFileDialog();\r\n            openFileDialog.Filter = &quot;All Supported Files (*.wav, *.mp3)|*.wav;*.mp3|All Files (*.*)|*.*&quot;;\r\n            openFileDialog.FilterIndex = 1;\r\n            if (openFileDialog.ShowDialog() == DialogResult.OK)\r\n            {\r\n                fileName = openFileDialog.FileName;\r\n            }\r\n        }\r\n \r\n    }\r\n}\r\n \r\n</pre>\r\n<br></pre>\r\n<p>Thank you in advance.<br>\r\nGood Day.</p>\r\n",
    "PostedDate": "2011-05-11T05:11:46.37-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]