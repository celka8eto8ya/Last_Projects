[
  {
    "Id": "413412",
    "ThreadId": "203605",
    "Html": "<p>I've sent Mark a mail, but I figured it wouldn't harm to drop it here in the discussions as well since I saw posts on his blog of other people wanting to do loopback-capturing.<br /> I've implemented a Wasapi loopback capture class for NAudio, look down for code.</p>\n<p>To use in NAudioDemo, modify RecordingForm.cs to use :</p>\n<div style=\"color: black; background-color: white;\">\n<pre>MMDeviceCollection deviceCol = deviceEnum.EnumerateAudioEndPoints(DataFlow.<strong>Render</strong>, DeviceState.Active);\n</pre>\n</div>\n<p>and</p>\n<div style=\"color: black; background-color: white;\">\n<pre>waveIn = <span style=\"color: blue;\">new</span> <strong>WasapiLoopbackCapture</strong>((MMDevice)comboDevices.SelectedItem);</pre>\n</div>\n<p>I hope it's of use to anyone.<br /> Have fun,</p>\n<p>Lennart Denninger.</p>\n<p>&nbsp;</p>\n<p>---&lt;Cut Here&gt;---</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: green;\">/*\n  LICENSE\n  -------\n  Copyright (C) 2007 Ray Molenkamp\n \n  Windows Vista / Windows 7 Loopback implementation by\n  L.Denninger\n \n  Loopback allows to capture all audio played by Windows.\n  Basicly it's a software implementation of the \"Record from stereomix\" functionality,\n  that some audiodrivers don't seem to supply anymore.\n\n  This source code is provided 'as-is', without any express or implied\n  warranty.  In no event will the authors be held liable for any damages\n  arising from the use of this source code or the software it produces.\n\n  Permission is granted to anyone to use this source code for any purpose,\n  including commercial applications, and to alter it and redistribute it\n  freely, subject to the following restrictions:\n\n  1. The origin of this source code must not be misrepresented; you must not\n     claim that you wrote the original source code.  If you use this source code\n     in a product, an acknowledgment in the product documentation would be\n     appreciated but is not required.\n  2. Altered source versions must be plainly marked as such, and must not be\n     misrepresented as being the original source code.\n  3. This notice may not be removed or altered from any source distribution.\n*/</span>\n\n<span style=\"color: blue;\">using</span> System;\n<span style=\"color: blue;\">using</span> System.Collections.Generic;\n<span style=\"color: blue;\">using</span> System.Text;\n\n<span style=\"color: blue;\">using</span> NAudio.Wave;\n<span style=\"color: blue;\">using</span> System.Threading;\n<span style=\"color: blue;\">using</span> System.Diagnostics;\n<span style=\"color: blue;\">using</span> System.Runtime.InteropServices;\n\n<span style=\"color: blue;\">namespace</span> NAudio.CoreAudioApi\n{\n    <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\n    <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Audio Capture using Wasapi</span>\n    <span style=\"color: gray;\">///</span><span style=\"color: green;\"> See http://msdn.microsoft.com/en-us/library/dd370800%28VS.85%29.aspx</span>\n    <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> WasapiLoopbackCapture : IWaveIn\n    {\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">const</span> <span style=\"color: blue;\">long</span> REFTIMES_PER_SEC = 10000000;\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">const</span> <span style=\"color: blue;\">long</span> REFTIMES_PER_MILLISEC = 10000;\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">volatile</span> <span style=\"color: blue;\">bool</span> stop;\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">byte</span>[] recordBuffer;\n        <span style=\"color: blue;\">private</span> Thread captureThread;\n        <span style=\"color: blue;\">private</span> AudioClient audioClient;\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">int</span> bytesPerFrame;\n\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Indicates recorded data is available </span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">event</span> EventHandler&lt;WaveInEventArgs&gt; DataAvailable;\n\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Indicates that all recorded data has now been received.</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">event</span> EventHandler RecordingStopped;\n\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Initialises a new instance of the WASAPI capture class</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\n        <span style=\"color: blue;\">public</span> WasapiLoopbackCapture() :\n            <span style=\"color: blue;\">this</span>(GetDefaultCaptureDevice())\n        {\n        }\n\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Initialises a new instance of the WASAPI capture class</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"captureDevice\"&gt;</span><span style=\"color: green;\">Capture device to use&lt;/param&gt;</span>\n        <span style=\"color: blue;\">public</span> WasapiLoopbackCapture(MMDevice captureDevice)\n        {\n            <span style=\"color: blue;\">this</span>.audioClient = captureDevice.AudioClient;\n        }\n\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Recording wave format</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\n        <span style=\"color: blue;\">public</span> WaveFormat WaveFormat\n        {\n            <span style=\"color: blue;\">get</span>\n            {\n                <span style=\"color: blue;\">return</span> audioClient.MixFormat;\n            }\n            <span style=\"color: blue;\">set</span>\n            {\n                <span style=\"color: blue;\">throw</span> <span style=\"color: blue;\">new</span> Exception(<span style=\"color: #a31515;\">\"Setting of Wave Format not supported for loopback device !\"</span>);\n            }\n        }\n\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Gets the default audio capture device</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;returns&gt;</span><span style=\"color: green;\">The default audio capture device&lt;/returns&gt;</span>\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> MMDevice GetDefaultCaptureDevice()\n        {\n            MMDeviceEnumerator devices = <span style=\"color: blue;\">new</span> MMDeviceEnumerator();\n            <span style=\"color: blue;\">return</span> devices.GetDefaultAudioEndpoint(DataFlow.Render, Role.Multimedia);\n        }\n\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> InitializeCaptureDevice()\n        {\n            <span style=\"color: blue;\">long</span> requestedDuration = REFTIMES_PER_MILLISEC * 100;\n\n            audioClient.Initialize(AudioClientShareMode.Shared,\n                AudioClientStreamFlags.Loopback,\n                requestedDuration,\n                0,\n                WaveFormat,\n                Guid.Empty);\n\n            <span style=\"color: blue;\">int</span> bufferFrameCount = audioClient.BufferSize;\n            bytesPerFrame = WaveFormat.BlockAlign;\n            recordBuffer = <span style=\"color: blue;\">new</span> <span style=\"color: blue;\">byte</span>[bufferFrameCount * bytesPerFrame];\n            Debug.WriteLine(<span style=\"color: blue;\">string</span>.Format(<span style=\"color: #a31515;\">\"record buffer size = {0}\"</span>, recordBuffer.Length));\n        }\n\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Start Recording</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> StartRecording()\n        {\n            InitializeCaptureDevice();\n            ThreadStart start = <span style=\"color: blue;\">delegate</span> { <span style=\"color: blue;\">this</span>.CaptureThread(<span style=\"color: blue;\">this</span>.audioClient); };\n            <span style=\"color: blue;\">this</span>.captureThread = <span style=\"color: blue;\">new</span> Thread(start);\n\n            Debug.WriteLine(<span style=\"color: #a31515;\">\"Thread starting...\"</span>);\n            <span style=\"color: blue;\">this</span>.stop = <span style=\"color: blue;\">false</span>;\n            <span style=\"color: blue;\">this</span>.captureThread.Start();\n        }\n\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Stop Recording</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> StopRecording()\n        {\n            <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">this</span>.captureThread != <span style=\"color: blue;\">null</span>)\n            {\n                <span style=\"color: blue;\">this</span>.stop = <span style=\"color: blue;\">true</span>;\n\n                Debug.WriteLine(<span style=\"color: #a31515;\">\"Thread ending...\"</span>);\n\n                <span style=\"color: green;\">// wait for thread to end</span>\n                <span style=\"color: blue;\">this</span>.captureThread.Join();\n                <span style=\"color: blue;\">this</span>.captureThread = <span style=\"color: blue;\">null</span>;\n\n                Debug.WriteLine(<span style=\"color: #a31515;\">\"Done.\"</span>);\n\n                <span style=\"color: blue;\">this</span>.stop = <span style=\"color: blue;\">false</span>;\n            }\n        }\n\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> CaptureThread(AudioClient client)\n        {\n            Debug.WriteLine(client.BufferSize);\n            <span style=\"color: blue;\">int</span> bufferFrameCount = audioClient.BufferSize;\n\n            <span style=\"color: green;\">// Calculate the actual duration of the allocated buffer.</span>\n            <span style=\"color: blue;\">long</span> actualDuration = (<span style=\"color: blue;\">long</span>)((<span style=\"color: blue;\">double</span>)REFTIMES_PER_SEC *\n                             bufferFrameCount / WaveFormat.SampleRate);\n            <span style=\"color: blue;\">int</span> sleepMilliseconds = (<span style=\"color: blue;\">int</span>)(actualDuration / REFTIMES_PER_MILLISEC / 2);\n\n            AudioCaptureClient capture = client.AudioCaptureClient;\n            client.Start();\n\n            <span style=\"color: blue;\">try</span>\n            {\n                Debug.WriteLine(<span style=\"color: blue;\">string</span>.Format(<span style=\"color: #a31515;\">\"sleep: {0} ms\"</span>, sleepMilliseconds));\n                <span style=\"color: blue;\">while</span> (!<span style=\"color: blue;\">this</span>.stop)\n                {\n                    Thread.Sleep(sleepMilliseconds);\n                    ReadNextPacket(capture);\n                }\n\n                client.Stop();\n\n                <span style=\"color: blue;\">if</span> (RecordingStopped != <span style=\"color: blue;\">null</span>)\n                {\n                    RecordingStopped(<span style=\"color: blue;\">this</span>, EventArgs.Empty);\n                }\n            }\n            <span style=\"color: blue;\">finally</span>\n            {\n                <span style=\"color: blue;\">if</span> (capture != <span style=\"color: blue;\">null</span>)\n                {\n                    capture.Dispose();\n                }\n                <span style=\"color: blue;\">if</span> (client != <span style=\"color: blue;\">null</span>)\n                {\n                    client.Dispose();\n                }\n\n                client = <span style=\"color: blue;\">null</span>;\n                capture = <span style=\"color: blue;\">null</span>;\n            }\n\n            System.Diagnostics.Debug.WriteLine(<span style=\"color: #a31515;\">\"stop wasapi\"</span>);\n        }\n\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> ReadNextPacket(AudioCaptureClient capture)\n        {\n            IntPtr buffer;\n            <span style=\"color: blue;\">int</span> framesAvailable;\n            AudioClientBufferFlags flags;\n            <span style=\"color: blue;\">int</span> packetSize = capture.GetNextPacketSize();\n            <span style=\"color: blue;\">int</span> recordBufferOffset = 0;\n            <span style=\"color: green;\">//Debug.WriteLine(string.Format(\"packet size: {0} samples\", packetSize / 4));</span>\n\n            <span style=\"color: blue;\">while</span> (packetSize != 0)\n            {\n                buffer = capture.GetBuffer(<span style=\"color: blue;\">out</span> framesAvailable, <span style=\"color: blue;\">out</span> flags);\n\n                <span style=\"color: blue;\">int</span> bytesAvailable = framesAvailable * bytesPerFrame;\n\n                <span style=\"color: green;\">//Debug.WriteLine(string.Format(\"got buffer: {0} frames\", framesAvailable));</span>\n\n                <span style=\"color: green;\">// if not silence...</span>\n                <span style=\"color: blue;\">if</span> ((flags &amp; AudioClientBufferFlags.Silent) != AudioClientBufferFlags.Silent)\n                {\n                    Marshal.Copy(buffer, recordBuffer, recordBufferOffset, bytesAvailable);\n                }\n                <span style=\"color: blue;\">else</span>\n                {\n                    Array.Clear(recordBuffer, recordBufferOffset, bytesAvailable);\n                }\n                recordBufferOffset += bytesAvailable;\n                capture.ReleaseBuffer(framesAvailable);\n                packetSize = capture.GetNextPacketSize();\n            }\n            <span style=\"color: blue;\">if</span> (DataAvailable != <span style=\"color: blue;\">null</span>)\n            {\n                DataAvailable(<span style=\"color: blue;\">this</span>, <span style=\"color: blue;\">new</span> WaveInEventArgs(recordBuffer, recordBufferOffset));\n            }\n        }\n\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Dispose</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> Dispose()\n        {\n            StopRecording();\n        }\n    }\n}\n\n</pre>\n</div>",
    "PostedDate": "2010-03-02T15:19:53.273-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "495397",
    "ThreadId": "203605",
    "Html": "<p>This is great! &nbsp;Just what I was looking for. &nbsp;I have implemented it in my own program and it is working. &nbsp;One question. &nbsp;If no sound is playing in the speakers the resulting wave file is only 80 bytes long (wav header and nothing else). &nbsp;If I then start playing sound, then and only then does it record sound. &nbsp;Is this a feature or a bug? :)</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks</p>",
    "PostedDate": "2010-09-18T06:37:24.083-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "495438",
    "ThreadId": "203605",
    "Html": "<p>Also I'm trying to convert the resulting wav file into mp3. &nbsp;I'm using a c# wrapper for lame_enc I found (http://www.codeproject.com/KB/audio-video/MP3Compressor.aspx)&nbsp;but it doesn't seem to want the wave files generated by the loopback capture.</p>\r\n<p>I'm thinking it has something to do with the 32bit wave files generated but I'm not sure. &nbsp;Is there any way to adjust the format of the wave file capture, play around with the resulting bit rate (bit, khz, channels etc)?</p>",
    "PostedDate": "2010-09-18T09:53:13.627-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "495445",
    "ThreadId": "203605",
    "Html": "<p>I probably found the root of the silence issue, seems like a nice feature:</p>\r\n<p>// if not silence... &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>if ((flags &amp; AudioClientBufferFlags.Silent) != AudioClientBufferFlags.Silent)</p>\r\n<p>&nbsp;</p>\r\n<p>Still trying to figure out why lame won't accept the output wave</p>",
    "PostedDate": "2010-09-18T10:31:49.76-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "532999",
    "ThreadId": "203605",
    "Html": "\r\n<p>I'm having issues with buffer overruns in above code. The following proposal does not catch all&nbsp;possibilities, but I could not experience any issues any more.</p>\r\n<p>It would be great, if someone could direct me on the right way, to create a stream compatible for DLNA &quot;http-get:*:audio/L16;rate=44100;channels=2:DLNA.ORG_PN=LPCM&quot; from the captured data.</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>                <span style=\"color:blue\">while</span> (!<span style=\"color:blue\">this</span>.stop)\r\n                {\r\n                    <span style=\"color:blue\">if</span> (!ReadNextPacket(capture))\r\n                        Thread.Sleep(sleepMilliseconds);\r\n                }\r\n\r\n</pre>\r\n</div>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>        <span style=\"color:blue\">private</span> <span style=\"color:blue\">bool</span> ReadNextPacket(AudioCaptureClient capture)\r\n        {\r\n            <span style=\"color:blue\">bool</span> moreData = <span style=\"color:blue\">false</span>;\r\n            IntPtr buffer;\r\n            <span style=\"color:blue\">int</span> framesAvailable;\r\n            AudioClientBufferFlags flags;\r\n            <span style=\"color:blue\">int</span> packetSize = capture.GetNextPacketSize();\r\n            <span style=\"color:blue\">int</span> recordBufferOffset = 0;\r\n            <span style=\"color:green\">//Debug.WriteLine(string.Format(&quot;packet size: {0} samples&quot;, packetSize / 4));</span>\r\n\r\n            <span style=\"color:blue\">while</span> (packetSize != 0)\r\n            {\r\n                buffer = capture.GetBuffer(<span style=\"color:blue\">out</span> framesAvailable, <span style=\"color:blue\">out</span> flags);\r\n\r\n                <span style=\"color:blue\">int</span> bytesAvailable = framesAvailable * bytesPerFrame;\r\n\r\n                Debug.WriteLine(<span style=\"color:blue\">string</span>.Format(<span style=\"color:#a31515\">&quot;got buffer: {0} frames; Offset={1}&quot;</span>, framesAvailable, recordBufferOffset));\r\n\r\n                <span style=\"color:green\">// if not silence...</span>\r\n                <span style=\"color:blue\">if</span> ((flags &amp; AudioClientBufferFlags.Silent) != AudioClientBufferFlags.Silent)\r\n                {\r\n                    Marshal.Copy(buffer, recordBuffer, recordBufferOffset, bytesAvailable);\r\n                }\r\n                <span style=\"color:blue\">else</span>\r\n                {\r\n                    Array.Clear(recordBuffer, recordBufferOffset, bytesAvailable);\r\n                }\r\n                recordBufferOffset &#43;= bytesAvailable;\r\n                capture.ReleaseBuffer(framesAvailable);\r\n\r\n                <span style=\"color:blue\">if</span> (recordBufferOffset &gt;= recordBuffer.Length)\r\n                {\r\n                    Debug.WriteLine(<span style=\"color:#a31515\">&quot;would overflow&quot;</span>);\r\n                    moreData = <span style=\"color:blue\">true</span>;\r\n                    <span style=\"color:blue\">break</span>;\r\n                }\r\n\r\n                packetSize = capture.GetNextPacketSize();\r\n            }\r\n            <span style=\"color:blue\">if</span> (DataAvailable != <span style=\"color:blue\">null</span>)\r\n            {\r\n                DataAvailable(<span style=\"color:blue\">this</span>, <span style=\"color:blue\">new</span> WaveInEventArgs(recordBuffer, recordBufferOffset));\r\n            }\r\n\r\n            <span style=\"color:blue\">return</span> moreData;\r\n        }\r\n</pre>\r\n</div>\r\n<p>Thanks,<br>\r\nSteffen&nbsp;</p>\r\n",
    "PostedDate": "2010-12-08T10:19:18.877-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "536179",
    "ThreadId": "203605",
    "Html": "\r\n<p>Allskoner,</p>\r\n<p>I am trying to do the same thing as you in regards to converting to mp3 stream. &nbsp;I then send it to a device that is waiting for mp3 files to plays. &nbsp;The device doesn't play anything. &nbsp;Have you resolved you issue? &nbsp;Any help would be greatly\r\n appreciated.</p>\r\n<p>Thanks</p>\r\n<p>Mike</p>\r\n",
    "PostedDate": "2010-12-15T08:09:56.983-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "551240",
    "ThreadId": "203605",
    "Html": "\r\n<p>Hello!</p>\r\n<p>Has anyone figured out how to capture the loopback in 16 bit? I'm trying to find a way to convert the 'recordBuffer' to 16 bit on the fly. Any help is really appreciated!</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks</p>\r\n<p>R.</p>\r\n",
    "PostedDate": "2011-01-18T06:43:32.983-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "551336",
    "ThreadId": "203605",
    "Html": "\r\n<p>WASAPI won't let you capture in 16 bit - you'll have to convert it yourself. Every four bytes captured should be turned into a float sample value in the range -1 to 1. Then multiply by 32768 and cast to a short to get a 16 bit integer sample value.</p>\r\n",
    "PostedDate": "2011-01-18T09:06:06.603-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "551635",
    "ThreadId": "203605",
    "Html": "\r\n<p>Thanks for taking the time to answer my question Mark! That was exactly what I needed!\r\n<strong>It works beautifully!</strong></p>\r\n<p>Your help is greatly appreciated!</p>\r\n<p>R.</p>\r\n",
    "PostedDate": "2011-01-18T18:14:16.293-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "575902",
    "ThreadId": "203605",
    "Html": "<p>﻿The WasapiLoopbackCapture did the trick for me too, as long as I play it with Windows Media Player.</p>\r\n<p>If I play it with the NAudio WaveOut demo app, an exception is thrown in AcmStream.SuggestPcmFormat. \"NoDriver calling acmFormatSugget\".</p>\r\n<p>NAudio is well designed, which is such a nice change from the C++ codebase I was experimenting with previously.</p>",
    "PostedDate": "2011-03-04T19:48:37.597-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "576718",
    "ThreadId": "203605",
    "Html": "<p>what format are you trying to convert from and to? The no driver error means there is no ACM codec installed on your machine that can do the requested conversion?</p>\r\n<p>Mark</p>",
    "PostedDate": "2011-03-07T09:16:38.8-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "717146",
    "ThreadId": "203605",
    "Html": "<p>by the way, WasapiLoopbackCapture is now part of NAudio in the latest code (for NAudio 1.6)</p>",
    "PostedDate": "2011-12-26T02:51:25.39-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1355999",
    "ThreadId": "203605",
    "Html": "I have lot of problem brohter pls help me. i add all above code in class and recieve build time error. pls guid me how i can start and stop recording from window form in c#???\r<br />\n<br />\nError\t1\t'NAudio.CoreAudioApi.WasapiLoopbackCapture' does not implement interface member 'NAudio.Wave.IWaveIn.RecordingStopped'. 'NAudio.CoreAudioApi.WasapiLoopbackCapture.RecordingStopped' cannot implement 'NAudio.Wave.IWaveIn.RecordingStopped' because it does not have the matching return type of 'System.EventHandler&lt;NAudio.Wave.StoppedEventArgs&gt;'.\tE:\\Student\\std\\proj\\WMP\\WMP\\WMP\\WasapiLoopbackCapture.cs\t17\t18\tWMP<br />\n",
    "PostedDate": "2015-02-26T07:20:32.747-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1356239",
    "ThreadId": "203605",
    "Html": "You should be referencing the latest version of NAudio rather than creating your own copy of WasapiLoopbackCapture.<br />\n",
    "PostedDate": "2015-02-26T23:37:21.763-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1356313",
    "ThreadId": "203605",
    "Html": "Hi markhealth thnk you . i am making a c# .net window application. add reference of 1.7.2.19 version. i want to record what i hear. can you guid me pls how i start,stop and save on hard drive in window form using C# ??? thnk you<br />\n",
    "PostedDate": "2015-02-27T03:04:10.09-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1358851",
    "ThreadId": "203605",
    "Html": "Yes, use WasapiLoopbackCapture to capture the audio, and WaveFileWriter to save it to disk. Look at the NAudio demo application source code if you want to see examples of how to do this.<br />\n",
    "PostedDate": "2015-03-02T09:00:04-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]