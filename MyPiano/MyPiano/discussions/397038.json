[
  {
    "Id": "918059",
    "ThreadId": "397038",
    "Html": "\r\n<p>I am very familar with VolumeWaveProvider16 and how to use it, but how can I change the volume of an 8 bit IWaveProvider?</p>\r\n<p>I am pulling audio from the microphone jack via WaveInEvent and then I am sending it back out using DirectSoundOut.&nbsp; I am used to doing something like:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>waveOut = <span style=\"color:blue\">new</span> DirectSoundOut(DirectSoundOut.DSDEVID_DefaultPlayback, 300);\r\nbufferedWaveProvider = <span style=\"color:blue\">new</span> BufferedWaveProvider(waveIn.WaveFormat);\r\nvolumeWaveProvider = <span style=\"color:blue\">new</span> VolumeWaveProvider16(bufferedWaveProvider);\r\nVolume = volume; <span style=\"color:green\">// Passed as an argument</span>\r\nwaveOut.Init(volumeWaveProvider);\r\nwaveOut.Play();\r\n\r\n</pre>\r\n</div>\r\n<p>But obviously this doesn't work with 8 bit audio.&nbsp; How do I do that?</p>\r\n<p>For a variety of reasons, I prefer to use DirectSoundOut rather than WaveOut or WaveOutEvents.</p>\r\n",
    "PostedDate": "2012-09-26T12:58:08.947-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "919575",
    "ThreadId": "397038",
    "Html": "<p>you'd need to create a VolumeWaveProvider8. Then adjust the value of each byte according to the volume you've set. The audio quality is likely to be very poor, as 8 bit audio has extremely limited dynamic range, and reducing the volume will only make it worse.</p>",
    "PostedDate": "2012-09-29T23:33:25.157-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "919961",
    "ThreadId": "397038",
    "Html": "\r\n<p>In my case I am recording audio from an AM radio receiver with a 3 KHz filter - so the audio quality is low to begin with.&nbsp; I ended up creating a new class called VolumeWaveProvider which accepts an 8 bit or 16 bit PCM source.&nbsp; Did this by making\r\n the following changes to your VolumeWaveProvider16 class:</p>\r\n<div style=\"background-color:white; color:black\">\r\n<pre><span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n<span style=\"color:gray\">/// </span><span style=\"color:green\">Constructs a new VolumeWaveProvider</span>\r\n<span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n<span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;sourceProvider&quot;&gt;</span><span style=\"color:green\">Source provider, must be 8 or 16 bit PCM&lt;/param&gt;</span>\r\n<span style=\"color:blue\">public</span> VolumeWaveProvider(IWaveProvider sourceProvider)\r\n{\r\n    <span style=\"color:blue\">this</span>.Volume = 1.0f;\r\n    <span style=\"color:blue\">this</span>.sourceProvider = sourceProvider;\r\n    <span style=\"color:blue\">if</span> (sourceProvider.WaveFormat.Encoding != WaveFormatEncoding.Pcm)\r\n        <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> ArgumentException(<span style=\"color:#a31515\">&quot;Expecting PCM input&quot;</span>);\r\n    <span style=\"color:blue\">if</span> (sourceProvider.WaveFormat.BitsPerSample != 8 &amp;&amp; sourceProvider.WaveFormat.BitsPerSample != 16)\r\n        <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> ArgumentException(<span style=\"color:#a31515\">&quot;Expecting 8 or 16 bit&quot;</span>);\r\n}\r\n</pre>\r\n</div>\r\n<p>...</p>\r\n<div style=\"background-color:white; color:black\">\r\n<pre><span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n<span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets volume. </span>\r\n<span style=\"color:gray\">/// </span><span style=\"color:green\">1.0 is full scale, 0.0 is silence</span>\r\n<span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">float</span> Volume\r\n{\r\n    <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> volume; }\r\n    <span style=\"color:blue\">set</span>\r\n    {\r\n        <span style=\"color:blue\">if</span> (value &lt; 0) value = 0;\r\n        <span style=\"color:blue\">if</span> (value &gt; 1F) value = 1F;\r\n        volume = value; \r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p>...</p>\r\n<div style=\"background-color:white; color:black\">\r\n<pre><span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n<span style=\"color:gray\">///</span><span style=\"color:green\"> Read bytes from this WaveProvider</span>\r\n<span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n<span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;buffer&quot;&gt;</span><span style=\"color:green\">Buffer to read into&lt;/param&gt;</span>\r\n<span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;offset&quot;&gt;</span><span style=\"color:green\">Offset within buffer to read to&lt;/param&gt;</span>\r\n<span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;count&quot;&gt;</span><span style=\"color:green\">Bytes desired&lt;/param&gt;</span>\r\n<span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span><span style=\"color:green\">Bytes read&lt;/returns&gt;</span>\r\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">int</span> Read(<span style=\"color:blue\">byte</span>[] buffer, <span style=\"color:blue\">int</span> offset, <span style=\"color:blue\">int</span> count)\r\n{\r\n    <span style=\"color:green\">// always read from the source</span>\r\n    <span style=\"color:blue\">int</span> bytesRead = sourceProvider.Read(buffer, offset, count);\r\n    <span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span>.volume == 0.0f)\r\n    {\r\n        <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> n = 0; n &lt; bytesRead; n&#43;&#43;)\r\n        {\r\n            buffer[offset&#43;&#43;] = 0;\r\n        }\r\n    }\r\n    <span style=\"color:blue\">else</span> <span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span>.volume != 1.0f)\r\n    {\r\n        <span style=\"color:blue\">if</span> (sourceProvider.WaveFormat.BitsPerSample == 8)\r\n        {\r\n            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> n = 0; n &lt; bytesRead; n&#43;&#43;)\r\n                buffer[offset&#43;&#43;] = (<span style=\"color:blue\">byte</span>)(buffer[offset] * <span style=\"color:blue\">this</span>.volume);\r\n        }\r\n        <span style=\"color:blue\">else</span>\r\n        {\r\n            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> n = 0; n &lt; bytesRead; n &#43;= 2)\r\n            {\r\n                <span style=\"color:blue\">short</span> sample = (<span style=\"color:blue\">short</span>)((buffer[offset &#43; 1] &lt;&lt; 8) | buffer[offset]);\r\n                <span style=\"color:blue\">var</span> newSample = sample * <span style=\"color:blue\">this</span>.volume;\r\n                sample = (<span style=\"color:blue\">short</span>)newSample;\r\n\r\n                buffer[offset&#43;&#43;] = (<span style=\"color:blue\">byte</span>)(sample &amp; 0xFF);\r\n                buffer[offset&#43;&#43;] = (<span style=\"color:blue\">byte</span>)(sample &gt;&gt; 8);\r\n            }\r\n        }\r\n    }\r\n    <span style=\"color:blue\">return</span> bytesRead;\r\n}\r\n</pre>\r\n</div>\r\n<p>I specificially made mine disallow volumes below 0F and above 1F, although your class allows volumes above 1F.</p>\r\n",
    "PostedDate": "2012-10-01T04:46:34.953-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]