[
  {
    "Id": "640992",
    "ThreadId": "264803",
    "Html": "<p>Hello,</p>\n<p>I have an application which receives messages over the network. These messages can be:</p>\n<ul>\n<li>concatenate wav files specified in the message, and play the result (announcement) </li>\n<li>stop playing of the specified announcement. </li>\n</ul>\n<p>This applicition sometimes (order of magnitude: 1 time per 1000 announcement) throws this Exception: NAudio.MmException: WaveStillPlaying calling waveOutWrite</p>\n<p>Thank you in advance:</p>\n<p>Ferenc</p>\n<p>Details:</p>\n<ul>\n<li>.NET 4.0 </li>\n<li>Windows PosReady 2009 </li>\n<li>Windows Forms application </li>\n<li>WaveOut with WaveCallbackInfo.NewWindow()</li>\n<li>After the Exception throwed the app is in a working state the subsequent announcemnts are fine, but i don't know what happens with the announcement which throws the exception </li>\n<li>Exception, and code: </li>\n</ul>\n<p>&nbsp;</p>\n<p>See the end of this message for details on invoking <br /> just-in-time (JIT) debugging instead of this dialog box.<br /> <br /> ************** Exception Text **************<br /> NAudio.MmException: WaveStillPlaying calling waveOutWrite<br /> &nbsp;&nbsp; at NAudio.Wave.WaveOutBuffer.WriteToWaveOut() in E:\\aktualis_fejlesztesek\\pis-kofe201\\Naudio-1.4b\\NAudio\\Wave\\WaveStreams\\WaveOutBuffer.cs:line 154<br /> &nbsp;&nbsp; at NAudio.Wave.WaveOutBuffer.OnDone() in E:\\aktualis_fejlesztesek\\pis-kofe201\\Naudio-1.4b\\NAudio\\Wave\\WaveStreams\\WaveOutBuffer.cs:line 118<br /> &nbsp;&nbsp; at NAudio.Wave.WaveOut.Callback(IntPtr hWaveOut, WaveMessage uMsg, IntPtr dwInstance, WaveHeader wavhdr, IntPtr dwReserved) in E:\\aktualis_fejlesztesek\\pis-kofe201\\Naudio-1.4b\\NAudio\\Wave\\WaveOutputs\\WaveOut.cs:line 377<br /> &nbsp;&nbsp; at NAudio.Wave.WaveWindow.WndProc(Message&amp; m) in E:\\aktualis_fejlesztesek\\pis-kofe201\\Naudio-1.4b\\NAudio\\Wave\\MmeInterop\\WaveWindow.cs:line 64<br /> &nbsp;&nbsp; at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message&amp; m)<br /> &nbsp;&nbsp; at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message&amp; m)<br /> &nbsp;&nbsp; at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)<br /> <br /> <br /> ************** Loaded Assemblies **************<br /> mscorlib<br /> &nbsp;&nbsp;&nbsp; Assembly Version: 4.0.0.0<br /> &nbsp;&nbsp;&nbsp; Win32 Version: 4.0.30319.1 (RTMRel.030319-0100)<br /> &nbsp;&nbsp;&nbsp; CodeBase: file:///C:/Windows/Microsoft.NET/Framework/v4.0.30319/mscorlib.dll<br /> ----------------------------------------<br /> PisAnn2<br /> &nbsp;&nbsp;&nbsp; Assembly Version: 1.0.0.0<br /> &nbsp;&nbsp;&nbsp; Win32 Version: 1.0.0.0<br /> &nbsp;&nbsp;&nbsp; CodeBase: file:///D:/PIS/Release2/PisAnn2.exe<br /> ----------------------------------------<br /> System.Windows.Forms<br /> &nbsp;&nbsp;&nbsp; Assembly Version: 4.0.0.0<br /> &nbsp;&nbsp;&nbsp; Win32 Version: 4.0.30319.1 built by: RTMRel<br /> &nbsp;&nbsp;&nbsp; CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Windows.Forms/v4.0_4.0.0.0__b77a5c561934e089/System.Windows.Forms.dll<br /> ----------------------------------------<br /> System.Drawing<br /> &nbsp;&nbsp;&nbsp; Assembly Version: 4.0.0.0<br /> &nbsp;&nbsp;&nbsp; Win32 Version: 4.0.30319.1 built by: RTMRel<br /> &nbsp;&nbsp;&nbsp; CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Drawing/v4.0_4.0.0.0__b03f5f7f11d50a3a/System.Drawing.dll<br /> ----------------------------------------<br /> System<br /> &nbsp;&nbsp;&nbsp; Assembly Version: 4.0.0.0<br /> &nbsp;&nbsp;&nbsp; Win32 Version: 4.0.30319.1 built by: RTMRel<br /> &nbsp;&nbsp;&nbsp; CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System/v4.0_4.0.0.0__b77a5c561934e089/System.dll<br /> ----------------------------------------<br /> System.ServiceModel<br /> &nbsp;&nbsp;&nbsp; Assembly Version: 4.0.0.0<br /> &nbsp;&nbsp;&nbsp; Win32 Version: 4.0.30319.1 built by: RTMRel<br /> &nbsp;&nbsp;&nbsp; CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.ServiceModel/v4.0_4.0.0.0__b77a5c561934e089/System.ServiceModel.dll<br /> ----------------------------------------<br /> System.Core<br /> &nbsp;&nbsp;&nbsp; Assembly Version: 4.0.0.0<br /> &nbsp;&nbsp;&nbsp; Win32 Version: 4.0.30319.1 built by: RTMRel<br /> &nbsp;&nbsp;&nbsp; CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Core/v4.0_4.0.0.0__b77a5c561934e089/System.Core.dll<br /> ----------------------------------------<br /> log4net<br /> &nbsp;&nbsp;&nbsp; Assembly Version: 1.2.10.0<br /> &nbsp;&nbsp;&nbsp; Win32 Version: 1.2.10.0<br /> &nbsp;&nbsp;&nbsp; CodeBase: file:///D:/PIS/Release2/log4net.DLL<br /> ----------------------------------------<br /> PisDO<br /> &nbsp;&nbsp;&nbsp; Assembly Version: 1.0.0.0<br /> &nbsp;&nbsp;&nbsp; Win32 Version: 1.0.0.0<br /> &nbsp;&nbsp;&nbsp; CodeBase: file:///D:/PIS/Release2/PisDO.DLL<br /> ----------------------------------------<br /> System.Runtime.Serialization<br /> &nbsp;&nbsp;&nbsp; Assembly Version: 4.0.0.0<br /> &nbsp;&nbsp;&nbsp; Win32 Version: 4.0.30319.1 (RTMRel.030319-0100)<br /> &nbsp;&nbsp;&nbsp; CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Runtime.Serialization/v4.0_4.0.0.0__b77a5c561934e089/System.Runtime.Serialization.dll<br /> ----------------------------------------<br /> System.Configuration<br /> &nbsp;&nbsp;&nbsp; Assembly Version: 4.0.0.0<br /> &nbsp;&nbsp;&nbsp; Win32 Version: 4.0.30319.1 (RTMRel.030319-0100)<br /> &nbsp;&nbsp;&nbsp; CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Configuration/v4.0_4.0.0.0__b03f5f7f11d50a3a/System.Configuration.dll<br /> ----------------------------------------<br /> System.Xml<br /> &nbsp;&nbsp;&nbsp; Assembly Version: 4.0.0.0<br /> &nbsp;&nbsp;&nbsp; Win32 Version: 4.0.30319.1 built by: RTMRel<br /> &nbsp;&nbsp;&nbsp; CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Xml/v4.0_4.0.0.0__b77a5c561934e089/System.Xml.dll<br /> ----------------------------------------<br /> PresentationFramework<br /> &nbsp;&nbsp;&nbsp; Assembly Version: 4.0.0.0<br /> &nbsp;&nbsp;&nbsp; Win32 Version: 4.0.30319.1<br /> &nbsp;&nbsp;&nbsp; CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/PresentationFramework/v4.0_4.0.0.0__31bf3856ad364e35/PresentationFramework.dll<br /> ----------------------------------------<br /> WindowsBase<br /> &nbsp;&nbsp;&nbsp; Assembly Version: 4.0.0.0<br /> &nbsp;&nbsp;&nbsp; Win32 Version: 4.0.30319.1 built by: RTMRel<br /> &nbsp;&nbsp;&nbsp; CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/WindowsBase/v4.0_4.0.0.0__31bf3856ad364e35/WindowsBase.dll<br /> ----------------------------------------<br /> PresentationCore<br /> &nbsp;&nbsp;&nbsp; Assembly Version: 4.0.0.0<br /> &nbsp;&nbsp;&nbsp; Win32 Version: 4.0.30319.1 built by: RTMRel<br /> &nbsp;&nbsp;&nbsp; CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_32/PresentationCore/v4.0_4.0.0.0__31bf3856ad364e35/PresentationCore.dll<br /> ----------------------------------------<br /> System.Xaml<br /> &nbsp;&nbsp;&nbsp; Assembly Version: 4.0.0.0<br /> &nbsp;&nbsp;&nbsp; Win32 Version: 4.0.30319.1 built by: RTMRel<br /> &nbsp;&nbsp;&nbsp; CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Xaml/v4.0_4.0.0.0__b77a5c561934e089/System.Xaml.dll<br /> ----------------------------------------<br /> System.Runtime.DurableInstancing<br /> &nbsp;&nbsp;&nbsp; Assembly Version: 4.0.0.0<br /> &nbsp;&nbsp;&nbsp; Win32 Version: 4.0.30319.1 built by: RTMRel<br /> &nbsp;&nbsp;&nbsp; CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Runtime.DurableInstancing/v4.0_4.0.0.0__31bf3856ad364e35/System.Runtime.DurableInstancing.dll<br /> ----------------------------------------<br /> SMDiagnostics<br /> &nbsp;&nbsp;&nbsp; Assembly Version: 4.0.0.0<br /> &nbsp;&nbsp;&nbsp; Win32 Version: 4.0.30319.1 (RTMRel.030319-0100)<br /> &nbsp;&nbsp;&nbsp; CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/SMDiagnostics/v4.0_4.0.0.0__b77a5c561934e089/SMDiagnostics.dll<br /> ----------------------------------------<br /> System.Transactions<br /> &nbsp;&nbsp;&nbsp; Assembly Version: 4.0.0.0<br /> &nbsp;&nbsp;&nbsp; Win32 Version: 4.0.30319.1 (RTMRel.030319-0100)<br /> &nbsp;&nbsp;&nbsp; CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_32/System.Transactions/v4.0_4.0.0.0__b77a5c561934e089/System.Transactions.dll<br /> ----------------------------------------<br /> System.EnterpriseServices<br /> &nbsp;&nbsp;&nbsp; Assembly Version: 4.0.0.0<br /> &nbsp;&nbsp;&nbsp; Win32 Version: 4.0.30319.1 (RTMRel.030319-0100)<br /> &nbsp;&nbsp;&nbsp; CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_32/System.EnterpriseServices/v4.0_4.0.0.0__b03f5f7f11d50a3a/System.EnterpriseServices.dll<br /> ----------------------------------------<br /> NAudio<br /> &nbsp;&nbsp;&nbsp; Assembly Version: 1.5.3.0<br /> &nbsp;&nbsp;&nbsp; Win32 Version: 1.5.3.0<br /> &nbsp;&nbsp;&nbsp; CodeBase: file:///D:/PIS/Release2/NAudio.DLL<br /> ----------------------------------------<br /> <br /> ************** JIT Debugging **************<br /> To enable just-in-time (JIT) debugging, the .config file for this<br /> application or computer (machine.config) must have the<br /> jitDebugging value set in the system.windows.forms section.<br /> The application must also be compiled with debugging<br /> enabled.<br /> <br /> For example:<br /> <br /> &lt;configuration&gt;<br /> &nbsp;&nbsp;&nbsp; &lt;system.windows.forms jitDebugging=\"true\" /&gt;<br /> &lt;/configuration&gt;<br /> <br /> When JIT debugging is enabled, any unhandled exception<br /> will be sent to the JIT debugger registered on the computer<br /> rather than be handled by this dialog box.</p>\n<p>&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">using</span> System;\n<span style=\"color: blue;\">using</span> System.Collections.Generic;\n<span style=\"color: blue;\">using</span> System.Linq;\n<span style=\"color: blue;\">using</span> System.Text;\n<span style=\"color: blue;\">using</span> NAudio.Wave;\n<span style=\"color: blue;\">using</span> NAudio.CoreAudioApi;\n<span style=\"color: blue;\">using</span> System.IO;\n<span style=\"color: blue;\">using</span> System.Threading;\n\n<span style=\"color: blue;\">namespace</span> PisDO.Announcer\n{\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> SimpleAnnouncer : IAnnouncer\n\n    {\n        IWavePlayer waveOut;\n        <span style=\"color: blue;\">string</span> fileName = <span style=\"color: blue;\">null</span>;\n        WaveStream mainOutputStream;\n        WaveChannel32 volumeStream;\n        WaveOutType wavOutType;\n        <span style=\"color: blue;\">bool</span> waveOutCallbackWithNewWindow;\n        <span style=\"color: blue;\">bool</span> wasapiExclusiveMode;\n        <span style=\"color: blue;\">bool</span> wasapiEventCallback;\n        System.Windows.Forms.Timer timer;\n        <span style=\"color: blue;\">string</span> currentTimeText=<span style=\"color: #a31515;\">\"\"</span>;\n        <span style=\"color: blue;\">int</span> currentTimeSeconds = 0;\n        <span style=\"color: blue;\">bool</span> canPlay;\n        <span style=\"color: blue;\">int</span> latency;\n        <span style=\"color: blue;\">int</span> volume;\n        <span style=\"color: blue;\">string</span> tempFile = <span style=\"color: #a31515;\">\"kimondja.wav\"</span>;\n        IAnnouncementOutputChannel outputChannel;\n        IAnnouncement announcement;\n        <span style=\"color: blue;\">string</span> wavFileDir;\n        <span style=\"color: blue;\">string</span>[] wavStore;\n\n        <span style=\"color: blue;\">#region</span> utility fields\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">readonly</span> <span style=\"color: blue;\">object</span> eventLock = <span style=\"color: blue;\">new</span> <span style=\"color: blue;\">object</span>();\n        <span style=\"color: blue;\">private</span> log4net.ILog logger;\n        <span style=\"color: blue;\">#endregion</span>\n\n        <span style=\"color: blue;\">public</span> SimpleAnnouncer(IAnnouncementOutputChannel outputChannel,<span style=\"color: blue;\">string</span> wavFileDir, <span style=\"color: blue;\">string</span>[] wavStore) {\n            <span style=\"color: blue;\">this</span>.outputChannel = outputChannel;\n            <span style=\"color: blue;\">this</span>.wavFileDir = wavFileDir;\n            <span style=\"color: blue;\">this</span>.wavStore = wavStore;\n            latency = 200;\n            wavOutType = WaveOutType.WaveOut;\n            waveOutCallbackWithNewWindow = <span style=\"color: blue;\">true</span>;\n            wasapiEventCallback = <span style=\"color: blue;\">false</span>;\n            wasapiExclusiveMode = <span style=\"color: blue;\">false</span>;\n            timer = <span style=\"color: blue;\">new</span> System.Windows.Forms.Timer();\n            <span style=\"color: green;\">//timer.Elapsed += new System.Timers.ElapsedEventHandler(timer_Elapsed);</span>\n            timer.Tick += <span style=\"color: blue;\">new</span> EventHandler(timer_Tick);\n            canPlay = <span style=\"color: blue;\">true</span>;\n            volume = 1;\n            logger = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);\n        }\n\n        <span style=\"color: blue;\">void</span> timer_Tick(<span style=\"color: blue;\">object</span> sender, EventArgs e)\n        {\n            <span style=\"color: blue;\">if</span> (mainOutputStream != <span style=\"color: blue;\">null</span>)\n            {\n                <span style=\"color: blue;\">if</span> (mainOutputStream.Position &gt;= mainOutputStream.Length)\n                {\n                    IAnnouncement tmpAnnouncement = announcement;\n                    Ended();\n                    OnPlayEnded(<span style=\"color: blue;\">new</span> PlayStateChangedEventArgs(outputChannel, tmpAnnouncement, <span style=\"color: blue;\">true</span>));\n                }\n                <span style=\"color: blue;\">else</span>\n                {\n                    TimeSpan currentTime = mainOutputStream.CurrentTime;\n                    TimeSpan totalTime = mainOutputStream.TotalTime;\n                    currentTimeSeconds = (<span style=\"color: blue;\">int</span>)currentTime.TotalSeconds;\n                    currentTimeText = String.Format(<span style=\"color: #a31515;\">\"{0:00}:{1:00}/{2:00}:{3:00}\"</span>, (<span style=\"color: blue;\">int</span>)currentTime.TotalMinutes, currentTime.Seconds,(<span style=\"color: blue;\">int</span>)totalTime.TotalMinutes,totalTime.Seconds);\n                    <span style=\"color: blue;\">if</span> (logger.IsDebugEnabled) logger.Debug(<span style=\"color: #a31515;\">\"currentTimeText: \"</span> + currentTimeText);\n                }\n            }\n        }\n\n\n        <span style=\"color: blue;\">#region</span> IAnnouncer Members\n\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> Stop()\n        {\n            <span style=\"color: blue;\">if</span> (logger.IsDebugEnabled) logger.Debug(<span style=\"color: #a31515;\">\"Stop() be\"</span>);\n            <span style=\"color: blue;\">if</span> (waveOut != <span style=\"color: blue;\">null</span>)\n            {\n                <span style=\"color: blue;\">if</span> (logger.IsDebugEnabled) logger.Debug(<span style=\"color: #a31515;\">\"waveOut is not null, that's normal\"</span>);\n                waveOut.Stop();\n                closeWaveOut();\n                timer.Stop();\n\n                canPlay = <span style=\"color: blue;\">true</span>;\n                IAnnouncement tmpAnnouncement = announcement;\n                announcement = <span style=\"color: blue;\">null</span>;\n                OnPlayStopped(<span style=\"color: blue;\">new</span> PlayStateChangedEventArgs(outputChannel, tmpAnnouncement, <span style=\"color: blue;\">false</span>));\n            }\n            <span style=\"color: blue;\">else</span> {\n                <span style=\"color: blue;\">if</span> (logger.IsWarnEnabled) logger.Warn(<span style=\"color: #a31515;\">\"waveOut is null, that's strange\"</span>);\n            }\n            <span style=\"color: blue;\">if</span> (logger.IsDebugEnabled) logger.Debug(<span style=\"color: #a31515;\">\"Stop() ki\"</span>);\n        }\n\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> Ended() {\n            <span style=\"color: blue;\">if</span> (logger.IsDebugEnabled) logger.Debug(<span style=\"color: #a31515;\">\"Ended() be\"</span>);\n                <span style=\"color: blue;\">if</span> (waveOut != <span style=\"color: blue;\">null</span>)\n                {\n                    <span style=\"color: blue;\">if</span> (logger.IsDebugEnabled) logger.Debug(<span style=\"color: #a31515;\">\"waveOut is not null, that's normal\"</span>);\n                    timer.Stop();\n                    waveOut.Stop();\n                    closeWaveOut();\n                    canPlay = <span style=\"color: blue;\">true</span>;\n                    IAnnouncement tmpAnnouncement = announcement;\n                    announcement = <span style=\"color: blue;\">null</span>;\n                    OnPlayStopped(<span style=\"color: blue;\">new</span> PlayStateChangedEventArgs(outputChannel, tmpAnnouncement, <span style=\"color: blue;\">true</span>));\n                }\n                <span style=\"color: blue;\">else</span>\n                {\n                    <span style=\"color: blue;\">if</span> (logger.IsWarnEnabled) logger.Warn(<span style=\"color: #a31515;\">\"waveOut is null, that's strange\"</span>);\n                }\n                <span style=\"color: blue;\">if</span> (logger.IsDebugEnabled) logger.Debug(<span style=\"color: #a31515;\">\"Ended() ki\"</span>);\n        }\n\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> Dispose()\n        {\n            timer.Stop();\n            timer = <span style=\"color: blue;\">null</span>;\n            closeWaveOut();\n        }\n\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">event</span> EventHandler&lt;PlayStateChangedEventArgs&gt; PlayStopped;\n\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">event</span> EventHandler&lt;PlayStateChangedEventArgs&gt; PlayStarted;\n\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">event</span> EventHandler&lt;PlayStateChangedEventArgs&gt; PlayEnded;\n\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> Play(IAnnouncement announcement) {\n            <span style=\"color: blue;\">this</span>.announcement = announcement;\n            <span style=\"color: blue;\">string</span>[] wavs = announcement.Data.Split(<span style=\"color: blue;\">new</span> <span style=\"color: blue;\">string</span>[] { <span style=\"color: #a31515;\">\";\"</span> }, StringSplitOptions.RemoveEmptyEntries);\n            List&lt;<span style=\"color: blue;\">string</span>&gt; wavList = <span style=\"color: blue;\">new</span> List&lt;<span style=\"color: blue;\">string</span>&gt;();\n            <span style=\"color: blue;\">foreach</span> (<span style=\"color: blue;\">string</span> wav <span style=\"color: blue;\">in</span> wavs)\n            {<br />              .....<br />&nbsp;             wavList.Add(wavFileDir + wav + <span style=\"color: #a31515;\">\".wav\"</span>);\n            }\n            playWavs(wavList.ToArray&lt;<span style=\"color: blue;\">string</span>&gt;());\n        }\n\n        <span style=\"color: blue;\">public</span> IAnnouncement Announcement\n        {\n            <span style=\"color: blue;\">get</span>\n            {\n                <span style=\"color: blue;\">return</span> announcement;\n            }\n        }\n\n        <span style=\"color: blue;\">#endregion</span>\n\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> OnPlayStopped(PlayStateChangedEventArgs e)\n        {\n            EventHandler&lt;PlayStateChangedEventArgs&gt; handler;\n            <span style=\"color: blue;\">lock</span> (eventLock)\n            {\n                handler = PlayStopped;\n            }\n            <span style=\"color: blue;\">if</span> (handler != <span style=\"color: blue;\">null</span>)\n            {\n                handler(<span style=\"color: blue;\">this</span>, e);\n            }\n\n        }\n\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> OnPlayStarted(PlayStateChangedEventArgs e)\n        {\n            EventHandler&lt;PlayStateChangedEventArgs&gt; handler;\n            <span style=\"color: blue;\">lock</span> (eventLock)\n            {\n                handler = PlayStarted;\n            }\n            <span style=\"color: blue;\">if</span> (handler != <span style=\"color: blue;\">null</span>)\n            {\n                handler(<span style=\"color: blue;\">this</span>, e);\n            }\n\n        }\n\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> OnPlayEnded(PlayStateChangedEventArgs e)\n        {\n            EventHandler&lt;PlayStateChangedEventArgs&gt; handler;\n            <span style=\"color: blue;\">lock</span> (eventLock)\n            {\n                handler = PlayEnded;\n            }\n            <span style=\"color: blue;\">if</span> (handler != <span style=\"color: blue;\">null</span>)\n            {\n                handler(<span style=\"color: blue;\">this</span>, e);\n            }\n        }\n\n        <span style=\"color: green;\">//0: ok</span>\n        <span style=\"color: green;\">//1: not worth to try again</span>\n        <span style=\"color: green;\">//2: worth to try again</span>\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">int</span> playWav(<span style=\"color: blue;\">string</span> soundFile)\n        {\n            <span style=\"color: blue;\">if</span> (logger.IsDebugEnabled) logger.Debug(<span style=\"color: #a31515;\">\"playWav be \"</span> + soundFile);\n            fileName = soundFile;\n            timer.Interval = 500;\n            timer.Start();\n            <span style=\"color: blue;\">if</span> (waveOut != <span style=\"color: blue;\">null</span>)\n            {\n                <span style=\"color: blue;\">if</span> (logger.IsWarnEnabled) logger.Warn(<span style=\"color: #a31515;\">\"playWav waveOut is not null\"</span>);\n                <span style=\"color: blue;\">if</span> (waveOut.PlaybackState == PlaybackState.Playing)\n                {\n                    <span style=\"color: blue;\">if</span> (logger.IsWarnEnabled) logger.Warn(<span style=\"color: #a31515;\">\"playWav ki \"</span> + soundFile + <span style=\"color: #a31515;\">\", 1 (already playing)\"</span>);\n                    timer.Stop();\n                    waveOut.Stop();\n                    closeWaveOut();\n                    <span style=\"color: blue;\">return</span> 2;\n                }\n                <span style=\"color: blue;\">else</span> <span style=\"color: blue;\">if</span> (waveOut.PlaybackState == PlaybackState.Paused)\n                {\n                    waveOut.Play();\n                    canPlay = <span style=\"color: blue;\">false</span>;\n                    <span style=\"color: blue;\">if</span> (logger.IsWarnEnabled) logger.Warn(<span style=\"color: #a31515;\">\"playWav ki \"</span> + soundFile + <span style=\"color: #a31515;\">\", 1 (Paused)\"</span>);\n                    timer.Stop();\n                    waveOut.Stop();\n                    closeWaveOut();\n                    <span style=\"color: blue;\">return</span> 2;\n                }\n\n            }\n\n\n            <span style=\"color: blue;\">if</span> (String.IsNullOrEmpty(fileName))\n            {\n                <span style=\"color: blue;\">throw</span> <span style=\"color: blue;\">new</span> ArgumentException(<span style=\"color: #a31515;\">\"Wav file to play is null or empty!\"</span>);\n            }\n\n            <span style=\"color: blue;\">try</span>\n            {\n                createWaveOut();\n            }\n            <span style=\"color: blue;\">catch</span> (Exception driverCreateException)\n            {\n                <span style=\"color: blue;\">if</span> (logger.IsWarnEnabled) logger.Warn(<span style=\"color: #a31515;\">\"driverCreateException: \"</span> + driverCreateException.Message);\n                <span style=\"color: blue;\">return</span> 1;\n            }\n\n            mainOutputStream = createInputStream(fileName);\n\n            currentTimeSeconds = 0;\n            currentTimeText = String.Format(<span style=\"color: #a31515;\">\"{0:00}:{1:00}\"</span>, (<span style=\"color: blue;\">int</span>)mainOutputStream.TotalTime.TotalMinutes, mainOutputStream.TotalTime.Seconds);\n\n            <span style=\"color: blue;\">try</span>\n            {\n                waveOut.Init(mainOutputStream);\n            }\n            <span style=\"color: blue;\">catch</span> (Exception initException)\n            {\n\n                <span style=\"color: blue;\">if</span> (logger.IsWarnEnabled) logger.Warn(<span style=\"color: #a31515;\">\"initException, Error Initializing Output\"</span> + initException.Message);\n                <span style=\"color: blue;\">return</span> 1;\n            }\n\n            volumeStream.Volume = volume;\n            <span style=\"color: blue;\">try</span>\n            {\n                <span style=\"color: blue;\">if</span> (logger.IsDebugEnabled) logger.Debug(<span style=\"color: #a31515;\">\"waveOut.Play before\"</span>);\n                waveOut.Play();\n                <span style=\"color: blue;\">if</span> (logger.IsDebugEnabled) logger.Debug(<span style=\"color: #a31515;\">\"waveOut.Play after\"</span>);\n            }\n            <span style=\"color: blue;\">catch</span> (Exception playException) {\n                <span style=\"color: blue;\">if</span> (logger.IsWarnEnabled) logger.Warn(<span style=\"color: #a31515;\">\"playException, Error Playing\"</span> + playException.Message);\n                <span style=\"color: blue;\">return</span> 2;\n            }\n            OnPlayStarted(<span style=\"color: blue;\">new</span> PlayStateChangedEventArgs(outputChannel,announcement, <span style=\"color: blue;\">false</span>));\n            <span style=\"color: blue;\">return</span> 0;\n        }\n\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> playWavs(<span style=\"color: blue;\">string</span>[] soundFiles)\n        {\n            <span style=\"color: blue;\">if</span> (logger.IsDebugEnabled) logger.Debug(<span style=\"color: #a31515;\">\"Play started.\"</span>);\n\n            <span style=\"color: green;\">//Hack</span>\n            <span style=\"color: blue;\">while</span> (waveOut != <span style=\"color: blue;\">null</span> &amp;&amp; waveOut.PlaybackState == PlaybackState.Playing)\n            {\n                <span style=\"color: blue;\">if</span> (logger.IsWarnEnabled) logger.Warn(<span style=\"color: #a31515;\">\"waiting for waveOut to free, it should be free from start anyway ...\"</span>);\n                Thread.Sleep(100);\n            }\n\n\n            <span style=\"color: blue;\">byte</span>[] buffer = <span style=\"color: blue;\">new</span> <span style=\"color: blue;\">byte</span>[1024];\n\n\n            <span style=\"color: blue;\">using</span> (WaveFileWriter waveFileWriter = <span style=\"color: blue;\">new</span> WaveFileWriter(tempFile, <span style=\"color: blue;\">new</span> WaveFormat(44100, 16, 1)))\n            {\n                <span style=\"color: blue;\">if</span> (logger.IsDebugEnabled) logger.Debug(<span style=\"color: #a31515;\">\"Building: \"</span> + tempFile);\n                <span style=\"color: blue;\">foreach</span> (<span style=\"color: blue;\">string</span> sourceFile <span style=\"color: blue;\">in</span> soundFiles)\n                {\n                    <span style=\"color: blue;\">if</span> (logger.IsDebugEnabled) logger.Debug(<span style=\"color: #a31515;\">\"Adding:  \"</span> + sourceFile);\n\n                    <span style=\"color: blue;\">using</span> (WaveFileReader reader = <span style=\"color: blue;\">new</span> WaveFileReader(sourceFile))\n                    {\n                        <span style=\"color: blue;\">int</span> read;\n                        <span style=\"color: blue;\">while</span> ((read = reader.Read(buffer, 0, buffer.Length)) &gt; 0)\n                        {\n                            waveFileWriter.Write(buffer, 0, read);\n                        }\n                    }\n                }\n                <span style=\"color: blue;\">if</span> (logger.IsDebugEnabled) logger.Debug(tempFile + <span style=\"color: #a31515;\">\" is ready\"</span>);\n                <span style=\"color: green;\">//waveFileWriter.Flush();</span>\n            }\n\n            <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> i = 0; i &lt; 10; i++)\n            {\n                <span style=\"color: blue;\">int</span> res = playWav(tempFile);\n                <span style=\"color: blue;\">if</span> (logger.IsDebugEnabled) logger.Debug(<span style=\"color: #a31515;\">\"playWav return value is: \"</span> + res);\n                <span style=\"color: blue;\">if</span> (res == 0 || res == 1)\n                {\n                    <span style=\"color: blue;\">break</span>;\n                }\n                Thread.Sleep(200);\n             }\n        }\n\n        <span style=\"color: blue;\">private</span> WaveStream createInputStream(<span style=\"color: blue;\">string</span> fileName)\n        {\n            WaveChannel32 inputStream;\n            <span style=\"color: blue;\">if</span> (fileName.EndsWith(<span style=\"color: #a31515;\">\".wav\"</span>))\n            {\n                WaveStream readerStream = <span style=\"color: blue;\">new</span> WaveFileReader(fileName);\n                <span style=\"color: blue;\">if</span> (readerStream.WaveFormat.Encoding != WaveFormatEncoding.Pcm)\n                {\n                    readerStream = WaveFormatConversionStream.CreatePcmStream(readerStream);\n                    readerStream = <span style=\"color: blue;\">new</span> BlockAlignReductionStream(readerStream);\n                }\n                <span style=\"color: blue;\">if</span> (readerStream.WaveFormat.BitsPerSample != 16)\n                {\n                    <span style=\"color: blue;\">var</span> format = <span style=\"color: blue;\">new</span> WaveFormat(readerStream.WaveFormat.SampleRate,\n                        16, readerStream.WaveFormat.Channels);\n                    readerStream = <span style=\"color: blue;\">new</span> WaveFormatConversionStream(format, readerStream);\n                }\n                inputStream = <span style=\"color: blue;\">new</span> WaveChannel32(readerStream);\n            }\n            <span style=\"color: blue;\">else</span> <span style=\"color: blue;\">if</span> (fileName.EndsWith(<span style=\"color: #a31515;\">\".mp3\"</span>))\n            {\n                WaveStream mp3Reader = <span style=\"color: blue;\">new</span> Mp3FileReader(fileName);\n                WaveStream pcmStream = WaveFormatConversionStream.CreatePcmStream(mp3Reader);\n                WaveStream blockAlignedStream = <span style=\"color: blue;\">new</span> BlockAlignReductionStream(pcmStream);\n                inputStream = <span style=\"color: blue;\">new</span> WaveChannel32(blockAlignedStream);\n            }\n            <span style=\"color: blue;\">else</span>\n            {\n                <span style=\"color: blue;\">throw</span> <span style=\"color: blue;\">new</span> InvalidOperationException(<span style=\"color: #a31515;\">\"Unsupported extension\"</span>);\n            }\n            <span style=\"color: green;\">// we are not going into a mixer so we don't need to zero pad</span>\n            <span style=\"color: green;\">//((WaveChannel32)inputStream).PadWithZeroes = false;</span>\n            volumeStream = inputStream;\n            <span style=\"color: blue;\">var</span> meteringStream = <span style=\"color: blue;\">new</span> MeteringStream(inputStream, inputStream.WaveFormat.SampleRate / 10);\n            <span style=\"color: green;\">//meteringStream.StreamVolume += new EventHandler&lt;StreamVolumeEventArgs&gt;(meteringStream_StreamVolume);</span>\n\n            <span style=\"color: blue;\">return</span> meteringStream;\n        }\n\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> createWaveOut()\n        {\n            <span style=\"color: blue;\">if</span> (logger.IsDebugEnabled) logger.Debug(<span style=\"color: #a31515;\">\"createWaveOut() be\"</span>);\n            closeWaveOut();\n            <span style=\"color: blue;\">if</span> (wavOutType==WaveOutType.WaveOut)\n            {\n                WaveCallbackInfo callbackInfo = waveOutCallbackWithNewWindow ?  WaveCallbackInfo.NewWindow() : WaveCallbackInfo.FunctionCallback();\n                WaveOut outputDevice = <span style=\"color: blue;\">new</span> WaveOut(callbackInfo);\n\n                outputDevice.DesiredLatency = latency;\n                waveOut = outputDevice;\n            }\n            <span style=\"color: blue;\">else</span> <span style=\"color: blue;\">if</span> (wavOutType == WaveOutType.DirectSound)\n            {\n                waveOut = <span style=\"color: blue;\">new</span> DirectSoundOut(latency);\n            }\n            <span style=\"color: blue;\">else</span> <span style=\"color: blue;\">if</span> (wavOutType == WaveOutType.ASIO)\n            {\n\n            }\n            <span style=\"color: blue;\">else</span>\n            {\n                waveOut = <span style=\"color: blue;\">new</span> WasapiOut(\n                    wasapiExclusiveMode ?\n                        AudioClientShareMode.Exclusive :\n                        AudioClientShareMode.Shared,\n                    wasapiEventCallback,\n                    latency);\n            }\n            <span style=\"color: blue;\">if</span> (logger.IsDebugEnabled) logger.Debug(<span style=\"color: #a31515;\">\"createWaveOut() ki\"</span>);\n        }\n\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> closeWaveOut()\n        {            \n            <span style=\"color: blue;\">if</span> (waveOut != <span style=\"color: blue;\">null</span>)\n            {\n                waveOut.Stop();\n            }\n            <span style=\"color: blue;\">if</span> (mainOutputStream != <span style=\"color: blue;\">null</span>)\n            {\n                <span style=\"color: green;\">// this one really closes the file and ACM conversion</span>\n                volumeStream.Close();\n                volumeStream = <span style=\"color: blue;\">null</span>;\n                <span style=\"color: green;\">// this one does the metering stream</span>\n                mainOutputStream.Close();\n                mainOutputStream = <span style=\"color: blue;\">null</span>;\n            }\n            <span style=\"color: blue;\">if</span> (waveOut != <span style=\"color: blue;\">null</span>)\n            {\n                waveOut.Dispose();\n                waveOut = <span style=\"color: blue;\">null</span>;\n            }\n        }       \n\n    }\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">enum</span> WaveOutType { WaveOut, DirectSound, ASIO }\n}\n</pre>\n</div>",
    "PostedDate": "2011-07-12T04:32:27.177-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "647625",
    "ThreadId": "264803",
    "Html": "<p>What waveOut callback model are you using?&nbsp; I would go with new window if possible.</p>",
    "PostedDate": "2011-07-26T02:42:18.013-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "659499",
    "ThreadId": "264803",
    "Html": "<p>I am going with the basic WavOut constructor</p>\r\n<p>WaveOut outputDevice = new WaveOut();</p>\r\n<p>I am calling Play from a gui thread like this, where announcer.Play eventually leads to a wavOut.Play and winFormsGui is a form</p>\r\n<pre>winFormsGui.BeginInvoke(<span style=\"color: blue;\">new</span> MethodInvoker(<span style=\"color: blue;\">delegate</span>\r\n{\r\n\tircsCenterManager.Announce(nextToAnnounce.Zone.IrcsId);\r\n\tannouncer.Play(nextToAnnounce);\r\n}));</pre>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><br /><br />&nbsp;</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2011-08-17T09:24:37.96-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "667718",
    "ThreadId": "264803",
    "Html": "<p>the instance of WaveOut should be created on a GUI thread.</p>",
    "PostedDate": "2011-09-05T06:50:09.477-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "676666",
    "ThreadId": "264803",
    "Html": "<p>Yes, the WaveOut device is created (if needed) in the same announcer.Play method mentioned above.</p>\r\n<p>So it is created on the GUI thread albeit with the help of BeginInvoke. Can this be the problem?</p>",
    "PostedDate": "2011-09-26T05:40:42.827-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]