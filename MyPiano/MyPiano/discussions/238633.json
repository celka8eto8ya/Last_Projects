[
  {
    "Id": "536790",
    "ThreadId": "238633",
    "Html": "\r\n<p>Hello,</p>\r\n<p>I have a voice-chat program that streams recorded data between clients.</p>\r\n<p>Here's the relevant code snippets:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// Audio</span>\r\n        <span style=\"color:blue\">private</span> WaveIn waveIn;\r\n        <span style=\"color:blue\">private</span> IWavePlayer waveOut;\r\n        <span style=\"color:blue\">private</span> BufferedWaveProvider waveProvider;\r\n\r\n               <span style=\"color:blue\">this</span>.waveIn = <span style=\"color:blue\">new</span> WaveIn();\r\n                <span style=\"color:blue\">this</span>.waveIn.WaveFormat = <span style=\"color:blue\">new</span> WaveFormat(16000, 2);\r\n                <span style=\"color:blue\">this</span>.waveIn.BufferMillisconds = 50;\r\n                <span style=\"color:blue\">this</span>.waveIn.DataAvailable &#43;= <span style=\"color:blue\">new</span>    EventHandler&lt;WaveInEventArgs&gt;(waveIn_DataAvailable);\r\n                <span style=\"color:blue\">this</span>.waveOut = <span style=\"color:blue\">new</span> DirectSoundOut();\r\n                <span style=\"color:blue\">this</span>.waveProvider = <span style=\"color:blue\">new</span> BufferedWaveProvider(<span style=\"color:blue\">this</span>.waveIn.WaveFormat);\r\n                <span style=\"color:blue\">this</span>.waveOut.Init(waveProvider);\r\n                <span style=\"color:blue\">this</span>.waveOut.Play();\r\n\r\n\r\n\r\n\r\n <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> waveIn_DataAvailable(<span style=\"color:blue\">object</span> sender, WaveInEventArgs e)\r\n        {\r\n            <span style=\"color:blue\">try</span>\r\n            {\r\n                <span style=\"color:blue\">byte</span>[] sendArr = <span style=\"color:blue\">new</span> Byte[e.BytesRecorded];\r\n                sendArr = e.Buffer.ToArray();\r\n                <span style=\"color:blue\">this</span>.audioSock.BeginSend(sendArr, sendArr.Length, <span style=\"color:blue\">this</span>.serverEP, <span style=\"color:blue\">new</span> AsyncCallback(audioSendCallback), <span style=\"color:blue\">this</span>.audioSock);\r\n                audioSendDone.WaitOne();\r\n               <span style=\"color:green\">// this.textbox_display.Text = this.textbox_display.Text &#43; &quot; sent bytes: &quot; &#43; sendArr.Length;</span>\r\n            }\r\n            <span style=\"color:blue\">catch</span> (Exception ez)\r\n            {\r\n                MessageBox.Show(ez.ToString());\r\n                <span style=\"color:blue\">this</span>.waveIn.StopRecording();\r\n            }\r\n        }\r\n\r\n\r\n\r\n <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> audioReceive(IAsyncResult asyn)\r\n        {\r\n            <span style=\"color:blue\">try</span>\r\n            {\r\n                <span style=\"color:blue\">byte</span>[] temp = audioSock.EndReceive(asyn, <span style=\"color:blue\">ref</span> <span style=\"color:blue\">this</span>.serverEP);\r\n                <span style=\"color:blue\">this</span>.waveProvider.AddSamples(temp, 0, temp.Length);\r\n                \r\n                \r\n                <span style=\"color:blue\">this</span>.textbox_display.Text = <span style=\"color:blue\">this</span>.textbox_display.Text &#43; <span style=\"color:#a31515\">&quot; got bytes: &quot;</span> &#43; temp.Length;\r\n                audioSock.BeginReceive(<span style=\"color:blue\">new</span> AsyncCallback(audioReceive), <span style=\"color:blue\">null</span>);\r\n  \r\n            }\r\n            <span style=\"color:blue\">catch</span> (Exception ez)\r\n            {\r\n                MessageBox.Show(<span style=\"color:#a31515\">&quot;audioReceive: &quot;</span> &#43; <span style=\"color:blue\">this</span>.textbox_nick.Text &#43; <span style=\"color:#a31515\">&quot;        &quot;</span> &#43;ez.ToString());\r\n            }\r\n\r\n        }\r\n\r\n<br><br>I have two questions now;<br><br>1. First of all, how do I filter out silence? I have used    float f = (float)(Math.Abs((BitConverter.ToInt16(sendArr, i) / 1000.0)));      to get an approximate noise threshold,<br>which can be used to filter for each byte, but the problem is (I think) the computations take too long time and the event will fire again before it's complete. Basically any additional computations seems to bog down<br>the eventhandler... can't really describe it better O_O. I don't want to send useless silent packets over the network.<br><br>2. Using the code above, all noise gets sent, and it works great for like 30 seconds, then for some reason the soundplayer seems to clog up over time and the voice gets distorted and eventually you can't hear what's being said. <br>What is the reason for this?<br><br>Love this library, it is totally awesome!<br><br>Cheers<br></pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-12-16T07:18:53.52-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "537722",
    "ThreadId": "238633",
    "Html": "\r\n<p>I'd like to add, while streaming voice between two clients, the sender client basically hangs up due to all data processing with dataavailable event. Is there a way around this?</p>\r\n",
    "PostedDate": "2010-12-18T08:39:53.36-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "671597",
    "ThreadId": "238633",
    "Html": "<p>did you find a&nbsp;solution&nbsp;to filter noise ?&nbsp;</p>",
    "PostedDate": "2011-09-14T02:19:06.63-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]