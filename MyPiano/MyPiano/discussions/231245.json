[
  {
    "Id": "508559",
    "ThreadId": "231245",
    "Html": "<p>Hello,&nbsp;</p>\r\n<p>I have the following code to get audio from mic and it sends byte array to network. On the other side when I capture it and play it, there is only continuous noice.</p>\r\n<p>The following code sends byte[800] arrays to network (Please refer while loop). I capture these chunk of bytes and send it to overridden Read method of WaveStream. This first time I'm dealing with media devices. I know there must some serious issues with the following code. Please give me your feedback.</p>\r\n<p>My Server code which generates data from computer mic (audio input device)</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">namespace</span> MicroPhoneServer\r\n{\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> AudioService\r\n    {\r\n        <span style=\"color:blue\">#region</span> Properties\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> IpAddress { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">int</span> Port { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">int</span> DeviceNumber;\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">int</span> BytesRecorded=0;\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        NetworkStream netStr;\r\n        TcpClient tcpClient;\r\n        TcpListener tcpListener;\r\n        <span style=\"color:blue\">bool</span> tcpConnected = <span style=\"color:blue\">false</span>;\r\n        WaveIn waveIn = <span style=\"color:blue\">new</span> WaveIn();\r\n                \r\n       \r\n        MMDeviceCollection audioDeviceColl;\r\n            \r\n\r\n        <span style=\"color:blue\">public</span> AudioService()\r\n        { }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Start() \r\n        {\r\n            getVoice();\r\n\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> getVoice() \r\n        {\r\n            openNetworkChannel();\r\n            <span style=\"color:blue\">if</span> (tcpConnected) \r\n            {\r\n                setAudioInputDevice();\r\n                waveIn.StartRecording();\r\n            }\r\n            \r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Stop() \r\n        {\r\n            waveIn.StopRecording();\r\n            waveIn.Dispose();\r\n            tcpListener.Stop();\r\n            tcpClient.Close();            \r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> setAudioInputDevice() \r\n        {\r\n            waveIn.DataAvailable += <span style=\"color:blue\">new</span> EventHandler&lt;WaveInEventArgs&gt;(waveIn_DataAvailable);\r\n            waveIn.RecordingStopped += <span style=\"color:blue\">new</span> EventHandler(waveIn_RecordingStopped);\r\n            MMDevice d = audioDeviceColl.ElementAt(DeviceNumber);\r\n            <span style=\"color:green\">//waveIn.DeviceNumber = 1;</span>\r\n            waveIn.WaveFormat = <span style=\"color:blue\">new</span> WaveFormat(8000, 1);\r\n        }\r\n\r\n        <span style=\"color:blue\">void</span> waveIn_RecordingStopped(<span style=\"color:blue\">object</span> sender, EventArgs e)\r\n        {\r\n            waveIn.Dispose();\r\n            waveIn = <span style=\"color:blue\">null</span>;\r\n            tcpClient.Close();\r\n            tcpClient = <span style=\"color:blue\">null</span>;\r\n            netStr.Close();\r\n            netStr = <span style=\"color:blue\">null</span>;\r\n\r\n        }\r\n\r\n        <span style=\"color:blue\">void</span> waveIn_DataAvailable(<span style=\"color:blue\">object</span> sender, WaveInEventArgs e)\r\n        {\r\n            <span style=\"color:blue\">if</span> (tcpConnected) \r\n            {\r\n                netStr.Write(e.Buffer, 0,e.BytesRecorded);                               \r\n            }\r\n                        \r\n        }\r\n            \r\n        <span style=\"color:blue\">public</span> List&lt;<span style=\"color:blue\">string</span>&gt; AudioInputDevices()\r\n        {\r\n            List&lt;<span style=\"color:blue\">string</span>&gt; audioInputDevices = <span style=\"color:blue\">new</span> List&lt;<span style=\"color:blue\">string</span>&gt;();\r\n            MMDeviceEnumerator audioDeviceEnum = <span style=\"color:blue\">new</span> MMDeviceEnumerator();\r\n            audioDeviceColl = audioDeviceEnum.EnumerateAudioEndPoints(DataFlow.Render, DeviceState.Active);\r\n\r\n            <span style=\"color:blue\">foreach</span> (MMDevice d <span style=\"color:blue\">in</span> audioDeviceColl) \r\n            {\r\n                audioInputDevices.Add(d.FriendlyName);\r\n            }\r\n\r\n            <span style=\"color:blue\">return</span> audioInputDevices;\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> openNetworkChannel() \r\n        {\r\n            <span style=\"color:blue\">if</span> (tcpListener == <span style=\"color:blue\">null</span>) \r\n            {\r\n                tcpListener = <span style=\"color:blue\">new</span> TcpListener(System.Net.IPAddress.Parse(IpAddress), Port);\r\n                tcpListener.Start();\r\n            }\r\n           \r\n            <span style=\"color:blue\">if</span> (tcpListener.Pending()) \r\n            {\r\n                tcpConnected = <span style=\"color:blue\">true</span>;\r\n                tcpClient = tcpListener.AcceptTcpClient();\r\n                netStr = tcpClient.GetStream();\r\n            }\r\n                        \r\n        }\r\n   \r\n     }\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>My client code which subscribes byte[800] from network and plays it.</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">namespace</span> MicroPhoneClient\r\n{\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> Subscriber\r\n    {\r\n        TcpClient client = <span style=\"color:blue\">null</span>;\r\n        NetworkStream netStr = <span style=\"color:blue\">null</span>;\r\n        Byte[] buffer;\r\n        AudioSampleStream audioStrm = <span style=\"color:blue\">null</span>;\r\n        DirectSoundOut device;\r\n        <span style=\"color:blue\">bool</span> isPlaying = <span style=\"color:blue\">false</span>;\r\n        Queue&lt;<span style=\"color:blue\">byte</span>[]&gt; bufferQueue = <span style=\"color:blue\">new</span> Queue&lt;<span style=\"color:blue\">byte</span>[]&gt;();\r\n\r\n        <span style=\"color:blue\">public</span> Subscriber() \r\n        {\r\n            audioStrm = <span style=\"color:blue\">new</span> AudioSampleStream(8000, 1);\r\n            device = <span style=\"color:blue\">new</span> DirectSoundOut();\r\n            device.Init(audioStrm);\r\n               \r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> GetTCPClient() \r\n        {\r\n            client = <span style=\"color:blue\">new</span> TcpClient(<span style=\"color:#a31515\">&quot;192.168.1.3&quot;</span>, 3345);\r\n            netStr = client.GetStream();   \r\n            \r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Seek() \r\n        {\r\n\r\n            <span style=\"color:blue\">while</span> (<span style=\"color:blue\">true</span>) \r\n            {\r\n                <span style=\"color:blue\">try</span> \r\n                {\r\n                    buffer = <span style=\"color:blue\">new</span> <span style=\"color:blue\">byte</span>[800];\r\n                    netStr.Read(buffer, 0, 800);\r\n                    <span style=\"color:blue\">if</span> (buffer != <span style=\"color:blue\">null</span>)\r\n                    {\r\n                        bufferQueue.Enqueue(buffer);\r\n                    }\r\n                    \r\n                }\r\n                \r\n                <span style=\"color:blue\">catch</span>{}\r\n\r\n            }\r\n            \r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Stop() \r\n        {\r\n            device.Stop();\r\n            audioStrm.Flush();\r\n            audioStrm.Dispose();\r\n            netStr.Dispose();\r\n            \r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> CloseTCPClient() \r\n        {\r\n            client.Close();\r\n            client = <span style=\"color:blue\">null</span>;\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Play() \r\n        {\r\n            <span style=\"color:blue\">while</span> (<span style=\"color:blue\">true</span>) \r\n            {\r\n                <span style=\"color:blue\">if</span> (bufferQueue.Count != 0)\r\n                {\r\n                    audioStrm.AddAudioSamples(bufferQueue.Dequeue(), 0, 800);\r\n                    <span style=\"color:blue\">if</span> (!isPlaying)\r\n                    {\r\n                        device.Play();\r\n                        isPlaying = <span style=\"color:blue\">true</span>;\r\n                    }   \r\n                }\r\n\r\n            }\r\n                       \r\n        }\r\n    }\r\n\r\n    <span style=\"color:blue\">class</span> AudioSample\r\n    {\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">byte</span>[] audioBuffer;\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">int</span> position;\r\n\r\n        <span style=\"color:blue\">public</span> AudioSample(<span style=\"color:blue\">byte</span>[] buffer) \r\n        {\r\n            audioBuffer = buffer;\r\n            position = 0;\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">int</span> Position \r\n        {\r\n            <span style=\"color:blue\">get</span> \r\n            {\r\n                <span style=\"color:blue\">return</span> position;\r\n            }\r\n            <span style=\"color:blue\">set</span> \r\n            {\r\n                position = value;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">byte</span>[] AudioBuffer \r\n        {\r\n            <span style=\"color:blue\">get</span> \r\n            {\r\n                <span style=\"color:blue\">return</span> audioBuffer;\r\n            }\r\n        }\r\n    }\r\n\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> AudioSampleStream : WaveStream \r\n    {\r\n        <span style=\"color:blue\">private</span> WaveFormat waveFormat;\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">long</span> position;\r\n        <span style=\"color:blue\">private</span> Queue&lt;AudioSample&gt; audioSampleQueue;\r\n\r\n        <span style=\"color:blue\">public</span> AudioSampleStream(<span style=\"color:blue\">int</span> rate, <span style=\"color:blue\">int</span> channels) \r\n        {\r\n            waveFormat = <span style=\"color:blue\">new</span> WaveFormat(rate, 1);\r\n            position = 0;\r\n            audioSampleQueue = <span style=\"color:blue\">new</span> Queue&lt;AudioSample&gt;();\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> AddAudioSamples(<span style=\"color:blue\">byte</span>[] buffer, <span style=\"color:blue\">int</span> offset, <span style=\"color:blue\">int</span> count) \r\n        {\r\n            <span style=\"color:blue\">byte</span>[] tempBuffer = <span style=\"color:blue\">new</span> <span style=\"color:blue\">byte</span>[count];\r\n            Buffer.BlockCopy(buffer, offset, tempBuffer,0,count);\r\n\r\n            <span style=\"color:blue\">lock</span> (audioSampleQueue) \r\n            {\r\n                audioSampleQueue.Enqueue(<span style=\"color:blue\">new</span> AudioSample(tempBuffer));\r\n            }\r\n\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">long</span> Position\r\n        {\r\n            <span style=\"color:blue\">get</span>\r\n            {\r\n                <span style=\"color:blue\">return</span> position;\r\n            }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                position = value;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">long</span> Length\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> 3500; }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> WaveFormat WaveFormat\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> waveFormat; }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">int</span> Read(<span style=\"color:blue\">byte</span>[] buffer, <span style=\"color:blue\">int</span> offset, <span style=\"color:blue\">int</span> count)\r\n        {\r\n            <span style=\"color:blue\">int</span> bytesToRead = 0;\r\n            <span style=\"color:blue\">int</span> required;\r\n            <span style=\"color:blue\">while</span> (bytesToRead &lt; count)\r\n            {\r\n                required = count - bytesToRead;\r\n\r\n                <span style=\"color:blue\">if</span> (audioSampleQueue.Count == 0)\r\n                {\r\n                    <span style=\"color:green\">//return emtpy sound</span>\r\n                    <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> i = 0; i &lt; required; i++)\r\n                    {\r\n                        buffer[offset + i] = 0;\r\n                    }\r\n\r\n                    bytesToRead += required;\r\n\r\n                }\r\n\r\n                <span style=\"color:blue\">else</span> \r\n                {\r\n                    <span style=\"color:green\">//read entire AudioSample</span>\r\n                    AudioSample sample = audioSampleQueue.Peek();\r\n                    <span style=\"color:blue\">int</span> bytesToReadInSample = sample.AudioBuffer.Length - sample.Position;\r\n\r\n                    Buffer.BlockCopy(sample.AudioBuffer, sample.Position, buffer, offset + bytesToRead, bytesToReadInSample);\r\n                    \r\n                    audioSampleQueue.Dequeue();\r\n\r\n                    bytesToRead = bytesToReadInSample ;\r\n\r\n                 }\r\n\r\n              }\r\n\r\n            <span style=\"color:blue\">return</span> bytesToRead;\r\n            \r\n        }\r\n\r\n    }\r\n    \r\n}\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2010-10-17T16:27:11.447-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "518642",
    "ThreadId": "231245",
    "Html": "\r\n<p>before adding a network into the equation, I would recommend recording and playing back on the same pc. You need to ensure the WaveFormat is the same for both record and playback as well.</p>\r\n",
    "PostedDate": "2010-11-08T01:46:11.017-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "671598",
    "ThreadId": "231245",
    "Html": "<p>&nbsp;</p>\r\n<p>did you find a&nbsp;solution&nbsp;to filter noise ?&nbsp;</p>",
    "PostedDate": "2011-09-14T02:19:42.257-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "672376",
    "ThreadId": "231245",
    "Html": "<p>Hi skcr,</p>\r\n<p>My updated code which works is on my local computer at home. I will send you that tomorrow.</p>\r\n<p>Thanks.</p>",
    "PostedDate": "2011-09-15T11:47:22.063-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "681153",
    "ThreadId": "231245",
    "Html": "<blockquote style=\"border: solid .1em #ccc; font-style: italic; margin: .25em 1em 0 1em; padding: 0 .25em 0 .25em;\"><strong>mbharodia wrote:</strong><br />\r\n<p>Hi skcr,</p>\r\n<p>My updated code which works is on my local computer at home. I will send you that tomorrow.</p>\r\n<p>Thanks.</p>\r\n</blockquote>\r\n<p>&nbsp;</p>\r\n<p>Hi mbharodia</p>\r\n<p>you forgot to send me your updated code ?</p>\r\n<p>can you please send it</p>\r\n<p>Thanks</p>",
    "PostedDate": "2011-10-06T23:29:15.78-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]