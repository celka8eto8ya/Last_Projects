[
  {
    "Id": "1360765",
    "ThreadId": "584879",
    "Html": "I'm using the <strong>WasapiLoopbackCapture</strong> in combination with <strong>WaveOut</strong> in order to create an echo effect that is global, i.e. affects the current audio output.\r<br />\n<br />\nHowever, my implementation, which seems pretty poor to me, doesn't work well at all. On every machine it sounds different, sometimes it even crashes.\r<br />\n<br />\nThis is the code I came up with. It records the audio output and every 75ms it plays the recorded stream using <strong>WaveOut</strong>.\r<br />\n<br />\nWhat am I doing wrong here, how can this be improved?<br />\n<pre><code>private static void CreateReverb()\n{\n    MemoryStream loopbackWave = new MemoryStream();\n    DateTime lastEcho = DateTime.Now;\n\n    WasapiLoopbackCapture waveIn = new WasapiLoopbackCapture();\n    waveIn.StartRecording();\n    waveIn.DataAvailable += delegate(object sender, WaveInEventArgs e)\n    {\n        loopbackWave.Write(e.Buffer, 0, e.BytesRecorded);\n        if ((DateTime.Now - lastEcho).TotalMilliseconds &gt; 75)\n        {\n            lastEcho = DateTime.Now;\n            byte[] loopbackBytes = loopbackWave.ToArray();\n            loopbackWave.Dispose();\n            loopbackWave = new MemoryStream();\n\n            using (MemoryStream waveStream = new MemoryStream())\n            {\n                using (WaveFileWriter waveFileWriter = new WaveFileWriter(waveStream, waveIn.WaveFormat))\n                {\n                    waveFileWriter.Write(loopbackBytes, 0, loopbackBytes.Length);\n                }\n                loopbackBytes = waveStream.ToArray();\n            }\n\n            for (int i = 0; i &lt; 3; i++)\n            {\n                ThreadPool.QueueUserWorkItem(delegate\n                {\n                    try\n                    {\n                        WaveOut waveOut = new WaveOut();\n                        waveOut.Init(new WaveFileReader(new MemoryStream(loopbackBytes)));\n                        waveOut.Volume = ReverbIntensity * .5f;\n                        waveOut.Play();\n                        Thread.Sleep(200);\n                        waveOut.Dispose();\n                    }\n                    catch { }\n                });\n            }\n        }\n    };\n}</code></pre>\n\n",
    "PostedDate": "2015-03-08T12:46:34.233-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]