[
  {
    "Id": "256672",
    "ThreadId": "75005",
    "Html": "<p>Hello!</p>\r\n<p>Is there any source snippet that shows how to record from WASAPI loopback to file or stream?</p>",
    "PostedDate": "2009-11-13T03:05:17.633-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "256690",
    "ThreadId": "75005",
    "Html": "<p>Okay, I wrote sample application. Here is it:&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">using</span> System;\r\n<span style=\"color:Blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:Blue\">using</span> System.Linq;\r\n<span style=\"color:Blue\">using</span> System.Text;\r\n<span style=\"color:Blue\">using</span> NAudio.CoreAudioApi;\r\n<span style=\"color:Blue\">using</span> NAudio;\r\n<span style=\"color:Blue\">using</span> NAudio.Wave;\r\n\r\n<span style=\"color:Blue\">namespace</span> SampleApp\r\n{\r\n    <span style=\"color:Blue\">class</span> Program\r\n    {\r\n        <span style=\"color:Green\">//Stops application and recording when key was pressed</span>\r\n        <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">volatile</span> <span style=\"color:Blue\">bool</span> stop = <span style=\"color:Blue\">false</span>;\r\n   \r\n        <span style=\"color:Green\">//Thread handler</span>\r\n        <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> KeyGet()\r\n        {\r\n            Console.ReadKey();\r\n            stop = <span style=\"color:Blue\">true</span>;\r\n        }\r\n\r\n        <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> Main(<span style=\"color:Blue\">string</span>[] args)\r\n        {\r\n            System.Threading.Thread Thread = <span style=\"color:Blue\">new</span> System.Threading.Thread(KeyGet);\r\n            Thread.Start();\r\n\r\n            <span style=\"color:Green\">//Default render endpoint</span>\r\n            MMDevice DefaultDevice = <span style=\"color:Blue\">new</span> MMDeviceEnumerator().GetDefaultAudioEndpoint(DataFlow.Render, Role.Multimedia);\r\n            Console.WriteLine(<span style=\"color:#A31515\">&quot;Default renderer: {1:S} ({0:S})&quot;</span>, DefaultDevice.Properties[2].Value, DefaultDevice.FriendlyName);\r\n        \r\n            <span style=\"color:Green\">//Device updating period and aligning</span>\r\n            <span style=\"color:Blue\">int</span> UpdatePeriod = (<span style=\"color:Blue\">int</span>)DefaultDevice.AudioClient.DefaultDevicePeriod;\r\n            <span style=\"color:Blue\">int</span> BlockAlign = DefaultDevice.AudioClient.MixFormat.BlockAlign;\r\n\r\n            WaveFileWriter Output = <span style=\"color:Blue\">new</span> WaveFileWriter(<span style=\"color:#A31515\">@&quot;C:\\Users\\Din\\Desktop\\sample.wav&quot;</span>, DefaultDevice.AudioClient.MixFormat);\r\n\r\n            <span style=\"color:Green\">//Initializes client</span>\r\n            DefaultDevice.AudioClient.Initialize(AudioClientShareMode.Shared, AudioClientStreamFlags.Loopback, 0, 0, DefaultDevice.AudioClient.MixFormat, Guid.Empty);\r\n            DefaultDevice.AudioClient.Start();\r\n\r\n            <span style=\"color:Blue\">while</span> (<span style=\"color:Blue\">true</span>)\r\n            {\r\n                <span style=\"color:Blue\">if</span> (DefaultDevice.AudioClient.AudioCaptureClient.GetNextPacketSize() != 0)\r\n                {\r\n                    <span style=\"color:Green\">//Reads data</span>\r\n                    <span style=\"color:Blue\">int</span> FramesToRead;\r\n                    AudioClientBufferFlags BufferFlags;\r\n                    IntPtr Data = DefaultDevice.AudioClient.AudioCaptureClient.GetBuffer(<span style=\"color:Blue\">out</span> FramesToRead, <span style=\"color:Blue\">out</span> BufferFlags);\r\n                    <span style=\"color:Blue\">byte</span>[] ReadData = <span style=\"color:Blue\">new</span> <span style=\"color:Blue\">byte</span>[FramesToRead * BlockAlign];\r\n\r\n                    System.Runtime.InteropServices.Marshal.Copy(Data, ReadData, 0, FramesToRead * BlockAlign);\r\n\r\n                    <span style=\"color:Blue\">try</span>\r\n                    {\r\n                        Output.WriteData(ReadData, 0, FramesToRead * BlockAlign);\r\n                    }\r\n                    <span style=\"color:Blue\">catch</span> (Exception Exception)\r\n                    {\r\n                        Console.WriteLine(<span style=\"color:#A31515\">&quot;Wrong: {0:S}&quot;</span>, Exception.Message);\r\n                    }\r\n\r\n                    <span style=\"color:Green\">//Debug</span>\r\n                    Console.WriteLine(<span style=\"color:#A31515\">&quot;{0:D} frames ({1:S})&quot;</span>, FramesToRead, BufferFlags.ToString());\r\n\r\n                    <span style=\"color:Green\">//Releases buffer</span>\r\n                    DefaultDevice.AudioClient.AudioCaptureClient.ReleaseBuffer(FramesToRead);\r\n                }\r\n                <span style=\"color:Blue\">else</span>\r\n                {\r\n                    Console.WriteLine(<span style=\"color:#A31515\">&quot;Waiting for data&quot;</span>);\r\n                }\r\n\r\n                <span style=\"color:Blue\">if</span> (stop == <span style=\"color:Blue\">true</span>)\r\n                {\r\n                    Console.WriteLine(<span style=\"color:#A31515\">&quot;Output was closed&quot;</span>);\r\n                    Output.Close();\r\n                    <span style=\"color:Blue\">break</span>;\r\n                }\r\n\r\n                System.Threading.Thread.Sleep(UpdatePeriod / 2 / 10000);\r\n            }\r\n        }\r\n    }\r\n}\r\n</pre>\r\n<pre></pre>\r\n</div>\r\n<pre style=\"color:#000000;font-family:Consolas, 'Courier New', Courier, monospace;font-size:1em;margin:8px\">Something wrong/bad? </pre>\r\n<pre style=\"color:#000000;font-family:Consolas, 'Courier New', Courier, monospace;font-size:1em;margin:8px\">Now it's time to convert stream to another format...</pre>",
    "PostedDate": "2009-11-13T04:11:42.373-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]