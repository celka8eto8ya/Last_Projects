[
  {
    "Id": "210572",
    "ThreadId": "62039",
    "Html": "<p>I'm looking into using naudio to play an RTP stream. It looks as though the correct way to approach this is to derive from WaveStream and override the Read() call. That makes sense, but I have questions about other possible overrides in that class. Do I need to override Length, Position and HasData ( or any other ) methods? If so, what makes sense to return for them?</p>\r\n<p>I'm most concerned about latency. Assuming I don't want to require ASIO, would the DirectSoundOut give me the lowest latency?</p>\r\n<p>One more issue - I'm writing a WPF app but a few of the classes ( like DirectSoundOut ) require passing in a System.Windows.Forms to the constructor and I don't have one available. Is it ok to pass null for this argument?</p>",
    "PostedDate": "2009-07-09T12:44:17.613-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "210906",
    "ThreadId": "62039",
    "Html": "<p>Here's some code I tried to use to get started. In theory this code was supposed to play random noise out the sound card. I don't get any errors and the Read() method is being called on my TestStream but nothing comes out of the sound card. Since I'm using WPF I'm just creating a Form to pass into the DirectSoundOut constructor - no idea if that should work.</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>  <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> TestStream : NAudio.Wave.WaveStream\r\n  </span>{\r\n    NAudio.Wave.WaveFormat _Format = <span style=\"color:Blue\">new</span> NAudio.Wave.WaveFormat();\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> NAudio.Wave.WaveFormat WaveFormat\r\n    {\r\n      <span style=\"color:Blue\">get</span>\r\n      {\r\n        <span style=\"color:Blue\">return</span> _Format;\r\n      }\r\n    }\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">long</span> Length\r\n    {\r\n      <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">long</span>.MaxValue / 32; }\r\n    }\r\n    <span style=\"color:Blue\">long</span> _Position;\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">long</span> Position\r\n    {\r\n      <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> _Position; }\r\n      <span style=\"color:Blue\">set</span> { }\r\n    }\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">bool</span> CanSeek\r\n    {\r\n      <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">false</span>; }\r\n    }\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">bool</span> HasData(<span style=\"color:Blue\">int</span> count)\r\n    {\r\n      <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">true</span>;\r\n    }\r\n\r\n    Random _Rand = <span style=\"color:Blue\">new</span> Random();\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">int</span> Read(<span style=\"color:Blue\">byte</span>[] buffer, <span style=\"color:Blue\">int</span> offset, <span style=\"color:Blue\">int</span> count)\r\n    {\r\n      _Rand.NextBytes(buffer);\r\n      _Position += count;\r\n      <span style=\"color:Blue\">return</span> count;\r\n    }\r\n  }\r\n\r\n\r\n<span style=\"color:Green\">// and here's where I start the play</span>\r\n\r\n    System.Windows.Forms.Form f = <span style=\"color:Blue\">new</span> System.Windows.Forms.Form();\r\n    TestStream _Stream;\r\n    NAudio.Wave.DirectSoundOut _Dso;\r\n    <span style=\"color:Blue\">protected</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">void</span> OnInitialized(EventArgs e)\r\n    {\r\n      <span style=\"color:Blue\">base</span>.OnInitialized(e);\r\n      <span style=\"color:Blue\">try</span>\r\n      {\r\n        _Stream = <span style=\"color:Blue\">new</span> TestStream();\r\n        _Dso = <span style=\"color:Blue\">new</span> NAudio.Wave.DirectSoundOut(f, 1000);\r\n        _Dso.Init(_Stream);\r\n        _Dso.Play();\r\n      }\r\n      <span style=\"color:Blue\">catch</span> (Exception ex)\r\n      {\r\n        MessageBox.Show(ex.Message);\r\n      }\r\n    }\r\n\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-07-10T10:24:11.557-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]