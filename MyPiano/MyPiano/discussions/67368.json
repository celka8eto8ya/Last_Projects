[
  {
    "Id": "228947",
    "ThreadId": "67368",
    "Html": "<p>Hi, I noticed in the NAudio Demo from the latest version of NAudio that if Filename is empty, then it opens a fileopendialog. <br>So if I paste a http link in that window and click OK, I've noticed that the FileName string looks something like this:</p>\r\n<p>&quot;C:\\\\Users\\\\User\\\\AppData\\\\Local\\\\Microsoft\\\\Windows\\\\Temporary Internet Files\\\\Content.IE5\\\\2FO1NTK2\\\\20s[1].mp3&quot;</p>\r\n<p>How does this exactly happen? I don't want an OpenFileDialog because the path I want to play is already stated elsewhere. <br>And in my case, I use a string which looks something like this &quot;http://domainname.com/file.mp3&quot;</p>\r\n<p>This creates an error stating that URL is not supported. So I guess there's something I'm missing here?</p>\r\n<p>Edit: I'm thinking, there must be some code somewhere which actually starts a download stream or something? Since the Filename string path ends up in Temporary Internet Files?<br>I've tried stepping into the code and I can't see anything of what's happening &quot;behind&quot; the OpenFileDialog. <br>Can I alter the code somewhat to make it do just that?</p>\r\n<p>Edit: I found the PlayMp3FromUrl code on StackOverflow. But the thing is, I get an error stating that &quot;WaveOut&quot; doesn't take the number of arguments.<br>Has there been any changes to the WaveOut.cs since PlayMp3FromUrl was written?<br><br>This is the line which fails:<br>&quot;using (WaveOut waveOut = new WaveOut(0, 500, null))&quot;</p>\r\n<p>If I remove all arguments so is says &quot;new WaveOut())&quot; the code compiles and I can hear the first microsecond of the mp3 file. But it freezes after that, which is probably because of the lack of arguments I guess? I think atleast that the &quot;500&quot; means latency settings.</p>",
    "PostedDate": "2009-08-29T05:23:27.843-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "229651",
    "ThreadId": "67368",
    "Html": "<p>Hi,</p>\r\n<p>the WaveOut constructor has indeed changed in the most recent check-in (currently getting ready for a 1.3 release, but not quite stable yet). Are you creating the WaveOut class on a background thread? In that case, you will need to supply a window handle directly or ask it to use Function callbacks.</p>",
    "PostedDate": "2009-09-01T04:18:05.133-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "229681",
    "ThreadId": "67368",
    "Html": "<p>No, I don't think it's run in a background thread. I'm not an amazing C# programmerer at all. I'm just trying to create an application which allows me to store my own created songs, like a library. Because my head is getting pretty full :p<br>Anyway, I just thought I'd give it a go and so far it's gone pretty well actually, considering my complete lack of C# insight.</p>\r\n<p>Btw, I do think I need to do the WaveOut class on a background thread because I tried to replace it WaveOut with DirectSoundOut and the playback worked! But the Form froze completely<br>.Which is probably because the current thread is busy with the download stream or something. <br>How can I supply a window handle or ask it to use Function callbacks? I've tried lots of stuff, but the syntax is always wrong. And I can't understand what the WaveOut class want as arguments, if any.</p>\r\n<p>This is the code I'm using to download a stream, as of now:<br><br></p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> PlayMp3FromUrl(<span style=\"color:Blue\">string</span> url)<br>    {<br>        <span style=\"color:Blue\">using</span> (MemoryStream ms = <span style=\"color:Blue\">new</span> MemoryStream())<br>        {<br>            <span style=\"color:Blue\">using</span> (Stream stream = WebRequest.Create(url)<br>                .GetResponse().GetResponseStream())<br>            {<br>                <span style=\"color:Blue\">byte</span>[] buffer = <span style=\"color:Blue\">new</span> <span style=\"color:Blue\">byte</span>[32768];<br>                <span style=\"color:Blue\">int</span> read;<br>                <span style=\"color:Blue\">while</span> ((read = stream.Read(buffer, 0, buffer.Length)) &gt; 0)<br>                {<br>                    ms.Write(buffer, 0, read);<br>                }<br>            }<br><br>            ms.Position = 0;<br><br>            <span style=\"color:Blue\">using</span> (WaveStream blockAlignedStream =<br>                <span style=\"color:Blue\">new</span> BlockAlignReductionStream(<br>                    WaveFormatConversionStream.CreatePcmStream(<br>                        <span style=\"color:Blue\">new</span> Mp3FileReader(ms))))<br>            {<br>                <span style=\"color:Blue\">using</span> (WaveOut waveOut = <span style=\"color:Blue\">new</span> WaveOut(0, 500, <span style=\"color:Blue\">null</span>))<br>                {<br>                    waveOut.Init(blockAlignedStream);<br>                    waveOut.Play();<br>                    <span style=\"color:Blue\">while</span> (blockAlignedStream.Position &lt; blockAlignedStream.Length)<br>                    {<br>                        System.Threading.Thread.Sleep(100);<br>                    }<br>                }<br>            }<br>        }<br>    }<br><br>The code fails at <span style=\"color:blue\">using</span> (WaveOut waveOut = <span style=\"color:blue\">new</span> WaveOut(0, 500, <span style=\"color:blue\">null</span>))<br>And the While loop is probably what's freezing the form. Could you care to explain a little further how I can do what's needed to make this work?<br>I'm also curious on how and where the local cache is stored when doing a WebRequest like this. <br>It's probably a waste if the already downloaded buffer can't be cached in some way. So I won't need to download the same stream over and over again.<br><br></pre>\r\n</div>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-09-01T05:45:23.063-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]