[
  {
    "Id": "825863",
    "ThreadId": "352809",
    "Html": "\r\n<p>I've been trying out NAudio and it seems very very interesting, at least for me to handle audio playback directly from streams in a WPF application.</p>\r\n<p>Right now I'm trying to assemble something with basic functionalities, so I'm trying to playing with some code from the example from the demos. I have the following class that loads and plays MP3s:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> AudioPlayer : IDisposable\r\n    {\r\n        IWavePlayer playbackDevice;\r\n        WaveStream fileStream;\r\n        SampleAggregator aggregator;\r\n \r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">event</span> EventHandler&lt;FftEventArgs&gt; FftCalculated\r\n        {\r\n            add { aggregator.FftCalculated &#43;= value; }\r\n            remove { aggregator.FftCalculated -= value; }\r\n        }\r\n \r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">event</span> EventHandler&lt;MaxSampleEventArgs&gt; MaximumCalculated\r\n        {\r\n            add { aggregator.MaximumCalculated &#43;= value; }\r\n            remove { aggregator.MaximumCalculated -= value; }\r\n        }\r\n \r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">event</span> EventHandler PlaybackStopped\r\n        {\r\n            add { playbackDevice.PlaybackStopped &#43;= value; }\r\n            remove { playbackDevice.PlaybackStopped -= value; }\r\n        }\r\n \r\n        <span style=\"color:blue\">public</span> PlaybackState PlaybackState\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> playbackDevice.PlaybackState; }\r\n        }\r\n \r\n        <span style=\"color:blue\">public</span> AudioPlayer()\r\n        {\r\n            aggregator = <span style=\"color:blue\">new</span> SampleAggregator();\r\n            aggregator.NotificationCount = 882;\r\n            aggregator.PerformFFT = <span style=\"color:blue\">true</span>;\r\n        }\r\n \r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Load(<span style=\"color:blue\">string</span> fileName)\r\n        {\r\n            Stop();\r\n            CloseFile();\r\n            EnsureDeviceCreated();\r\n            OpenFile(fileName);\r\n        }\r\n \r\n        <span style=\"color:blue\">void</span> CloseFile()\r\n        {\r\n            <span style=\"color:blue\">if</span> (fileStream == <span style=\"color:blue\">null</span>)\r\n                <span style=\"color:blue\">return</span>;\r\n            fileStream.Dispose();\r\n            fileStream = <span style=\"color:blue\">null</span>;\r\n        }\r\n \r\n        <span style=\"color:blue\">void</span> OpenFile(<span style=\"color:blue\">string</span> fileName)\r\n        {\r\n            <span style=\"color:blue\">var</span> inputStream = CreateInputStream(fileName);\r\n            playbackDevice.Init(<span style=\"color:blue\">new</span> SampleToWaveProvider(inputStream));\r\n        }\r\n \r\n        ISampleProvider CreateInputStream(<span style=\"color:blue\">string</span> fileName)\r\n        {\r\n            <span style=\"color:blue\">if</span> (fileName.EndsWith(<span style=\"color:#a31515\">&quot;.wav&quot;</span>))\r\n                fileStream = OpenWavStream(fileName);\r\n            <span style=\"color:blue\">else</span> <span style=\"color:blue\">if</span> (fileName.EndsWith(<span style=\"color:#a31515\">&quot;.mp3&quot;</span>))\r\n                fileStream = <span style=\"color:blue\">new</span> Mp3FileReader(fileName);\r\n            <span style=\"color:blue\">else</span>\r\n                <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> InvalidOperationException(<span style=\"color:#a31515\">&quot;Unsupported extension&quot;</span>);\r\n \r\n            SampleChannel inputStream = <span style=\"color:blue\">new</span> SampleChannel(fileStream);\r\n            NotifyingSampleProvider sampleStream = <span style=\"color:blue\">new</span> NotifyingSampleProvider(inputStream);\r\n            sampleStream.Sample &#43;= (s, e) =&gt; aggregator.Add(e.Left);\r\n            <span style=\"color:blue\">return</span> sampleStream;\r\n        }\r\n \r\n        <span style=\"color:blue\">static</span> WaveStream OpenWavStream(<span style=\"color:blue\">string</span> fileName)\r\n        {\r\n            WaveStream readerStream = <span style=\"color:blue\">new</span> WaveFileReader(fileName);\r\n            <span style=\"color:blue\">if</span> (readerStream.WaveFormat.Encoding != WaveFormatEncoding.Pcm) {\r\n                readerStream = WaveFormatConversionStream.CreatePcmStream(readerStream);\r\n                readerStream = <span style=\"color:blue\">new</span> BlockAlignReductionStream(readerStream);\r\n            }\r\n            <span style=\"color:blue\">return</span> readerStream;\r\n        }\r\n \r\n        <span style=\"color:blue\">void</span> EnsureDeviceCreated()\r\n        {\r\n            <span style=\"color:blue\">if</span> (playbackDevice != <span style=\"color:blue\">null</span>)\r\n                <span style=\"color:blue\">return</span>;\r\n            CreateDevice();\r\n        }\r\n \r\n        <span style=\"color:blue\">void</span> CreateDevice()\r\n        {\r\n            playbackDevice = <span style=\"color:blue\">new</span> WaveOut();\r\n        }\r\n \r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Play()\r\n        {\r\n            <span style=\"color:blue\">if</span> (playbackDevice != <span style=\"color:blue\">null</span> &amp;&amp; fileStream != <span style=\"color:blue\">null</span> &amp;&amp; playbackDevice.PlaybackState != PlaybackState.Playing)\r\n                playbackDevice.Play();\r\n        }\r\n \r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Pause()\r\n        {\r\n            <span style=\"color:blue\">if</span> (playbackDevice == <span style=\"color:blue\">null</span>)\r\n                <span style=\"color:blue\">return</span>;\r\n            playbackDevice.Pause();\r\n        }\r\n \r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Stop()\r\n        {\r\n            <span style=\"color:blue\">if</span> (playbackDevice == <span style=\"color:blue\">null</span>)\r\n                <span style=\"color:blue\">return</span>;\r\n            playbackDevice.Stop();\r\n            fileStream.Position = 0;\r\n        }\r\n \r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Dispose()\r\n        {\r\n            Stop();\r\n            CloseFile();\r\n            <span style=\"color:blue\">if</span> (playbackDevice != <span style=\"color:blue\">null</span>) {\r\n                playbackDevice.Dispose();\r\n                playbackDevice = <span style=\"color:blue\">null</span>;\r\n            }\r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n<p>Then I try the aformentioned with the following:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>    <span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> MainWindow : Window\r\n    {\r\n        AudioPlayer player;\r\n \r\n        <span style=\"color:blue\">void</span> Button_Click(<span style=\"color:blue\">object</span> sender, RoutedEventArgs e)\r\n        {\r\n            player = <span style=\"color:blue\">new</span> AudioPlayer();\r\n            player.Load(<span style=\"color:#a31515\">@&quot;c:\\DIR1\\P027I003.mp3&quot;</span>);\r\n \r\n            player.PlaybackStopped &#43;= <span style=\"color:blue\">new</span> EventHandler(player_PlaybackStopped);\r\n            Debug.Print(<span style=\"color:#a31515\">&quot;PlaybackState: &quot;</span> &#43; player.PlaybackState);\r\n \r\n            player.Play();\r\n            Debug.Print(<span style=\"color:#a31515\">&quot;play!&quot;</span>);\r\n            Debug.Print(<span style=\"color:#a31515\">&quot;PlaybackState: &quot;</span> &#43; player.PlaybackState);\r\n        }\r\n \r\n        <span style=\"color:blue\">void</span> player_PlaybackStopped(<span style=\"color:blue\">object</span> sender, EventArgs e)\r\n        {\r\n            Debug.Print(<span style=\"color:#a31515\">&quot;playback stopped&quot;</span>);\r\n            Debug.Print(<span style=\"color:#a31515\">&quot;PlaybackState: &quot;</span> &#43; player.PlaybackState);\r\n        }\r\n</pre>\r\n</div>\r\n<p>When the MP3 file finishes, player_PlaybackStopped is invoked, but the PlaybackState remains at Playing.</p>\r\n<p>I looked at WaveOut.cs and it seems that RaisePlaybackStoppedEvent is raised at the end of the stream, but that the PlaybackState is not changed.</p>\r\n<p>Am I doing something incorrectly?</p>\r\n<p>I'm using NAudio 1.5.</p>\r\n",
    "PostedDate": "2012-04-19T03:14:44.317-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "828972",
    "ThreadId": "352809",
    "Html": "<p>probably you have passed a never-ending stream in. Your code looks based on very old sample code. The new MP3FileReader doesn't need the use of BlockAlignReduction stream or an additional WaveFormatConversionStream.</p>",
    "PostedDate": "2012-04-26T08:59:32.55-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "829668",
    "ThreadId": "352809",
    "Html": "<p>Thanks for your answer. I stripped&nbsp;BlockAlignReduction and&nbsp;WaveFormatConversionStream from the code, but now I realize that you are saying they are not necessary for MP3FileReader whereas in the code I posted above they are applied to WAV streams,  not MP3 streams. Should they still be used for WAV streams?</p>\n<p>Also, I have cleaner code with the workaround I came up with on StackOverflow at&nbsp;<a href=\"http://stackoverflow.com/questions/10243031/why-does-playbackstate-remain-at-playing-after-playbackstopped-fires\">http://stackoverflow.com/questions/10243031/why-does-playbackstate-remain-at-playing-after-playbackstopped-fires</a></p>\n<p>Would you mind having a quick look?</p>\n<p>Many thanks!</p>",
    "PostedDate": "2012-04-28T06:36:37.207-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "829674",
    "ThreadId": "352809",
    "Html": "<p>unless you are playing compressed WAV files (e.g. G.711 then no WaveFormatConversionStream step is necessary)</p>",
    "PostedDate": "2012-04-28T07:05:11.963-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]