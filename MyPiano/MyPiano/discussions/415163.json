[
  {
    "Id": "967178",
    "ThreadId": "415163",
    "Html": "\r\n<p>I am trying to build some audio analysis tool using naudio. I find it too much playback oriented and I am having quite a lot of troubles.</p>\r\n<p>I also believe it should be refactored better so that all core classes (audio stream definition, providers) can be really portable and then have all other things (ASIO, WM and so on) as other nuget packages.</p>\r\n<p>&nbsp;</p>\r\n<p>I do not understand why winforms controls are in&nbsp;the&nbsp;library itself. I find&nbsp;the&nbsp;source code confusing and a lot of dependencies that are not needed. Is htere any plan to move to something like most of&nbsp;the&nbsp;other nuget packaes\r\n are doing?</p>\r\n<p>&nbsp;</p>\r\n<p>I would also like some help I have some very trivial code that should be computing the db peak and RMS of a track.</p>\r\n<p>The results are really wrong.</p>\r\n<p>&nbsp;</p>\r\n<p>I am using directly the iff file reader since i do not have access to the SampleCount&nbsp;property via the audiofilereader.</p>\r\n<p>&nbsp;</p>\r\n<p>Any help .. pretty sure I am doing something wrong</p>\r\n<p>&nbsp;</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">void</span> Compute() \r\n{\r\n           <span style=\"color:blue\">var</span> audioFile = <span style=\"color:#a31515\">@&quot;C:\\Users\\colombod\\Downloads\\Trees V2.aif&quot;</span>;\r\n            <span style=\"color:blue\">double</span>[] audioMono;\r\n            <span style=\"color:blue\">double</span>[] audioLeft;\r\n            <span style=\"color:blue\">double</span>[] audioRight;\r\n            <span style=\"color:blue\">int</span> window;\r\n\r\n            <span style=\"color:blue\">using</span> (<span style=\"color:blue\">var</span> stream = <span style=\"color:blue\">new</span> NAudio.Wave.AiffFileReader(audioFile))\r\n            {\r\n                Console.WriteLine(<span style=\"color:#a31515\">&quot;Channels {0} Rate{1} Bit{2}&quot;</span>,stream.WaveFormat.Channels, stream.WaveFormat.SampleRate, stream.WaveFormat.BitsPerSample);\r\n                <span style=\"color:blue\">var</span> bytesPerSample = (stream.WaveFormat.BitsPerSample / 8);\r\n                 window = (20 *stream.WaveFormat.SampleRate)/1000;\r\n\r\n                Console.WriteLine(<span style=\"color:#a31515\">&quot;Buffer size required {0}&quot;</span>,window);\r\n\r\n                <span style=\"color:blue\">var</span> bufferSize = (<span style=\"color:blue\">int</span>)(window* bytesPerSample * stream.WaveFormat.Channels);\r\n                <span style=\"color:blue\">var</span> dstSize = stream.SampleCount;\r\n\r\n                audioMono = <span style=\"color:blue\">new</span> <span style=\"color:blue\">double</span>[dstSize];\r\n                audioLeft = <span style=\"color:blue\">new</span> <span style=\"color:blue\">double</span>[dstSize];\r\n                audioRight = <span style=\"color:blue\">new</span> <span style=\"color:blue\">double</span>[dstSize];\r\n\r\n                <span style=\"color:blue\">var</span> buffer = <span style=\"color:blue\">new</span> <span style=\"color:blue\">byte</span>[bufferSize];\r\n               \r\n                <span style=\"color:blue\">var</span> dst = 0;\r\n                <span style=\"color:blue\">var</span> read = 0;\r\n               \r\n                <span style=\"color:blue\">while</span> ( ( read = stream.Read(buffer, 0, bufferSize) )&gt; 0)\r\n                {\r\n\r\n                    <span style=\"color:blue\">var</span> sampleCount = (read / bytesPerSample) / stream.WaveFormat.Channels;\r\n\r\n                    <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> i = 0; i &lt; sampleCount; i&#43;&#43;)\r\n                    {\r\n                        <span style=\"color:blue\">var</span> sum = 0.0;\r\n\r\n                        <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> j = 0; j &lt; stream.WaveFormat.Channels; j&#43;&#43;)\r\n                        {\r\n                            <span style=\"color:blue\">var</span> off = (j*bytesPerSample);\r\n                            <span style=\"color:blue\">var</span> sSample = BitConverter.ToInt16(buffer, i &#43; off);\r\n                            <span style=\"color:blue\">var</span> sample = sSample / ( sSample &gt;= 0 ? 32767.0 : 32768.0);\r\n                            <span style=\"color:blue\">if</span>(j == 0)\r\n                            {\r\n                                audioLeft[i &#43; dst] = sample;\r\n                            }\r\n                            <span style=\"color:blue\">else</span>\r\n                            {\r\n                                audioRight[i &#43; dst] = sample;\r\n                            }\r\n                            sum &#43;= sample;\r\n                        }\r\n                        audioMono[i &#43; dst] = sum / stream.WaveFormat.Channels;\r\n                    }\r\n\r\n                    dst &#43;= sampleCount;\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n            <span style=\"color:blue\">var</span> rms = audioMono.Aggregate(0.0, (current, f) =&gt; current &#43; (f*f));\r\n\r\n            rms = rms / audioMono.Length;\r\n\r\n            rms = Math.Sqrt(rms);\r\n            <span style=\"color:blue\">var</span> decibel = 20 * Math.Log10(rms);\r\n\r\n            <span style=\"color:blue\">var</span> peak =  20 * Math.Log10(audioMono.Max());\r\n\r\n            <span style=\"color:blue\">var</span> rmsl = audioLeft.Aggregate(0.0, (current, f) =&gt; current &#43; (f * f));\r\n\r\n            rmsl = rmsl / audioLeft.Length;\r\n\r\n            rmsl = Math.Sqrt(rmsl);\r\n            <span style=\"color:blue\">var</span> decibell = 20 * Math.Log10(rmsl);\r\n\r\n            <span style=\"color:blue\">var</span> peakl = 20 * Math.Log10(audioLeft.Max());\r\n\r\n            <span style=\"color:blue\">var</span> rmsr = audioRight.Aggregate(0.0, (current, f) =&gt; current &#43; (f * f));\r\n\r\n            rmsr = rmsr / audioRight.Length;\r\n\r\n            rmsr = Math.Sqrt(rmsr);\r\n            <span style=\"color:blue\">var</span> decibelr = 20 * Math.Log10(rmsr);\r\n\r\n            <span style=\"color:blue\">var</span> peakr = 20 * Math.Log10(audioRight.Max());\r\n\r\n\r\n        }\r\n</pre>\r\n</div>\r\n<p></p>\r\n",
    "PostedDate": "2012-12-21T10:52:33.82-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "967347",
    "ThreadId": "415163",
    "Html": "\r\n<p>It looks like your offsets are wrong. Samples are interleaved left, right etc. Try incrementing off by bytesPerSample every time you read a sample (off needs to be declared outside the top loop);</p>\r\n<pre><pre><span style=\"color:blue\">var</span> sSample = BitConverter.ToInt16(buffer, off);<br>off+= bytesPerSample;<br></pre>\r\n</pre>\r\n",
    "PostedDate": "2012-12-22T00:25:01.44-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]