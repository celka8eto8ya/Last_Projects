[
  {
    "Id": "1347150",
    "ThreadId": "578924",
    "Html": "Hi, I'm trying to write mixers data to file but can't get it stopping. <br />\nThis is the code I use for data writing. I also have added writer.Dispose() on Stop function but never get to there because mixer data just comes in. Maybe it's a wrong place to write output on BufferedWaveProvider.DataAvailable? <br />\n<pre><code>private void RecorderOnDataAvailable(object sender, WaveInEventArgs waveInEventArgs)\n        {\n            bufferedWaveProvider.AddSamples(waveInEventArgs.Buffer, 0, waveInEventArgs.BytesRecorded);\n            lock (this)\n            {\n                int nReadF = 0;\n                float[] bufferF = new float[1024];\n                byte[] bufferB = new byte[2048];\n                WaveBuffer destWaveBuffer = new WaveBuffer(bufferB);\n                int destOffset = 0;\n                float volume = 1;\n                do\n                {\n                    destOffset = 0;\n                    nReadF = waveMixer.Read(bufferF, 0, bufferF.Length);\n                    for (int n = 0; n &lt; bufferF.Length; n++)  //  (HTML FORMATTING GLITCH)\n                    {\n\n                        // adjust volume\n                        float sample32 = bufferF[n] * volume;\n                        // clip\n                        if (sample32 &gt; 1.0f)\n                            sample32 = 1.0f;\n                        if (sample32 &lt; -1.0f)\n                            sample32 = -1.0f;\n\n                        destWaveBuffer.ShortBuffer[destOffset++] = (short)(sample32 * 32767);\n                    }\n\n                    writer.Write(bufferB, 0, nReadF * 2);\n                    destWaveBuffer.Clear();\n                }\n                while (nReadF &gt; 0);\n            }\n        }</code></pre>\n\nAny advice or sample would be cool. I looked all over the internet for sample how to write this output to file but didn't find any. Mark you said you will get us this sample later :)<br />\n",
    "PostedDate": "2015-01-29T07:53:15.913-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1347313",
    "ThreadId": "578924",
    "Html": "I'm not clear what you're doing here. What are you mixing with? What's reading from your bufferedWaveProvider?\r<br />\nHave you seen my article <a href=\"http://markheath.net/post/how-to-record-and-play-audio-at-same\" rel=\"nofollow\">here</a>?<br />\n",
    "PostedDate": "2015-01-29T14:47:13.243-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1348186",
    "ThreadId": "578924",
    "Html": "Yes I have read your article there and most of the logic is from there but I don't know how to implement saving MixingSampleProvider to a file.\r<br />\n<br />\nHere is my all code<br />\n<pre><code>class SoundRecorder\n    {\n        private WaveIn recorder;\n        private WaveIn backRecorder;\n        private BufferedWaveProvider bufferedWaveProvider, bufferedWaveProvider2;\n        private MixingSampleProvider waveMixer;\n\n        private WaveFileWriter writer;\n\n        public void Record()\n        {\n            lock (this)\n            {\n                var format = WaveFormat.CreateIeeeFloatWaveFormat(11500, 2);\n\n\n                recorder = new WaveIn();\n                recorder.WaveFormat = format;\n                recorder.DataAvailable += RecorderOnDataAvailable;\n                recorder.RecordingStopped += recorder_RecordingStopped;\n                bufferedWaveProvider = new BufferedWaveProvider(recorder.WaveFormat) { DiscardOnBufferOverflow = true };\n\n                backRecorder = new WaveIn();\n                backRecorder.DeviceNumber = 1;\n                backRecorder.DataAvailable += backRecorder_DataAvailable;\n                backRecorder.WaveFormat = format;\n                bufferedWaveProvider2 = new BufferedWaveProvider(backRecorder.WaveFormat) { DiscardOnBufferOverflow = true };\n                waveMixer = new MixingSampleProvider(format);\n                waveMixer.ReadFully = false;\n                waveMixer.AddMixerInput(bufferedWaveProvider);\n                waveMixer.AddMixerInput(bufferedWaveProvider2);\n\n                writer = new WaveFileWriter(&quot;woho.wav&quot;, format);\n\n                recorder.StartRecording();\n                backRecorder.StartRecording();\n\n            }\n\n        }\n\n        void recorder_RecordingStopped(object sender, StoppedEventArgs e)\n        {\n            waveMixer.RemoveAllMixerInputs();\n        }\n\n        void backRecorder_DataAvailable(object sender, WaveInEventArgs waveInEventArgs)\n        {\n            bufferedWaveProvider2.AddSamples(waveInEventArgs.Buffer, 0, waveInEventArgs.BytesRecorded);\n        }\n        private void RecorderOnDataAvailable(object sender, WaveInEventArgs waveInEventArgs)\n        {\n            bufferedWaveProvider.AddSamples(waveInEventArgs.Buffer, 0, waveInEventArgs.BytesRecorded);\n            lock (this)\n            {\n                int nReadF = 0;\n                float[] bufferF = new float[1024];\n                byte[] bufferB = new byte[2048];\n                WaveBuffer destWaveBuffer = new WaveBuffer(bufferB);\n                int destOffset = 0;\n                float volume = 1;\n                do\n                {\n                    destOffset = 0;\n                    nReadF = waveMixer.Read(bufferF, 0, bufferF.Length);\n                    for (int n = 0; n &lt; bufferF.Length; n++)  //  (HTML FORMATTING GLITCH)\n                    {\n\n                        // adjust volume\n                        float sample32 = bufferF[n] * volume;\n                        // clip\n                        if (sample32 &gt; 1.0f)\n                            sample32 = 1.0f;\n                        if (sample32 &lt; -1.0f)\n                            sample32 = -1.0f;\n\n                        destWaveBuffer.ShortBuffer[destOffset++] = (short)(sample32 * 32767);\n                    }\n\n                    writer.Write(bufferB, 0, nReadF * 2);\n                    destWaveBuffer.Clear();\n                }\n                while (nReadF &gt; 0);\n            }\n        }\n\n        public void Stop()\n        {\n            recorder.StopRecording();\n            backRecorder.StopRecording();\n            writer.Dispose();\n\n        }\n    }</code></pre>\n\nAll I wan't is to save waveMixer output to a file. I don't need to play it immediately<br />\n",
    "PostedDate": "2015-02-02T03:06:22.87-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1348232",
    "ThreadId": "578924",
    "Html": "I'd do something like this (not tested, just an example):<br />\n<pre><code>        void backRecorder_DataAvailable(object sender, WaveInEventArgs waveInEventArgs)\n        {\n            bufferedWaveProvider2.AddSamples(waveInEventArgs.Buffer, 0, waveInEventArgs.BytesRecorded);\n            MixToFile();\n        }\n        private void RecorderOnDataAvailable(object sender, WaveInEventArgs waveInEventArgs)\n        {\n            bufferedWaveProvider.AddSamples(waveInEventArgs.Buffer, 0, waveInEventArgs.BytesRecorded);\n            MixToFile();\n        }\n        private void MixToFile(object sender, WaveInEventArgs waveInEventArgs)\n        {\n            var availableSamples = Math.Min(bufferedWaveProvider1.BytesAvailable,bufferedWaveProvider2.BytesAvailable) / 4;\n            if (availableSamples &gt; 0)\n            {\n                float[] buffer = new float[availableSamples]\n                var samples = mixer.Read(buffer, 0, samples)\n                writer.WriteSamples(buffer,0,samples);\n            }\n        }\n</code></pre>\n\nTo do your volume and clipping, I'd create a custom ISampleProvider to put after the mixer. This keeps the code clean.\r<br />\n<br />\nAlso, only Dispose your writer once the RecordingFinished event has fired.<br />\n",
    "PostedDate": "2015-02-02T05:51:26.213-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]