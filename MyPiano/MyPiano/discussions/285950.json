[
  {
    "Id": "724354",
    "ThreadId": "285950",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I'm working with the naudio c# example. I'm trying to record some audio from the mic, using the&nbsp;NAudioDemo RecordingDemo (recordingPanel.cs).</p>\r\n<p>The process works fine.</p>\r\n<p>My question is: how do I convert the produced wav to an a-Law raw byte array?</p>\r\n<p>I suppose I could also write to a memorystream instead of writing to the disk, but this looks easy to me to be done.</p>\r\n<p>I found this link</p>\r\n<p>http://naudio.codeplex.com/discussions/83068</p>\r\n<p>containing something I considered helpfull, but I couldn't come up with a solution.</p>\r\n<p>Thanks in advance for any kind of help</p>\r\n",
    "PostedDate": "2012-01-12T09:35:42.723-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "724666",
    "ThreadId": "285950",
    "Html": "<p>NAudio includes a fully managed A law encoder, in the ALawEncoder class, allowing you to pass in 16 bit samples and get out 8 bit a-law encoded bytes.</p>\r\n<p>Alternatively, the simplest way to convert files would be to pass your WaveFileReader into a WaveFormatConversionStream (with target format of WaveFormat.CreateALawFormat(...)) and then pass that into WaveFileWriter.CreateWaveFile</p>",
    "PostedDate": "2012-01-13T01:36:19.093-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "724771",
    "ThreadId": "285950",
    "Html": "<p>Thanks Mark, I went with the ALawEncoder class and it works like a charm.</p>\r\n<p>I had a look here</p>\r\n<p>&nbsp;http://bit.ly/wp45x5&nbsp;</p>\r\n<p>and reused like this</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>        <span style=\"color: blue;\">byte</span>[] GetALawBytes(<span style=\"color: blue;\">ref</span> MemoryStream ms)\r\n        {\r\n            <span style=\"color: blue;\">byte</span>[] data = ms.ToArray();\r\n            <span style=\"color: blue;\">int</span> length = ms.ToArray().Length;\r\n            <span style=\"color: blue;\">byte</span>[] encoded = <span style=\"color: blue;\">new</span> <span style=\"color: blue;\">byte</span>[length/ 2];\r\n            <span style=\"color: blue;\">int</span> outIndex = 0;\r\n            \r\n            <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> n = 0; n &lt; length; n += 2)\r\n            {\r\n                encoded[outIndex++] = NAudio.Codecs.ALawEncoder.LinearToALawSample(BitConverter.ToInt16(data, n));\r\n            }\r\n\r\n            <span style=\"color: blue;\">return</span> encoded;\r\n        }\r\n</pre>\r\n</div>\r\n<p>To keep it simple, I saved the byte array to the disk and played the file with audacity. It works as intended!</p>\r\n<p>Thanks!</p>",
    "PostedDate": "2012-01-13T07:04:17.603-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "724810",
    "ThreadId": "285950",
    "Html": "<p>I have another question though: how do I strip the wav header from the memoryStream?</p>\r\n<p>Or, on the other hand, how can I determine how long the wav header is? Is it like 16 bytes, 32? What else? In this case I could simply skip those bytes from being encoded.</p>",
    "PostedDate": "2012-01-13T08:12:14.38-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "724832",
    "ThreadId": "285950",
    "Html": "<p>use the WaveFileReader - it can read from a MemoryStream, and then just call the Read method to get the actual audio data out.</p>",
    "PostedDate": "2012-01-13T08:53:42.403-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "726536",
    "ThreadId": "285950",
    "Html": "<p>Hmm,</p>\r\n<p>I'm having some troubles with the recorded audio. Basically the above function do the job pretty well.</p>\r\n<p>But, there is some noise at the beginning of the file and this noise is a consequence of the fact that I'm encoding the wav header.</p>\r\n<p>So, you told me to use wavefileREader and all the rest.</p>\r\n<p>But...</p>\r\n<p>I get this error when trying to read a memorystream containing the recorded audio</p>\r\n<p><strong>Invalid WAV file - No fmt chunk found</strong></p>\r\n<p>Looks like the fmt chucnk will be added when closing the writer, but since my writer is connected to a memorystream, the result is that my memorystream is empty.</p>\r\n<p>To keep it simple, I post the code I'm using, I guess there is something wrong, but have no idea o'what.</p>\r\n<p>&nbsp;</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">using</span> System;\r\n<span style=\"color: blue;\">using</span> System.Collections.Generic;\r\n<span style=\"color: blue;\">using</span> System.ComponentModel;\r\n<span style=\"color: blue;\">using</span> System.Data;\r\n<span style=\"color: blue;\">using</span> System.Drawing;\r\n<span style=\"color: blue;\">using</span> System.Linq;\r\n<span style=\"color: blue;\">using</span> System.Text;\r\n<span style=\"color: blue;\">using</span> System.Windows.Forms;\r\n<span style=\"color: blue;\">using</span> NAudio;\r\n<span style=\"color: blue;\">using</span> NAudio.Wave;\r\n<span style=\"color: blue;\">using</span> System.IO;\r\n\r\n<span style=\"color: blue;\">namespace</span> SoundsCS\r\n{\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">partial</span> <span style=\"color: blue;\">class</span> frmRecord : Form\r\n    {\r\n        <span style=\"color: blue;\">public</span> frmRecord()\r\n        {\r\n            InitializeComponent();\r\n        }\r\n\r\n        IWaveIn waveIn;\r\n        WaveFileWriter writer;\r\n        MemoryStream memStream;\r\n\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> cmdStartRec_Click(<span style=\"color: blue;\">object</span> sender, EventArgs e)\r\n        {\r\n            <span style=\"color: blue;\">if</span> (waveIn == <span style=\"color: blue;\">null</span>)\r\n            {\r\n                memStream = <span style=\"color: blue;\">new</span> MemoryStream();\r\n                \r\n                waveIn = <span style=\"color: blue;\">new</span> WaveIn();\r\n                waveIn.WaveFormat = <span style=\"color: blue;\">new</span> WaveFormat(8000, 1);\r\n\r\n                writer = <span style=\"color: blue;\">new</span> WaveFileWriter(memStream, waveIn.WaveFormat);\r\n\r\n                waveIn.DataAvailable += <span style=\"color: blue;\">new</span> EventHandler&lt;WaveInEventArgs&gt;(waveIn_DataAvailable);\r\n                waveIn.RecordingStopped += <span style=\"color: blue;\">new</span> EventHandler(waveIn_RecordingStopped);\r\n                waveIn.StartRecording();\r\n                cmdStartRec.Enabled = <span style=\"color: blue;\">false</span>;\r\n            }\r\n        }\r\n\r\n        <span style=\"color: blue;\">void</span> waveIn_RecordingStopped(<span style=\"color: blue;\">object</span> sender, EventArgs e)\r\n        {\r\n            <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">this</span>.InvokeRequired)\r\n            {\r\n                <span style=\"color: blue;\">this</span>.BeginInvoke(<span style=\"color: blue;\">new</span> EventHandler(waveIn_RecordingStopped), sender, e);\r\n            }\r\n            <span style=\"color: blue;\">else</span>\r\n            {\r\n                waveIn.Dispose();\r\n                waveIn = <span style=\"color: blue;\">null</span>;\r\n\r\n                ByteArrayToFile(<span style=\"color: #a31515;\">@\"C:\\temp\\miofile.raw\"</span>, GetALawBytes(<span style=\"color: blue;\">ref</span> memStream));\r\n\r\n                memStream.Position = 0;\r\n                ByteArrayToFile(<span style=\"color: #a31515;\">@\"C:\\temp\\miofilewav.wav\"</span>, memStream.ToArray());\r\n\r\n                writer.Close();\r\n                writer = <span style=\"color: blue;\">null</span>;\r\n\r\n                cmdStartRec.Enabled = <span style=\"color: blue;\">true</span>;\r\n                <span style=\"color: green;\">//progressBar1.Value = 0;</span>\r\n            }\r\n        }\r\n\r\n        <span style=\"color: blue;\">void</span> waveIn_DataAvailable(<span style=\"color: blue;\">object</span> sender, WaveInEventArgs e)\r\n        {\r\n            <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">this</span>.InvokeRequired)\r\n            {\r\n                <span style=\"color: green;\">//Debug.WriteLine(\"Data Available\");</span>\r\n                <span style=\"color: blue;\">this</span>.BeginInvoke(<span style=\"color: blue;\">new</span> EventHandler&lt;WaveInEventArgs&gt;(waveIn_DataAvailable), sender, e);\r\n            }\r\n            <span style=\"color: blue;\">else</span>\r\n            {\r\n                <span style=\"color: green;\">//Debug.WriteLine(\"Flushing Data Available\");</span>\r\n                writer.Write(e.Buffer, 0, e.BytesRecorded);\r\n                <span style=\"color: blue;\">int</span> secondsRecorded = (<span style=\"color: blue;\">int</span>)(writer.Length / writer.WaveFormat.AverageBytesPerSecond);\r\n                <span style=\"color: blue;\">if</span> (secondsRecorded &gt;= 30)\r\n                {\r\n                    StopRecording();\r\n                }\r\n                <span style=\"color: blue;\">else</span>\r\n                {\r\n                    <span style=\"color: green;\">//progressBar1.Value = secondsRecorded;</span>\r\n                }\r\n            }\r\n        }\r\n\r\n        <span style=\"color: blue;\">void</span> StopRecording()\r\n        {\r\n            <span style=\"color: green;\">//Debug.WriteLine(\"StopRecording\");</span>\r\n            waveIn.StopRecording();\r\n        }\r\n\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> btnStopRec_Click(<span style=\"color: blue;\">object</span> sender, EventArgs e)\r\n        {\r\n            <span style=\"color: blue;\">if</span> (waveIn != <span style=\"color: blue;\">null</span>)\r\n            {\r\n                StopRecording();\r\n            }\r\n        }\r\n\r\n        <span style=\"color: blue;\">byte</span>[] GetALawBytes(<span style=\"color: blue;\">ref</span> MemoryStream ms)\r\n        {\r\n            <span style=\"color: green;\">//Comment from here</span>\r\n            ms.Position = 0;\r\n            WaveFileReader wfr = <span style=\"color: blue;\">new</span> WaveFileReader(ms);\r\n            <span style=\"color: blue;\">byte</span>[] arr = <span style=\"color: blue;\">new</span> <span style=\"color: blue;\">byte</span>[0];\r\n            <span style=\"color: blue;\">int</span> a = wfr.Read(arr, 0, (<span style=\"color: blue;\">int</span>)ms.Length);\r\n            <span style=\"color: green;\">//to here to make it to work</span>\r\n\r\n            <span style=\"color: blue;\">byte</span>[] data = ms.ToArray();\r\n            <span style=\"color: blue;\">int</span> length = ms.ToArray().Length;\r\n            <span style=\"color: blue;\">byte</span>[] encoded = <span style=\"color: blue;\">new</span> <span style=\"color: blue;\">byte</span>[length / 2];\r\n            <span style=\"color: blue;\">int</span> outIndex = 0;\r\n\r\n            <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> n = 0; n &lt; length; n += 2)\r\n            {\r\n                encoded[outIndex++] = NAudio.Codecs.ALawEncoder.LinearToALawSample(BitConverter.ToInt16(data, n));\r\n            }\r\n\r\n            <span style=\"color: blue;\">return</span> encoded;\r\n        }\r\n\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">bool</span> ByteArrayToFile(<span style=\"color: blue;\">string</span> _FileName, <span style=\"color: blue;\">byte</span>[] _ByteArray)\r\n        {\r\n            <span style=\"color: blue;\">try</span>\r\n            {\r\n                <span style=\"color: green;\">// Open file for reading</span>\r\n\r\n                System.IO.FileStream _FileStream = <span style=\"color: blue;\">new</span> System.IO.FileStream(_FileName, System.IO.FileMode.Create, System.IO.FileAccess.Write);\r\n\r\n                <span style=\"color: green;\">// Writes a block of bytes to this stream using data from a byte array.</span>\r\n                _FileStream.Write(_ByteArray, 0, _ByteArray.Length);\r\n                <span style=\"color: green;\">// close file stream</span>\r\n                _FileStream.Close();\r\n                <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">true</span>;\r\n            }\r\n            <span style=\"color: blue;\">catch</span> (Exception _Exception)\r\n            {\r\n                <span style=\"color: green;\">// Error</span>\r\n                MessageBox.Show(<span style=\"color: #a31515;\">\"Exception caught in process: {0}\"</span>, _Exception.ToString());\r\n            }\r\n            <span style=\"color: green;\">// error occured, return false</span>\r\n            <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">false</span>;\r\n        }\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n</p>\r\n<p>The project only needs two commandButton, cmdStartRecord and btnStopRecord.</p>\r\n<p>In the&nbsp;GetALawBytes function, commenting the first 4 lines of code will make the entire project to work.&nbsp;</p>\r\n<p>The final result is a .raw file playing as expected (but the noise).</p>\r\n<p>The wav will not play at all.</p>\r\n<p>Any suggestion? What I want to achieve is to extract the acutal audio data from the memorystream and save it as pure aLaw data.</p>",
    "PostedDate": "2012-01-17T09:44:14.433-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "726616",
    "ThreadId": "285950",
    "Html": "<p>To write a WAV file, you must use the WaveFileWriter.</p>\r\n<p>To read a .raw file, you should use the RawSourceWaveStream (or similar name, can't remember it off the top of my head) and tell it exactly what the format of the raw data is.</p>\r\n<p>Mark</p>",
    "PostedDate": "2012-01-17T11:33:54.843-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]