[
  {
    "Id": "943244",
    "ThreadId": "403595",
    "Html": "\r\n<p>Hi, I'm programming an Application which records music from Spotify in C#. There is a timer which checks every few milliseconds if the title of the Spotify window has changed. If it has changed, Spotify is playing a new track and the programm has to save\r\n the old recording and start a new one.</p>\r\n<p>This is working pretty well, but Windows Media player cannot open the saved file and the vlc player also has problems.</p>\r\n<p>But every tutorial i read saved the file like I did. I'm new to C# and don't know how I can solve this.</p>\r\n<p>Here is the code.</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System;\r\n<span style=\"color:blue\">using</span> System.Text;\r\n<span style=\"color:blue\">using</span> System.Windows.Forms;\r\n<span style=\"color:blue\">using</span> System.Runtime.InteropServices;\r\n<span style=\"color:blue\">using</span> System.Diagnostics;\r\n<span style=\"color:blue\">using</span> NAudio.Wave;\r\n<span style=\"color:blue\">using</span> System.Collections.Generic;\r\n\r\n<span style=\"color:blue\">namespace</span> Spotify_Recorder\r\n{\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> MainForm : Form\r\n    {\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">string</span> currentSongTitle;\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">string</span> oldSongTitle;\r\n\r\n        <span style=\"color:blue\">bool</span> recording;\r\n        <span style=\"color:blue\">bool</span> rippingStarted;\r\n\r\n        <span style=\"color:blue\">private</span> List&lt;WaveInCapabilities&gt; recSources;\r\n        <span style=\"color:blue\">private</span> WaveIn waveIn;\r\n        <span style=\"color:blue\">private</span> WaveFileWriter waveWriter;\r\n\r\n        <span style=\"color:blue\">public</span> MainForm()\r\n        {\r\n            InitializeComponent();\r\n            recording = <span style=\"color:blue\">false</span>;\r\n            rippingStarted = <span style=\"color:blue\">false</span>;\r\n        }\r\n\r\n        [DllImport(<span style=\"color:#a31515\">&quot;user32.dll&quot;</span>, SetLastError = <span style=\"color:blue\">true</span>)]\r\n        <span style=\"color:blue\">static</span> <span style=\"color:blue\">extern</span> IntPtr FindWindow(<span style=\"color:blue\">string</span> lpClassName, <span style=\"color:blue\">string</span> lpWindowName);\r\n        [DllImport(<span style=\"color:#a31515\">&quot;user32.dll&quot;</span>, SetLastError = <span style=\"color:blue\">true</span>, CharSet = CharSet.Auto)]\r\n        <span style=\"color:blue\">internal</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">extern</span> <span style=\"color:blue\">int</span> GetWindowText(IntPtr hWnd, [Out] StringBuilder lpString, <span style=\"color:blue\">int</span> nMaxCount);\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> MainForm_Load(<span style=\"color:blue\">object</span> sender, EventArgs e)\r\n        {\r\n            <span style=\"color:green\">//Load Devices</span>\r\n            recSources = <span style=\"color:blue\">new</span> List&lt;WaveInCapabilities&gt;();\r\n\r\n            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> i = 0; i &lt; WaveIn.DeviceCount; i&#43;&#43;)\r\n            {\r\n                recSources.Add(WaveIn.GetCapabilities(i));\r\n            }\r\n\r\n            <span style=\"color:blue\">if</span> (recSources.Count == 0)\r\n            {\r\n                MessageBox.Show(<span style=\"color:#a31515\">&quot;Du hast keine Aufnahmeger�te angeschlossen&quot;</span>);\r\n                <span style=\"color:blue\">this</span>.Close();\r\n            }\r\n\r\n            <span style=\"color:blue\">foreach</span> (WaveInCapabilities source <span style=\"color:blue\">in</span> recSources)\r\n            {\r\n                cb_RecordDevice.Items.Add(source.ProductName);\r\n            }\r\n\r\n            cb_RecordDevice.SelectedIndex = 0;\r\n\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> startRecording()\r\n        {\r\n            <span style=\"color:blue\">if</span> (!recording)\r\n            {\r\n                <span style=\"color:blue\">int</span> deviceNumber = cb_RecordDevice.SelectedIndex;\r\n\r\n                waveIn = <span style=\"color:blue\">new</span> WaveIn();\r\n                waveIn.DeviceNumber = deviceNumber;\r\n                waveIn.WaveFormat = <span style=\"color:blue\">new</span> WaveFormat(88200, WaveIn.GetCapabilities(deviceNumber).Channels);\r\n\r\n                waveIn.DataAvailable &#43;= <span style=\"color:blue\">new</span> EventHandler&lt;WaveInEventArgs&gt;(waveIn_DataAvailable);\r\n\r\n                <span style=\"color:green\">//string path = folderBrowserDialog.SelectedPath &#43; &quot;\\\\&quot; &#43; currentSongTitle &#43; &quot;.wav&quot;;</span>\r\n                <span style=\"color:blue\">string</span> path = <span style=\"color:#a31515\">@&quot;D:\\Users\\Manuel\\Desktop\\_rec\\test.wav&quot;</span>;\r\n                waveWriter = <span style=\"color:blue\">new</span> WaveFileWriter(path, waveIn.WaveFormat);\r\n\r\n                waveIn.StartRecording();\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> waveIn_DataAvailable(<span style=\"color:blue\">object</span> sender, WaveInEventArgs e)\r\n        {\r\n            <span style=\"color:blue\">if</span> (waveWriter == <span style=\"color:blue\">null</span>) <span style=\"color:blue\">return</span>;\r\n\r\n            waveWriter.Write(e.Buffer, 0, e.BytesRecorded);\r\n            waveWriter.Flush();\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> stopRecording()\r\n        {\r\n            <span style=\"color:blue\">if</span> (recording)\r\n            {\r\n                waveIn.StopRecording();\r\n                waveIn.Dispose();\r\n                waveIn = <span style=\"color:blue\">null</span>;\r\n\r\n                waveWriter.Dispose();\r\n                waveWriter = <span style=\"color:blue\">null</span>;\r\n\r\n                gb_config.Enabled = <span style=\"color:blue\">true</span>;\r\n                timer_checkTitle.Enabled = <span style=\"color:blue\">false</span>;\r\n                recording = <span style=\"color:blue\">false</span>;\r\n                lb_recordedFiles.Items.Add(oldSongTitle);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">string</span> getCurrentSongTitle()\r\n        {\r\n            Process[] processes = Process.GetProcessesByName(<span style=\"color:#a31515\">&quot;spotify&quot;</span>);\r\n\r\n            <span style=\"color:blue\">if</span> (processes.Length &gt; 0)\r\n            {\r\n                Process p = processes[0];\r\n                IntPtr pFoundWindow = p.MainWindowHandle;\r\n\r\n                StringBuilder stringBuilder = <span style=\"color:blue\">new</span> StringBuilder(256);\r\n                GetWindowText(pFoundWindow, stringBuilder, stringBuilder.Capacity);\r\n\r\n                <span style=\"color:blue\">string</span> name = stringBuilder.ToString();\r\n                <span style=\"color:blue\">if</span> (name.Length &gt; 10)\r\n                {\r\n                    name = name.Substring(10);\r\n                    <span style=\"color:blue\">return</span> name;\r\n                }\r\n                <span style=\"color:blue\">return</span> <span style=\"color:#a31515\">&quot;&quot;</span>;\r\n            }\r\n            <span style=\"color:blue\">else</span>\r\n            {\r\n                MessageBox.Show(<span style=\"color:#a31515\">&quot;Spotify muss ge�ffnet sein.&quot;</span>);\r\n                <span style=\"color:blue\">this</span>.Close();\r\n                <span style=\"color:blue\">return</span> <span style=\"color:#a31515\">&quot;&quot;</span>;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> btn_changeOutput_Click(<span style=\"color:blue\">object</span> sender, EventArgs e)\r\n        {\r\n            DialogResult rs = folderBrowserDialog.ShowDialog();\r\n            <span style=\"color:blue\">if</span> (rs == DialogResult.OK)\r\n            {\r\n                lbl_output.Text = folderBrowserDialog.SelectedPath;\r\n                btn_openOutputFolder.Enabled = <span style=\"color:blue\">true</span>;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> btn_record_Click(<span style=\"color:blue\">object</span> sender, EventArgs e)\r\n        {\r\n            <span style=\"color:blue\">if</span> (!rippingStarted)\r\n            {\r\n                <span style=\"color:blue\">if</span> (folderBrowserDialog.SelectedPath == <span style=\"color:#a31515\">&quot;&quot;</span>)\r\n                {\r\n                    MessageBox.Show(<span style=\"color:#a31515\">&quot;Bitte w�hle einen Ausgabeordner.&quot;</span>);\r\n                    <span style=\"color:blue\">return</span>;\r\n                }\r\n                timer_checkTitle.Enabled = <span style=\"color:blue\">true</span>;\r\n                btn_record.Text = <span style=\"color:#a31515\">&quot;Aufnahme beenden&quot;</span>;\r\n                rippingStarted = <span style=\"color:blue\">true</span>;\r\n            }\r\n            <span style=\"color:blue\">else</span>\r\n            {\r\n                <span style=\"color:blue\">if</span> (recording)\r\n                {\r\n                    stopRecording();\r\n                }\r\n                timer_checkTitle.Enabled = <span style=\"color:blue\">false</span>;\r\n                btn_record.Text = <span style=\"color:#a31515\">&quot;Aufnahme starten&quot;</span>;\r\n                rippingStarted = <span style=\"color:blue\">false</span>;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> timer_checkTitle_Tick(<span style=\"color:blue\">object</span> sender, EventArgs e)\r\n        {\r\n            currentSongTitle = getCurrentSongTitle();\r\n            <span style=\"color:blue\">if</span> (currentSongTitle != oldSongTitle)\r\n            {\r\n                <span style=\"color:blue\">if</span> (recording)\r\n                {\r\n                    stopRecording();\r\n                }\r\n                <span style=\"color:blue\">if</span> (currentSongTitle != <span style=\"color:#a31515\">&quot;&quot;</span>)\r\n                {\r\n                    startRecording();\r\n                }\r\n            }\r\n            oldSongTitle = currentSongTitle;\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> btn_openOutputFolder_Click(<span style=\"color:blue\">object</span> sender, EventArgs e)\r\n        {\r\n            Process.Start(folderBrowserDialog.SelectedPath);\r\n        }\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n",
    "PostedDate": "2012-11-17T06:53:54.487-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "943246",
    "ThreadId": "403595",
    "Html": "\r\n<p>you'll need to dispose your waveFileWriter before you can play it. That's because it needs to set some bytes in the WAV header saying how long the DATA and RIFF chunks are, and it does this when you Dispose.</p>\r\n<p>Mark</p>\r\n",
    "PostedDate": "2012-11-17T06:59:38.993-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "943255",
    "ThreadId": "403595",
    "Html": "\r\n<p>Thats the reason, thank you.</p>\r\n<p>For some reason stopRecording() is never called. It won't be difficult to fix that.</p>\r\n",
    "PostedDate": "2012-11-17T07:25:53.383-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "943265",
    "ThreadId": "403595",
    "Html": "\r\n<p>There was an recording = true missing in startRecording(), now the files works.</p>\r\n<p>But I've got a new Problem: If the file name contains a &quot;:&quot; &nbsp;I get an NotSupportedException. Many titles contain a &quot;:&quot;. Is there a way to solve this or should I remove them from the path.</p>\r\n",
    "PostedDate": "2012-11-17T08:10:58.113-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "943267",
    "ThreadId": "403595",
    "Html": "\r\n<p>yes, you must remove them from the path</p>\r\n",
    "PostedDate": "2012-11-17T08:35:45.247-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]