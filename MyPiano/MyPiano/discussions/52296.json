[
  {
    "Id": "175720",
    "ThreadId": "52296",
    "Html": "Hi Mark,<br>\r\n<br>\r\nIn the process of writing the next Tutorial for NAudio I was looking at options for Recording audio. From what I can see, at least in the demo application, the way to do this is use the sound card to open the Sound Card's input for capture and then send the incoming data through the wave stream to the WaveFileWriter class. This is a great feature for when capturing Audio from an external source is required but OpenSebJ has a slightly different requirement, as it is looking to prodominatly capture the audio being generated throgh NAudio. So in this scenario, the audio is being mixed by the WaveMixerStream32 class, then sent to the Audio Hardware by which ever output method has been used and then relying on the Audio Hardware's mixer to be able to reroute the Audio Output to the Input via an effective loopback (a WhatUHear or Wave or Stero Mix or what ever the particular sound card calls it). <br>\r\n<br>\r\nWhat I am seeking to propose is that a Direct To Disk option is added in the WaveMixerStream32 class allowing us to stream out the mixed audio directly from NAudio to a file. This allows for a few other options to be imediatly possiable for OpenSebJ and any other application. It means that if there is another Audio Source on the computer playing audio at the same time, say a click track being played in another application, that you want to play as a backing against but do not wish to record the backing at the same time, then streaming the content being mixed by NAudio before it reaches the Audio Hardware allows for this. I actually had this feature requested in a previous version of OpenSebJ by a user who I think viewed this some what as an accessibility issue <a href=\"http://sourceforge.net/tracker/?func=detail&aid=1723572&group_id=146061&atid=763961\">http://sourceforge.net/tracker/?func=detail&amp;aid=1723572&amp;group_id=146061&amp;atid=763961</a> <br>\r\n<br>\r\nI've had a crack at this and have implemented the following changes in a local copy of WaveMixerStream32 <br>\r\n<br>\r\npublic class WaveMixerStream32 : WaveStream<br>\r\n{<br>\r\n<br>\r\n<strong>&lt;...&gt;</strong><br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private bool streamToDisk;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private string streamToDiskFileName;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WaveFileWriter writer;<br>\r\n<br>\r\n<strong>&lt;...&gt;</strong><br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void StartStreamingToDisk()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (streamToDiskFileName != &quot;&quot;)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; streamToDisk = true;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void PauseStreamingToDisk()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; streamToDisk = false;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void ResumeStreamingToDisk()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; streamToDisk = true;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void StopStreamingToDisk()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; streamToDisk = false;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; writer.Close();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void StreamMixToDisk(string FileName)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; streamToDiskFileName = FileName;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; writer = new WaveFileWriter(FileName, this.WaveFormat);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void WriteMixStreamOut(byte[] buffer, int offset, int count)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; writer.WriteData(buffer, offset, count);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n<br>\r\n<strong>&lt;...&gt;</strong><br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public override int Read(byte[] buffer, int offset, int count)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em> </em><strong>&lt;...&gt;</strong><br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; position += count;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // If streamToDisk has been enabled the mixed audio will be streamed directly to a wave file, so we need to send the data to the wave file writer<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (streamToDisk)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WriteMixStreamOut(readBuffer, 0, count);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return count;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em> </em><strong>&lt;...&gt;</strong><br>\r\n<br>\r\nI hope that makes sense, it's only a minor modification to the class but based on the tests I ran the recorded audio sounded perfect as there was no additional conversion required and there is <span style=\"text-decoration:underline\">no</span> additional interference in the recorded audio, so silence really is silence. I wasn't sure if this is the right location to implement this change but based on where the mixing is occurring and the data that's required to stream the mixed output it seems like the logical place to pick it up.<br>\r\n<br>\r\nWhat do you think, worthy of inclusion?<br>\r\n<br>\r\nCheers,<br>\r\nSebastian<br>\r\n<br>\r\n",
    "PostedDate": "2009-04-04T18:21:28.513-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "178110",
    "ThreadId": "52296",
    "Html": "Amendment to that last post required, I picked up the wrong buffer in the Read method, when streaming to disk - I only noticed it today when testing with multiple samples simultaneously though the sampler, should have been:<br>\r\n<br>\r\nif (streamToDisk)<br>\r\n{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\nWriteMixStreamOut(buffer, 0, count);<br>\r\n}<br>\r\n<br>\r\nCheers,<br>\r\nSebastian<br>\r\n",
    "PostedDate": "2009-04-10T20:55:12.767-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]