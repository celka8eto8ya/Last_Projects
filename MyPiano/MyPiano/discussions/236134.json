[
  {
    "Id": "527378",
    "ThreadId": "236134",
    "Html": "\r\n<p>Hi all,</p>\r\n<p>what is the fastest method to clone WaveStream-Objects?</p>\r\n<p>&nbsp;</p>\r\n<p>Something like this?</p>\r\n<pre style=\"font-family:consolas\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue\">private</span>&nbsp;<span style=\"color:#2b91af\">WaveStream</span>&nbsp;CopyWaveStream(<span style=\"color:#2b91af\">WaveStream</span>&nbsp;input)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue\">int</span>&nbsp;bufferLength&nbsp;=&nbsp;(<span style=\"color:blue\">int</span>)input.Length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue\">byte</span>[]&nbsp;streamBuffer&nbsp;=&nbsp;<span style=\"color:blue\">new</span>&nbsp;<span style=\"color:blue\">byte</span>[bufferLength];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input.Read(streamBuffer,&nbsp;0,&nbsp;bufferLength);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">MemoryStream</span>&nbsp;newMemStream&nbsp;=&nbsp;<span style=\"color:blue\">new</span>&nbsp;<span style=\"color:#2b91af\">MemoryStream</span>();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue\">var</span>&nbsp;fileWriter&nbsp;=&nbsp;<span style=\"color:blue\">new</span>&nbsp;<span style=\"color:#2b91af\">WaveFileWriter</span>(newMemStream,&nbsp;input.WaveFormat);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fileWriter.WriteData(streamBuffer,&nbsp;0,&nbsp;bufferLength);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">WaveFileReader</span>&nbsp;reader&nbsp;=&nbsp;<span style=\"color:blue\">new</span>&nbsp;<span style=\"color:#2b91af\">WaveFileReader</span>(newMemStream);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue\">return</span>&nbsp;reader;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre>\r\n<p>Or exists simpler way with any BufferClass?</p>\r\n<p>&nbsp;</p>\r\n<p>Background:</p>\r\n<p>-I have to play 20 WaveStreams each one over 100 times with a short reaction time.</p>\r\n<p>-And sometimes the same WaveStream can play many times at the same time.</p>\r\n<p>-So i do the conversion-work only on first load and cache this WaveStream.</p>\r\n<p>-I need the same wavestream-data with different play-positions at the same time...this means: i have to clone the CachedWaveStream with a minimum effort for each instance</p>\r\n<p>I know this is a complex-scenario...lets focus in this discussion only on the fast cloning of WaveStreams. Thanks :)</p>\r\n",
    "PostedDate": "2010-11-26T06:44:57.96-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "527444",
    "ThreadId": "236134",
    "Html": "\r\n<p>this will work, although the extra overhead of WaveFileReader and Writer is probably unnecessary. Have a look at the RawWaveSourceStream I recently checked in to NAudio. That lets you provide a MemoryStream and WaveFormat, meaning you would only need to\r\n clone the MemoryStream.</p>\r\n<p>Even better would be to create your own WaveStream based on a byteArray full of raw audio, that kept track of its own position when Read was called. That way you don't waste memory copying the byte array as you could create multiple instances of that WaveStream\r\n all based off the same byte array.</p>\r\n<p>Mark</p>\r\n",
    "PostedDate": "2010-11-26T09:27:04.363-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "527870",
    "ThreadId": "236134",
    "Html": "\r\n<p>Hi Mark,</p>\r\n<p>for my project i found a little issue in the WaveFileWriter.Dispose-method, if you want to use the stream-out version.</p>\r\n<pre style=\"font-family:consolas\"><span style=\"color:blue\">using</span>&nbsp;(<span style=\"color:#2b91af\">WaveFileWriter</span>&nbsp;writer&nbsp;=&nbsp;<span style=\"color:blue\">new</span>&nbsp;<span style=\"color:#2b91af\">WaveFileWriter</span>(outputStream,&nbsp;myWaveFormat))<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.WriteData(wavArray,&nbsp;0,&nbsp;wavArray.Length);<br>}</pre>\r\n<pre style=\"font-family:consolas\">after that the stream is closed...but everyone who use this Method needs the stream. ^^</pre>\r\n<pre style=\"font-family:consolas\">my change:</pre>\r\n<pre style=\"font-family:consolas\"><pre style=\"font-family:consolas\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue\">public</span>&nbsp;<span style=\"color:blue\">class</span>&nbsp;<span style=\"color:#2b91af\">WaveFileWriter</span>&nbsp;:&nbsp;<span style=\"color:#2b91af\">IDisposable</span><br>&nbsp;&nbsp;&nbsp;&nbsp;{</pre>\r\n<pre style=\"font-family:consolas\">        ...</pre>\r\n</pre>\r\n<pre style=\"font-family:consolas\"><pre style=\"font-family:consolas\"><pre style=\"font-family:consolas\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue\">protected</span>&nbsp;<span style=\"color:blue\">virtual</span>&nbsp;<span style=\"color:blue\">void</span>&nbsp;Dispose(<span style=\"color:blue\">bool</span>&nbsp;disposing)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue\">if</span>&nbsp;(disposing)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue\">if</span>&nbsp;(outStream&nbsp;!=&nbsp;<span style=\"color:blue\">null</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue\">try</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue\">if</span>&nbsp;(!overwriting)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UpdateHeader(writer);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue\">finally</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green\">//&nbsp;in&nbsp;a&nbsp;finally&nbsp;block&nbsp;as&nbsp;we&nbsp;don't&nbsp;want&nbsp;the&nbsp;FileStream&nbsp;to&nbsp;run&nbsp;its&nbsp;disposer&nbsp;in</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green\">//&nbsp;the&nbsp;GC&nbsp;thread&nbsp;if&nbsp;the&nbsp;code&nbsp;above&nbsp;caused&nbsp;an&nbsp;IOException&nbsp;(e.g.&nbsp;due&nbsp;to&nbsp;disk&nbsp;full)</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue\">if</span>&nbsp;(toStream)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green\">//for&nbsp;stream&nbsp;output</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outStream.Position&nbsp;=&nbsp;0;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue\">else</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green\">//for&nbsp;file&nbsp;output</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outStream.Close();&nbsp;<span style=\"color:green\">//&nbsp;will&nbsp;close&nbsp;the&nbsp;underlying&nbsp;base&nbsp;stream</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outStream&nbsp;=&nbsp;<span style=\"color:blue\">null</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre>\r\n...</pre>\r\n</pre>\r\n<pre style=\"font-family:consolas\">       }</pre>\r\n<pre style=\"font-family:consolas\">i'll think this will be usefull for others too.</pre>\r\n",
    "PostedDate": "2010-11-28T06:11:38.863-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "528098",
    "ThreadId": "236134",
    "Html": "\r\n<p>yes, it is hard to know whether to dispose source streams when their consumer is disposed. BinaryWriter in the .NET framework does this for instance.</p>\r\n<p>I usually work around this myself by wrapping the input stream with a simple IgnoreDisposeStream class.</p>\r\n<p>Mark</p>\r\n",
    "PostedDate": "2010-11-29T01:42:58.437-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "528171",
    "ThreadId": "236134",
    "Html": "\r\n<p>The problem in this case is: If you ignoring Dispose, the function &quot;UpdateHeader&quot; is not executed.</p>\r\n<p>When&nbsp;the resulting stream (without dispose!)&nbsp;has in incomplete header, i run into misterious problems for the next module that expects a &quot;perfect&quot; wav-memorystream.</p>\r\n",
    "PostedDate": "2010-11-29T04:35:17.023-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "528189",
    "ThreadId": "236134",
    "Html": "\r\n<p>yes you still call Dispose on the WaveFileWriter, but your derived output stream doesn't pass it on to the underlying MemoryStream. Have a look at IgnoreDisposeStream.cs in the WpfDemo</p>\r\n<p><a href=\"http://naudio.codeplex.com/SourceControl/changeset/view/64392#565848\">http://naudio.codeplex.com/SourceControl/changeset/view/64392#565848</a></p>\r\n<p>Mark</p>\r\n",
    "PostedDate": "2010-11-29T04:59:23.223-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "528212",
    "ThreadId": "236134",
    "Html": "\r\n<p>ok, this could be a very elegant way to handle this issue.</p>\r\n<p>But the most users think that &quot;<span style=\"color:#2b91af\">WaveFileWriter</span>(outputStream,&nbsp;waveFormat)&quot;&nbsp;writes&nbsp;data into a valid stream.&nbsp;But by default the result is a closed stream (with dispose) or a incomplete stream (without dispose).</p>\r\n<p>You must have the knowing of this issue to think about solutions like IgnoreDisposeStream...and a&nbsp;incomplete wav-stream with 2 wrong int-values is not very obvious (i spend 2 hours of my life for this!).</p>\r\n<p>I would prefer to solve issues instead of a elegant way to handle it. :)</p>\r\n",
    "PostedDate": "2010-11-29T05:25:07.88-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "528225",
    "ThreadId": "236134",
    "Html": "\r\n<p>the reason it is like this is that in NAudio it is very common to build up a long chain of WaveStreams (i.e. WaveStreams that take one or more input streams into their constructor). If you don't propagate dispose, then the use has to manually keep track\r\n of every stream in the graph to call dispose on it. I appreciate that those who are writing to MemoryStreams don't want dispose to be called. The constructor overload was not originally written with that use in mind. If I make the change, there will be some\r\n breakage to existing code, so I would have to fix that up at the same time. It is certainly a change I have considered making from time to time. Another option is to make UpdateHeader public, allowing you to simply not dispose the WaveFileWriter at all. Having\r\n said that I'll probably end up going with the approach I took in WaveFileReader, which is basically what you are asking for.</p>\r\n<p>Mark</p>\r\n",
    "PostedDate": "2010-11-29T05:47:43.42-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "528242",
    "ThreadId": "236134",
    "Html": "\r\n<p>This is a good argument...i didnt thought about this breaking change.</p>\r\n<p>A public UpdateHeader&nbsp;(and/or this discussion here) could help others to prevent running in the same problem.</p>\r\n",
    "PostedDate": "2010-11-29T06:17:55.373-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]