[
  {
    "Id": "1019628",
    "ThreadId": "437658",
    "Html": "Ok, this is a comment from a previous post of mine. I'm trying to create a simple class that does these three things, stream an mp3 stream, monitor volume level (detect silence), and have the ability to adjust the volume. I found that the demo does display how to does each of these tasks. It's just that they seem to be using different objects and that have nothing to do with each other. Like using the SampleProviders with streams. Here is a sample of how to output the volume levels, I just can't get it to work with what I have been testing with so far.\r<br />\n<br />\n...................................................................................................... \r<br />\nvar player = new NAudio.Wave.WaveOut(); \r<br />\nvar file = new <a href=\"mailto:NAudio.Wave.AudioFileReader(@&quot;D:\\Media\\World's\" rel=\"nofollow\">NAudio.Wave.AudioFileReader(@\"D:\\Media\\World's</a> Largest Flash Mob - Audio.mp3&quot;); \r<br />\nvar meter = new NAudio.Wave.SampleProviders.MeteringSampleProvider(file); \r<br />\nmeter.StreamVolume += (s, e) =&gt; Console.WriteLine(&quot;{0} - {1}&quot;, e.MaxSampleValues[0], e.MaxSampleValues[1]); \r<br />\nplayer.Init(new NAudio.Wave.SampleProviders.SampleToWaveProvider(meter)); \r<br />\nvar form = new Form(); \r<br />\nform.Load += (s, e) =&gt; player.Play(); \r<br />\nform.FormClosed += (s, e) =&gt; player.Dispose(); \r<br />\nform.ShowDialog(); \r<br />\n...................................................................................................... \r<br />\n<br />\nHere is what I'm working with for my proof of concept. I would like to be able to create the class, start the stream, adjust volume (if need), and monitor the output/sample levels (detect silence).\r<br />\n<br />\n...................................................................................................... \r<br />\nusing (TestStream _Stream = new <a href=\"mailto:TestStream(@&quot;http://radio.reaper.fm/stream/&quot;))\r\n{\r\n_Stream.Play();\r\nSystem.Threading.Thread.Sleep(2000);\r\n_Stream.SetVolume(0.5f);\" rel=\"nofollow\">TestStream(@\"http://radio.reaper.fm/stream/\"))\r\n{\r\n_Stream.Play();\r\nSystem.Threading.Thread.Sleep(2000);\r\n_Stream.SetVolume(0.5f);</a> // Decrease Volume\r<br />\nSystem.Threading.Thread.Sleep(2000);\r<br />\n_Stream.SetVolume(1.5f); // Over Increase Volume\r<br />\nSystem.Threading.Thread.Sleep(2000);\r<br />\n_Stream.SetVolume(1); // Set Back To Normal\r<br />\nSystem.Threading.Thread.Sleep(30000);\r<br />\n_Stream.Stop();\r<br />\nSystem.Threading.Thread.Sleep(1000);\r<br />\n} \r<br />\n...................................................................................................... \r<br />\n<br />\nHere is my test class with the basics \r<br />\n<br />\n...................................................................................................... \r<br />\npublic class TestStream : IDisposable \r<br />\n{\r<br />\nprivate System.Threading.Thread _StreamThread;\r<br />\nprivate System.IO.Stream _Stream = new System.IO.MemoryStream();\r<br />\nprivate NAudio.Wave.WaveStream _WaveStream;\r<br />\nprivate NAudio.Wave.WaveOut _WaveOut;\r<br />\nprivate const long _ChunkSize = 16384; // Testing (64k=65536, 32k=32768 16k=16384)\r<br />\n<br />\npublic void Dispose()\r<br />\n{<br />\n<pre><code>if (_WaveOut.PlaybackState != NAudio.Wave.PlaybackState.Stopped)\n{\n    this.Stop();\n}\n_WaveStream.Close();\n_WaveStream.Dispose();\n_WaveOut.Dispose();\n_Stream.Close();\n_Stream.Dispose();\n_StreamThread.Abort();\n_StreamThread.Join();\nSystem.Diagnostics.Debug.WriteLine(&quot;=&gt; Disposed&quot;);</code></pre>\n\n}\r<br />\n<br />\npublic TestStream(string UriString)\r<br />\n{<br />\n<pre><code>_StreamThread = new System.Threading.Thread(delegate(object o)\n                {\n                    System.Net.WebResponse response = System.Net.WebRequest.Create(UriString).GetResponse();\n                    using (var stream = response.GetResponseStream())\n                    {\n                        byte[] buffer = new byte[_ChunkSize];\n                        int read;\n                        while ((read = stream.Read(buffer, 0, buffer.Length)) &gt; 0)\n                        {\n                            var pos = _Stream.Position;\n                            _Stream.Position = _Stream.Length;\n                            _Stream.Write(buffer, 0, read);\n                            _Stream.Position = pos;\n                        }\n                    }\n                });\n_StreamThread.Start();\nSystem.Diagnostics.Debug.WriteLine(&quot;=&gt; Initialized&quot;);</code></pre>\n\n}\r<br />\n<br />\npublic void Play()\r<br />\n{<br />\n<pre><code>if (_Stream.Length &lt; _ChunkSize * 5) // What increment should this be?\n{\n    System.Diagnostics.Debug.WriteLine(&quot;=&gt; Buffering&quot;);\n    while (_Stream.Length &lt; _ChunkSize * 5)\n    { // Pre-buffering some data to allow NAudio to start playing\n        System.Threading.Thread.Sleep(1000);\n    }\n}\n_Stream.Position = 0;\n_WaveStream = new NAudio.Wave.BlockAlignReductionStream(NAudio.Wave.WaveFormatConversionStream.CreatePcmStream(new NAudio.Wave.Mp3FileReader(_Stream)));\n_WaveOut = new NAudio.Wave.WaveOut(NAudio.Wave.WaveCallbackInfo.FunctionCallback());\n_WaveOut.Init(_WaveStream);\n_WaveOut.Play();\nSystem.Diagnostics.Debug.WriteLine(&quot;=&gt; Playing&quot;);</code></pre>\n\n}\r<br />\n<br />\npublic void Stop()\r<br />\n{<br />\n<pre><code>_WaveOut.Stop();\nSystem.Diagnostics.Debug.WriteLine(&quot;=&gt; Stopped&quot;);</code></pre>\n\n}\r<br />\n<br />\npublic void SetVolume(float Volume)\r<br />\n{<br />\n<pre><code>// Adjust Volume for this stream</code></pre>\n\n}\r<br />\n<br />\nprivate void WriteVolumeMeterValues(object sender, NAudio.Wave.SampleProviders.StreamVolumeEventArgs e)\r<br />\n{<br />\n<pre><code>System.Diagnostics.Debug.WriteLine(String.Format(&quot;VolumeMeter: {0} &lt;==&gt; {1}&quot;, e.MaxSampleValues[0], e.MaxSampleValues[1]));</code></pre>\n\n}\r<br />\n} \r<br />\n...................................................................................................... \r<br />\n<br />\nIf anyone reading this thread has any input or help, I would be appreciate it. If there is a better way to achieve my goals, I would love some feedback or suggestions.\r<br />\n<br />\nThanks in Advance<br />\n",
    "PostedDate": "2013-03-22T09:04:43.547-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1019817",
    "ThreadId": "437658",
    "Html": "Ok, I figured out the Audio Level portion. I replaced a few lines in my Play method from this:\r<br />\n<br />\n_WaveOut = new NAudio.Wave.WaveOut(NAudio.Wave.WaveCallbackInfo.FunctionCallback());\r<br />\n_WaveOut.Init(_WaveStream);\r<br />\n_WaveOut.Play();\r<br />\n<br />\nto this:\r<br />\n<br />\n_WaveOut = new NAudio.Wave.WaveOut(NAudio.Wave.WaveCallbackInfo.FunctionCallback());\r<br />\nNAudio.Wave.SampleProviders.SampleChannel Channel = new NAudio.Wave.SampleProviders.SampleChannel(_WaveStream);\r<br />\nNAudio.Wave.SampleProviders.MeteringSampleProvider Meter = new NAudio.Wave.SampleProviders.MeteringSampleProvider(Channel);\r<br />\nMeter.StreamVolume += (s, e) =&gt; Console.WriteLine(&quot;{0} - {1}&quot;, e.MaxSampleValues[0], e.MaxSampleValues[1]);\r<br />\n_WaveOut.Init(new NAudio.Wave.SampleProviders.SampleToWaveProvider(Meter));\r<br />\n_WaveOut.Play();\r<br />\n<br />\nand it plays the stream and outputs the values. :)\r<br />\n<br />\n&lt;now to the volume feature&gt;<br />\n",
    "PostedDate": "2013-03-22T14:56:49.377-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1019821",
    "ThreadId": "437658",
    "Html": "I also was able to add a PreVolumeMeter event. Does anyone know which is better to use? I get that the pre is before the meter, just wondering if either had better performance or more/less overhead.\r<br />\n<br />\nNAudio.Wave.SampleProviders.SampleChannel.PreVolumeMeter\r<br />\n<br />\nNAudio.Wave.SampleProviders.MeteringSampleProvider.StreamVolume<br />\n",
    "PostedDate": "2013-03-22T15:07:36.59-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1019830",
    "ThreadId": "437658",
    "Html": "I know I'm talking to myself, but I have my concept pretty much completed. The PreVolumeMeter seems to be a reading before any volume changes to the SampleChannel. So if you change the volume your meter reading will NOT reflect the changes.\r<br />\n<br />\nHere is my latest working concept class if any guru's have any suggestions or if someone wants something to mess with to get them started.\r<br />\n<br />\n--Thanks\r<br />\n<br />\npublic class TestStream : IDisposable\r<br />\n{<br />\n<pre><code>private System.Threading.Thread _StreamThread;\nprivate System.IO.Stream _Stream = new System.IO.MemoryStream();\nprivate NAudio.Wave.WaveStream _WaveStream;\nprivate NAudio.Wave.WaveOut _WaveOut;\nprivate NAudio.Wave.SampleProviders.SampleChannel _SampleChannel;\nprivate NAudio.Wave.SampleProviders.MeteringSampleProvider _MeteringSampleProvider;\nprivate const long _ChunkSize = 16384; // Testing (64k=65536, 32k=32768 16k=16384)\n\npublic void Dispose()\n{\n    if (_WaveOut.PlaybackState != NAudio.Wave.PlaybackState.Stopped)\n    {\n        this.Stop();\n    }\n    _WaveStream.Close();\n    _Stream.Close();\n    _WaveStream.Dispose();\n    _WaveOut.Dispose();\n    _Stream.Dispose();\n    _StreamThread.Abort();\n    _StreamThread.Join();\n    System.Diagnostics.Debug.WriteLine(&quot;=&gt; Disposed&quot;);\n}\n\npublic TestStream(string UriString)\n{\n    _StreamThread = new System.Threading.Thread(delegate(object o)\n    {\n        System.Net.WebResponse response = System.Net.WebRequest.Create(UriString).GetResponse();\n        using (var stream = response.GetResponseStream())\n        {\n            byte[] buffer = new byte[_ChunkSize];\n            int read;\n            while ((read = stream.Read(buffer, 0, buffer.Length)) &gt; 0)\n            {\n                var pos = _Stream.Position;\n                _Stream.Position = _Stream.Length;\n                _Stream.Write(buffer, 0, read);\n                _Stream.Position = pos;\n            }\n        }\n    });\n    _StreamThread.Start();\n    System.Diagnostics.Debug.WriteLine(&quot;=&gt; Initialized&quot;);\n}\n\npublic void Play()\n{\n    if (_Stream.Length &lt; _ChunkSize * 5) // What increment should this be?\n    {\n        System.Diagnostics.Debug.WriteLine(&quot;=&gt; Buffering&quot;);\n        while (_Stream.Length &lt; _ChunkSize * 5)\n        { // Pre-buffering some data to allow NAudio to start playing\n            System.Threading.Thread.Sleep(1000);\n        }\n    }\n    _Stream.Position = 0;\n    _WaveOut = new NAudio.Wave.WaveOut(NAudio.Wave.WaveCallbackInfo.FunctionCallback());\n    _WaveStream = new NAudio.Wave.BlockAlignReductionStream(NAudio.Wave.WaveFormatConversionStream.CreatePcmStream(new NAudio.Wave.Mp3FileReader(_Stream)));\n    _SampleChannel = new NAudio.Wave.SampleProviders.SampleChannel(_WaveStream);\n    _SampleChannel.PreVolumeMeter += PreVolumeMeterValues;\n    _MeteringSampleProvider = new NAudio.Wave.SampleProviders.MeteringSampleProvider(_SampleChannel);\n    _MeteringSampleProvider.StreamVolume += PostVolumeMeterValues;\n    _WaveOut.Init(new NAudio.Wave.SampleProviders.SampleToWaveProvider(_MeteringSampleProvider));\n    _WaveOut.Play();\n    System.Diagnostics.Debug.WriteLine(&quot;=&gt; Playing&quot;);\n}\n\npublic void Stop()\n{\n    _WaveOut.Stop();\n    System.Diagnostics.Debug.WriteLine(&quot;=&gt; Stopped&quot;);\n}\n\npublic void SetVolume(float Volume)\n{\n    System.Diagnostics.Debug.WriteLine(String.Format(&quot;=&gt; Volume Adjustment set to {0}&quot;, Volume));\n    _SampleChannel.Volume = Volume;\n}\n\nprivate void PreVolumeMeterValues(object sender, NAudio.Wave.SampleProviders.StreamVolumeEventArgs e)\n{\n    System.Diagnostics.Debug.WriteLine(String.Format(&quot;Pre-Volume: {0} &lt;==&gt; {1}&quot;, e.MaxSampleValues[0], e.MaxSampleValues[1]));\n}\n\nprivate void PostVolumeMeterValues(object sender, NAudio.Wave.SampleProviders.StreamVolumeEventArgs e)\n{\n    System.Diagnostics.Debug.WriteLine(String.Format(&quot;Post-Volume: {0} &lt;==&gt; {1}&quot;, e.MaxSampleValues[0], e.MaxSampleValues[1]));\n}\n</code></pre>\n\n}<br />\n",
    "PostedDate": "2013-03-22T15:34:30.03-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1020358",
    "ThreadId": "437658",
    "Html": "Glad you got something working in the end. It's called the &quot;Pre&quot; Volume meter, because it allows metering before the volume control. This is useful for drawing waveforms.\r<br />\nAlso no need for NAudio.Wave.BlockAlignReductionStream and NAudio.Wave.WaveFormatConversionStream.CreatePcmStream. Mp3FileReader returns PCM already.<br />\n",
    "PostedDate": "2013-03-24T12:40:09.377-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1020493",
    "ThreadId": "437658",
    "Html": "Thanks and I will update my code.<br />\n",
    "PostedDate": "2013-03-25T00:23:19.547-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1020495",
    "ThreadId": "437658",
    "Html": "One more thing. How would I go about limiting my MemoryStream amount. It seems the longer I let my stream play the more memory it uses. Is there a way to clear the buffer after it's played or every few minutes? Without interruption?\r<br />\n<br />\n-George<br />\n",
    "PostedDate": "2013-03-25T00:26:49.35-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1025226",
    "ThreadId": "437658",
    "Html": "BufferedWaveProvider is what I would use - it is backed by a circular buffer, so you won't leak memory<br />\n",
    "PostedDate": "2013-04-03T23:29:27.17-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]