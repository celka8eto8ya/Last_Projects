[
  {
    "Id": "1026902",
    "ThreadId": "439434",
    "Html": "I am trying to capture audio from Stereo Mix input device in windows by <em>NAudio .Net library</em>, then send it over my wifi to my android phone, where I play it.\r<br />\n<br />\nThe problem is following: The sound coming from my mobile is very distorted and glitchy. What am I doing wrong? \r<br />\n<br />\nThis is my server - C# code - runs on PC<br />\n<pre><code>    static int C = 0; //BPS\n    static WaveInEvent wi; \n    static TcpListener server;\n    static List&lt;Socket&gt; clients = new List&lt;Socket&gt;(); //List of connected clients\n\n    static void Main(string[] args)\n    {\n        /*  Here is a block of code, where I get stereo mix device ID */\n\n        new System.Threading.Thread(new System.Threading.ThreadStart(rec_start)).Start();\n        new System.Threading.Thread(new System.Threading.ThreadStart(conn_acept)).Start();\n    }\n\n //network init\n  private static void conn_acept()\n  {            \n        server = new TcpListener(new IPEndPoint(IPAddress.Any, port));\n        server.Start();\n\n        while (Running)\n        {\n            Socket client = server.AcceptSocket();\n            client.NoDelay = true;\n            client.Send(UTF8Encoding.UTF8.GetBytes(C + &quot;\\n&quot;));\n            clients.Add(client);\n        }\n  }\n\n\n //capture sound ------------\n private static void rec_start()\n {\n    wi = new WaveInEvent();\n    wi.DeviceNumber = stereomixid;\n    wi.WaveFormat = new WaveFormat(44100, 2);\n    wi.DataAvailable += new EventHandler&lt;WaveInEventArgs&gt;(wi_DataAvailable);\n    wi.StartRecording();\n }\n\n static void wi_DataAvailable(object sender, WaveInEventArgs e)\n {\n        foreach (Socket client in clients)\n        {\n            try {\n                client.Send(e.Buffer);\n            }\n            catch{}\n        }\n        C = e.BytesRecorded;\n }\n</code></pre>\n\nThis is my client - Java code - runs on My android mobile<br />\n<pre><code> try {\n            t.append(&quot;Connecting to 192.168.0.12:4546...\\n&quot;);\n            tcp = new Socket(&quot;192.168.0.12&quot;, 4546);\n\n            in = new BufferedReader(new InputStreamReader(tcp.getInputStream()));\n\n            //first line bsize -&gt; &quot;packetsize&quot;\n            Integer bsize = Integer.parseInt(in.readLine());\n\n            AudioTrack at = new AudioTrack(AudioManager.STREAM_MUSIC, 44100, 2, AudioFormat.ENCODING_PCM_16BIT, bsize, AudioTrack.MODE_STREAM);\n\n            while(true)\n            {\n                byte[] buffer = new byte[bsize];\n                for(int i = 0; i &lt; bsize; i++)\n                {\n                    buffer[i] = (byte) in.read();\n                }\n                at.write(buffer, 0, bsize);\n\n                if(at.getPlayState() == 1)\n                    at.play();\n            }\n\n        } catch (UnknownHostException e) {\n            t.append(&quot;Can't connect! Host not found!\\n&quot;);\n        } catch (IOException e) {\n            t.append(&quot;Can't connect! IOException: &quot; + e.getMessage() + &quot;\\n&quot;);\n        }\n</code></pre>\n\nDo I have to compress the data in <strong>wi_DataAvailable</strong> before sending through wifi?\r<br />\nOr, do I have problem in my android application?\r<br />\nIs that strange <strong>for loop</strong> source of my problem?\r<br />\n<br />\nI tried sending data asynchronously from my PC, but i didn't hepled.\r<br />\n<br />\nAlso I tried save recorded data by WaveFileWriter, it worked. So I was thinking about writing audio data to memory stream by WaveFileWriter, then compress it and send it trought wifi, but this idea looks really crazy, so I think, there is another way to achieve this.\r<br />\n<br />\nThanks for answers guys.<br />\n",
    "PostedDate": "2013-04-07T15:27:38.23-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1027270",
    "ThreadId": "439434",
    "Html": "You'd need buffering at the receiving end to make up for latency in the network. It would also be usual to compress the audio somehow as PCM is a very inefficient way to transmit audio. Also, you should only send BytesRecorded worth of audio each time.<br />\n",
    "PostedDate": "2013-04-08T08:06:51.507-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]