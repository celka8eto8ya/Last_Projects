[
  {
    "Id": "910673",
    "ThreadId": "395043",
    "Html": "\r\n<p>Hello there,</p>\r\n<p>I am currently working developing an app during my free time to control my speakers via Windows phone (basic stuff like picking from a list of mp3s stored in my hard drive and the play them straight away).</p>\r\n<p>It worked great until I&nbsp;decided to split the computer application in two (a server and client), the server handles the communication with the phone and passes the data into a slave machine (like a laptop). &nbsp;I took the same approach given in the\r\n NAudio.MP3 Stream, sending individual mp3 frames via TCP (will move into UDP once I get the hang of it) to the client and then decompressing the via format and associating it with a&nbsp;DirectSoundOut.</p>\r\n<p>Overwriting the file that is being played/pausing/resuming works fine but I am having trouble implementing a loop song feature, since&nbsp;DirectSoundOut object never changes it state to stopped (I assume this has to do with the fact that BufferedWaveProvider\r\n is a open stream with no termination) I am unable to detect that the song has finished and that I can reuse the buffer without having to redownload the MP3.</p>\r\n<p>My code to handle the incoming MP3frames is as follow:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> StreamMP3()\n        {\n            <span style=\"color:blue\">try</span>\n            {\n                Byte[] buffer = <span style=\"color:blue\">new</span> <span style=\"color:blue\">byte</span>[65536];\n                Mp3Frame frame = <span style=\"color:blue\">null</span>;\n                Int32 CArtistID = -1;\n                Int32 CSongID = -1;\n\n                <span style=\"color:blue\">while</span> (<span style=\"color:blue\">true</span>)\n                {\n                    <span style=\"color:blue\">if</span> (CArtistID != ArtistID || CSongID != SongID)\n                    {\n\n                        CArtistID = ArtistID;\n                        CSongID = SongID;\n\n                        DisposeObjects();\n\n                        <span style=\"color:blue\">this</span>.SoundOut = <span style=\"color:blue\">new</span> DirectSoundOut();\n                        <span style=\"color:blue\">this</span>.SoundOut.PlaybackStopped &#43;= SoundOut_PlaybackStopped;\n                    }\n\n\n                Waiting:\n\n                    <span style=\"color:blue\">if</span> (FrameCounter &gt;= FrameList.Count)\n                    {\n                        Thread.Sleep(250);\n                        <span style=\"color:blue\">goto</span> Waiting;\n                    }\n\n \n                    frame = FrameList[FrameCounter];\n\n                    <span style=\"color:blue\">if</span> (frame != <span style=\"color:blue\">null</span>)\n                    {\n                        <span style=\"color:blue\">if</span> (bufferedWaveProvider != <span style=\"color:blue\">null</span> &amp;&amp; bufferedWaveProvider.BufferLength - bufferedWaveProvider.BufferedBytes &lt; bufferedWaveProvider.WaveFormat.AverageBytesPerSecond / 4)\n                            Thread.Sleep(500);\n\n                        <span style=\"color:blue\">if</span> (decompressor == <span style=\"color:blue\">null</span>)\n                        {\n                            WaveFormat waveFormat = <span style=\"color:blue\">new</span> Mp3WaveFormat(frame.SampleRate, frame.ChannelMode == ChannelMode.Mono ? 1 : 2, frame.FrameLength, frame.BitRate);\n                            decompressor = <span style=\"color:blue\">new</span> AcmMp3FrameDecompressor(waveFormat);\n                            <span style=\"color:blue\">this</span>.bufferedWaveProvider = <span style=\"color:blue\">new</span> BufferedWaveProvider(decompressor.OutputFormat);\n                            <span style=\"color:blue\">this</span>.bufferedWaveProvider.BufferDuration = TimeSpan.FromSeconds(100);\n\n                            <span style=\"color:blue\">int</span> decompressed = decompressor.DecompressFrame(frame, buffer, 0);\n                            bufferedWaveProvider.AddSamples(buffer, 0, decompressed);\n\n                            <span style=\"color:blue\">this</span>.volumeProvider = <span style=\"color:blue\">new</span> VolumeWaveProvider16(bufferedWaveProvider);\n\n                            SoundOut.Init(volumeProvider);\n                            SoundOut.Play();\n\n                        }\n                        <span style=\"color:blue\">else</span>\n                        {\n                            <span style=\"color:blue\">int</span> decompressed = decompressor.DecompressFrame(frame, buffer, 0);\n                            bufferedWaveProvider.AddSamples(buffer, 0, decompressed);\n                        }\n\n                        FrameCounter&#43;&#43;;\n                    }\n                }\n            }\n            <span style=\"color:blue\">catch</span> (Exception)\n            {\n                <span style=\"color:blue\">throw</span>;\n            }\n        }\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>I would like to ask what would be the best approach to achieve my goal as I am kind of clueless right now and been looking online for days.</p>\r\n<p>Thanks for reading!</p>\r\n<p>&nbsp;</p>\r\n<p>Alex</p>\r\n",
    "PostedDate": "2012-09-10T16:36:10.803-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "910903",
    "ThreadId": "395043",
    "Html": "<p>I'd make my own custom IWaveProvider that uses BufferedWaveProvider but can be told that there is no more data to come. Then, in the Read method, if that flag is set and the bufferedWaveProvider has no queued bytes, return 0</p>",
    "PostedDate": "2012-09-11T06:19:35.01-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]