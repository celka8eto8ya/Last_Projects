[
  {
    "Id": "643129",
    "ThreadId": "265361",
    "Html": "\r\n<p>Hi</p>\r\n<p>I'm using NAdio in conjuntion with VST.NET to write a C# program that is trying to act like a VST host for VSTI plugins.</p>\r\n<p>My program also has to talk to a webcam and do some image manipulation stuff too and I suspect that it's all too much for my poor old PC and that it ends up in a black hole, always trying to catch up with itself and never succeeding.</p>\r\n<p>Can anyone suggest the most efficient way to monitor and prevent problems when cpu usage gets too much for it.</p>\r\n<p>Many thanks for your consideration.</p>\r\n<p>Relevant bit of my code...</p>\r\n<p></p>\r\n<pre>namespace AudioIO\r\n{\r\n    class AudioOutput : IDisposable\r\n    {\r\n        public IWavePlayer playbackDevice = null;\r\n        private VSTStream vstStream = null;\r\n        private IVstPluginCommandStub plugin;\r\n        private int sample_rate, mono_stereo;\r\n\r\n        public AudioOutput(IVstPluginCommandStub plugin, int sample_rate, int mono_stereo)\r\n        {\r\n            this.plugin = plugin;\r\n            this.sample_rate = sample_rate;\r\n            this.mono_stereo = mono_stereo;\r\n\r\n            Init();\r\n        }\r\n\r\n        public void Init()\r\n        {\r\n            vstStream = new VSTStream(this.plugin, sample_rate, mono_stereo);\r\n            vstStream.SetWaveFormat(sample_rate, mono_stereo);\r\n            \r\n            playbackDevice = new WaveOut(WaveCallbackInfo.FunctionCallback());\r\n            playbackDevice.Init(vstStream);\r\n        }\r\n\r\n        public void volume(float vol_in)\r\n        {\r\n            playbackDevice.Volume = vol_in;\r\n        }\r\n\r\n        public void Dispose()\r\n        {\r\n            if (playbackDevice != null)\r\n            {\r\n                playbackDevice.Pause();\r\n                playbackDevice.Stop();\r\n                playbackDevice.Dispose();\r\n                playbackDevice = null;\r\n            }\r\n        }\r\n\r\n        public void Stop()\r\n        {\r\n            if (playbackDevice != null &amp;&amp; playbackDevice.PlaybackState != PlaybackState.Stopped)\r\n                playbackDevice.Pause();\r\n                playbackDevice.Stop();\r\n        }\r\n\r\n        public void Play()\r\n        {\r\n            if (playbackDevice != null &amp;&amp; playbackDevice.PlaybackState != PlaybackState.Playing)\r\n                playbackDevice.Play();\r\n        }\r\n\r\n        public void Pause()\r\n        {\r\n            if (playbackDevice != null &amp;&amp; playbackDevice.PlaybackState != PlaybackState.Paused)\r\n                playbackDevice.Pause();\r\n        }\r\n    }\r\n    \r\n    class VSTStream : WaveProvider32\r\n    {\r\n        public long Length { get { throw new System.NotSupportedException(); } }\r\n        public long Position { get { throw new System.NotSupportedException(); } set { throw new System.NotSupportedException(); } }\r\n\r\n        public IVstPluginCommandStub plugin;\r\n        private int sample_rate, mono_stereo;\r\n        VstAudioBufferManager vstBufManIn, vstBufManOut;\r\n        private VstAudioBuffer[] vstBufIn;\r\n        private VstAudioBuffer[] vstBufOut;\r\n       \r\n        public VSTStream(IVstPluginCommandStub plugin, int sample_rate, int mono_stereo)\r\n        {\r\n            this.plugin = plugin;\r\n            this.sample_rate = sample_rate;\r\n            this.mono_stereo = mono_stereo;\r\n            int block_size = sample_rate / 10;\r\n            \r\n            plugin.SetBlockSize(block_size);\r\n            plugin.SetSampleRate((float)sample_rate);\r\n            plugin.GetOutputProperties(0);\r\n            \r\n            vstBufManIn = new VstAudioBufferManager(2, block_size);\r\n            vstBufManOut = new VstAudioBufferManager(2, block_size);\r\n\r\n            vstBufIn = vstBufManIn.ToArray();\r\n            vstBufOut = vstBufManOut.ToArray();\r\n        }\r\n\r\n        public override int Read(float[] buffer, int offset, int sampleCount)\r\n        {\r\n            plugin.ProcessEvents(freedom_music_v1.form1.vMidiEvents.ToArray());\r\n            freedom_music_v1.form1.vMidiEvents.Clear();\r\n\r\n            plugin.ProcessReplacing(vstBufIn, vstBufOut);\r\n\r\n            {\r\n                float this_vol = freedom_music_v1.form1.main_volume;\r\n\r\n                unsafe\r\n                {\r\n                    if (mono_stereo == 2)\r\n                    {\r\n                        float* tmpBufL = ((IDirectBufferAccess32)vstBufOut[0]).Buffer;\r\n                        float* tmpBufR = ((IDirectBufferAccess32)vstBufOut[1]).Buffer;\r\n                        int j = 0;\r\n                        for (int i = 0; i &lt; (sampleCount / 2); i&#43;&#43;)\r\n                        {\r\n                            buffer[j] = (*(tmpBufL &#43; i)) * this_vol;\r\n                            j&#43;&#43;;\r\n                            buffer[j] = (*(tmpBufR &#43; i)) * this_vol;\r\n                            j&#43;&#43;;\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        float* tmpBufL = ((IDirectBufferAccess32)vstBufOut[0]).Buffer;\r\n                        for (int i = 0; i &lt; (sampleCount); i&#43;&#43;)\r\n                        {\r\n                            buffer[i] = (*(tmpBufL &#43; i)) * this_vol;\r\n                        }\r\n                    }\r\n                }\r\n                return sampleCount;\r\n            }\r\n        }\r\n    }\r\n}</pre>\r\n<p></p>\r\n",
    "PostedDate": "2011-07-15T13:29:25.947-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "647617",
    "ThreadId": "265361",
    "Html": "<p>I would write an offline processing function that passes a WAV file through the VST effect. Then you can use a profiler to see what parts of your code are in need of optimisation.</p>\r\n<p>Mark</p>",
    "PostedDate": "2011-07-26T02:29:58.317-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]