[
  {
    "Id": "182353",
    "ThreadId": "54133",
    "Html": "Hello, everyone!<br>\r\nI am new to the N Audio project and kinda in a time-crisis so... can anyone help me understand how to play a sound that I receive over the network? I would be most satisfied to play it after it is fully received.<br>\r\n<br>\r\nPlease, pretty please!<br>\r\n",
    "PostedDate": "2009-04-22T07:56:05.557-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "190341",
    "ThreadId": "54133",
    "Html": "<p>Hi there</p>\r\n<p>It really depends what format the sound you are receiving over the network is in. Is it WAV, or a compressed format? NAudio can play sounds from any source, but eventually they have to turn into PCM. This is the hard part.</p>\r\n<p>Mark</p>",
    "PostedDate": "2009-05-14T09:58:55.103-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "190604",
    "ThreadId": "54133",
    "Html": "<p>Hello</p>\r\n<p>Right now I have a WAV that i must play... and further more... it has to be streamed. As I&nbsp; understand, the architecture of NAudio does not support streaming, so I started using DirectSound.</p>\r\n<p>Thanks for the relpy, anyways</p>\r\n<p>7Turturi</p>",
    "PostedDate": "2009-05-15T01:01:52.85-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "198917",
    "ThreadId": "54133",
    "Html": "<p>NAudio does support streaming. The whole architecture is based on streams that are connected together in a graph. You derive from WaveStream and in the Read method simply provide data from the network source.</p>\r\n<p>Mark</p>",
    "PostedDate": "2009-06-08T01:40:41.997-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "497898",
    "ThreadId": "54133",
    "Html": "<p>Hi Mark,</p>\r\n<p>Have you managed to write up a sample of how to stream audio over network using NAudio?</p>\r\n<p>Cheers</p>",
    "PostedDate": "2010-09-23T22:27:14.877-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "498838",
    "ThreadId": "54133",
    "Html": "<p>I'm afraid not.</p>",
    "PostedDate": "2010-09-27T02:43:33.603-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "499259",
    "ThreadId": "54133",
    "Html": "<p>I have now got network streaming working... My initial problem was not reading the correct size chucnks of data from the stream before sending over the network.</p>\r\n<p>This class must be added to NAudio:</p>\r\n<p><span style=\"color:blue\">using</span>&nbsp;System;<br><span style=\"color:blue\">using</span>&nbsp;System.IO;<br><span style=\"color:blue\">using</span>&nbsp;System.Runtime.InteropServices;<br><span style=\"color:blue\">using</span>&nbsp;System.Collections.Generic;<br><span style=\"color:blue\">using</span>&nbsp;System.Threading;<br> <br><span style=\"color:blue\">namespace</span>&nbsp;NAudio.Wave&nbsp;{<br> <br> <span style=\"color:blue\">class</span>&nbsp;<span style=\"color:#2b91af\">BufferedAudioStream</span>&nbsp;{<br> <br> <span style=\"color:blue\">private</span>&nbsp;<span style=\"color:blue\">byte</span>[]&nbsp;_buffer;<br> <span style=\"color:blue\">private</span>&nbsp;<span style=\"color:blue\">int</span>&nbsp;_position;<br> <br> <span style=\"color:blue\">public</span>&nbsp;BufferedAudioStream(<span style=\"color:blue\">byte</span>[]&nbsp;buffer)&nbsp;{<br> _position&nbsp;=&nbsp;0;<br> _buffer&nbsp;=&nbsp;buffer;<br> }<br> <br> <span style=\"color:blue\">public</span>&nbsp;<span style=\"color:blue\">byte</span>[]&nbsp;Buffer&nbsp;{<br> <span style=\"color:blue\">get</span>&nbsp;{<br> <span style=\"color:blue\">return</span>&nbsp;_buffer;<br> }<br> }<br> <br> <span style=\"color:blue\">public</span>&nbsp;<span style=\"color:blue\">int</span>&nbsp;Position&nbsp;{<br> <span style=\"color:blue\">get</span>&nbsp;{<br> <span style=\"color:blue\">return</span>&nbsp;_position;<br> }<br> <span style=\"color:blue\">set</span>&nbsp;{<br> _position&nbsp;=&nbsp;<span style=\"color:blue\">value</span>;<br> }<br> }<br> }<br> <br> <span style=\"color:blue\">public</span>&nbsp;<span style=\"color:blue\">class</span>&nbsp;<span style=\"color:#2b91af\">BufferedSampleStream</span>&nbsp;:&nbsp;<span style=\"color:#2b91af\">WaveStream</span>&nbsp;{<br> <br> <span style=\"color:blue\">private</span>&nbsp;<span style=\"color:#2b91af\">WaveFormat</span>&nbsp;_waveformat;<br> <span style=\"color:blue\">private</span>&nbsp;<span style=\"color:blue\">long</span>&nbsp;_position;<br> <span style=\"color:blue\">private</span>&nbsp;<span style=\"color:#2b91af\">Queue</span>&lt;<span style=\"color:#2b91af\">BufferedAudioStream</span>&gt;&nbsp;_sampQueue;<br> <br> <span style=\"color:blue\">public</span>&nbsp;BufferedSampleStream()&nbsp;{<br> _waveformat&nbsp;=&nbsp;<span style=\"color:blue\">new</span>&nbsp;<span style=\"color:#2b91af\">WaveFormat</span>(44100,&nbsp;2);<br> _position&nbsp;=&nbsp;0;<br> _sampQueue&nbsp;=&nbsp;<span style=\"color:blue\">new</span>&nbsp;<span style=\"color:#2b91af\">Queue</span>&lt;<span style=\"color:#2b91af\">BufferedAudioStream</span>&gt;();<br> }<br> <br> <span style=\"color:blue\">public</span>&nbsp;BufferedSampleStream(<span style=\"color:blue\">int</span>&nbsp;rate,&nbsp;<span style=\"color:blue\">int</span>&nbsp;channels)&nbsp;{<br> _waveformat&nbsp;=&nbsp;<span style=\"color:blue\">new</span>&nbsp;<span style=\"color:#2b91af\">WaveFormat</span>(rate,&nbsp;channels);<br> _position&nbsp;=&nbsp;0;<br> _sampQueue&nbsp;=&nbsp;<span style=\"color:blue\">new</span>&nbsp;<span style=\"color:#2b91af\">Queue</span>&lt;<span style=\"color:#2b91af\">BufferedAudioStream</span>&gt;();<br> }<br> <br> <span style=\"color:gray\">///</span><span style=\"color:green\">&nbsp;</span><span style=\"color:gray\">&lt;summary&gt;</span><br> <span style=\"color:gray\">///</span><span style=\"color:green\">&nbsp;Adds&nbsp;a&nbsp;byte[]&nbsp;array&nbsp;of&nbsp;PCM&nbsp;encoded&nbsp;samples&nbsp;to&nbsp;be&nbsp;streamed</span><br> <span style=\"color:gray\">///</span><span style=\"color:green\">&nbsp;</span><span style=\"color:gray\">&lt;/summary&gt;</span><br> <span style=\"color:blue\">public</span>&nbsp;<span style=\"color:blue\">void</span>&nbsp;AddSamples(<span style=\"color:blue\">byte</span>[]&nbsp;buffer,&nbsp;<span style=\"color:blue\">int</span>&nbsp;offset,&nbsp;<span style=\"color:blue\">int</span>&nbsp;count)&nbsp;{<br> <span style=\"color:blue\">byte</span>[]&nbsp;nbuffer&nbsp;=&nbsp;<span style=\"color:blue\">new</span>&nbsp;<span style=\"color:blue\">byte</span>[count];<br> <span style=\"color:#2b91af\">Buffer</span>.BlockCopy(buffer,&nbsp;offset,&nbsp;nbuffer,&nbsp;0,&nbsp;count);<br> <br> <span style=\"color:blue\">lock</span>&nbsp;(_sampQueue)&nbsp;{<br> _sampQueue.Enqueue(<span style=\"color:blue\">new</span>&nbsp;<span style=\"color:#2b91af\">BufferedAudioStream</span>(nbuffer));<br> }<br> }<br> <br> <span style=\"color:gray\">///</span><span style=\"color:green\">&nbsp;</span><span style=\"color:gray\">&lt;summary&gt;</span><br> <span style=\"color:gray\">///</span><span style=\"color:green\">&nbsp;We&nbsp;can&nbsp;read&nbsp;from&nbsp;this&nbsp;stream</span><br> <span style=\"color:gray\">///</span><span style=\"color:green\">&nbsp;</span><span style=\"color:gray\">&lt;/summary&gt;</span><br> <span style=\"color:blue\">public</span>&nbsp;<span style=\"color:blue\">override</span>&nbsp;<span style=\"color:blue\">bool</span>&nbsp;CanRead&nbsp;{&nbsp;<span style=\"color:blue\">get</span>&nbsp;{&nbsp;<span style=\"color:blue\">return</span>&nbsp;<span style=\"color:blue\">true</span>;&nbsp;}&nbsp;}<br> <br> <span style=\"color:gray\">///</span><span style=\"color:green\">&nbsp;</span><span style=\"color:gray\">&lt;summary&gt;</span><br> <span style=\"color:gray\">///</span><span style=\"color:green\">&nbsp;We&nbsp;can&nbsp;seek&nbsp;within&nbsp;this&nbsp;stream</span><br> <span style=\"color:gray\">///</span><span style=\"color:green\">&nbsp;</span><span style=\"color:gray\">&lt;/summary&gt;</span><br> <span style=\"color:blue\">public</span>&nbsp;<span style=\"color:blue\">override</span>&nbsp;<span style=\"color:blue\">bool</span>&nbsp;CanSeek&nbsp;{&nbsp;<span style=\"color:blue\">get</span>&nbsp;{&nbsp;<span style=\"color:blue\">return</span>&nbsp;<span style=\"color:blue\">false</span>;&nbsp;}&nbsp;}<br> <br> <span style=\"color:gray\">///</span><span style=\"color:green\">&nbsp;</span><span style=\"color:gray\">&lt;summary&gt;</span><br> <span style=\"color:gray\">///</span><span style=\"color:green\">&nbsp;We&nbsp;can't&nbsp;write&nbsp;to&nbsp;this&nbsp;stream</span><br> <span style=\"color:gray\">///</span><span style=\"color:green\">&nbsp;</span><span style=\"color:gray\">&lt;/summary&gt;</span><br> <span style=\"color:blue\">public</span>&nbsp;<span style=\"color:blue\">override</span>&nbsp;<span style=\"color:blue\">bool</span>&nbsp;CanWrite&nbsp;{&nbsp;<span style=\"color:blue\">get</span>&nbsp;{&nbsp;<span style=\"color:blue\">return</span>&nbsp;<span style=\"color:blue\">false</span>;&nbsp;}&nbsp;}<br> <br> <span style=\"color:blue\">public</span>&nbsp;<span style=\"color:blue\">override</span>&nbsp;<span style=\"color:#2b91af\">WaveFormat</span>&nbsp;WaveFormat&nbsp;{<br> <span style=\"color:blue\">get</span>&nbsp;{<br> <span style=\"color:blue\">return</span>&nbsp;_waveformat;<br> }<br> }<br> <br> <span style=\"color:gray\">///</span><span style=\"color:green\">&nbsp;</span><span style=\"color:gray\">&lt;summary&gt;</span><br> <span style=\"color:gray\">///</span><span style=\"color:green\">&nbsp;An&nbsp;alternative&nbsp;way&nbsp;of&nbsp;repositioning.</span><br> <span style=\"color:gray\">///</span><span style=\"color:green\">&nbsp;See&nbsp;</span><span style=\"color:gray\">&lt;see&nbsp;cref=</span><span style=\"color:gray\">&quot;Stream.Seek&quot;</span><span style=\"color:gray\">/&gt;</span><br> <span style=\"color:gray\">///</span><span style=\"color:green\">&nbsp;</span><span style=\"color:gray\">&lt;/summary&gt;</span><br> <span style=\"color:blue\">public</span>&nbsp;<span style=\"color:blue\">override</span>&nbsp;<span style=\"color:blue\">long</span>&nbsp;Seek(<span style=\"color:blue\">long</span>&nbsp;offset,&nbsp;<span style=\"color:#2b91af\">SeekOrigin</span>&nbsp;origin)&nbsp;{<br> <span style=\"color:blue\">return</span>&nbsp;Position;<br> }<br> <br> <span style=\"color:blue\">public</span>&nbsp;<span style=\"color:blue\">override</span>&nbsp;<span style=\"color:blue\">long</span>&nbsp;Length&nbsp;{<br> <span style=\"color:blue\">get</span>&nbsp;{&nbsp;<span style=\"color:blue\">return</span>&nbsp;<span style=\"color:blue\">long</span>.MaxValue&nbsp;/&nbsp;32;&nbsp;}<br> }<br> <br> <span style=\"color:blue\">public</span>&nbsp;<span style=\"color:blue\">override</span>&nbsp;<span style=\"color:blue\">long</span>&nbsp;Position&nbsp;{<br> <span style=\"color:blue\">get</span>&nbsp;{<br> <span style=\"color:blue\">return</span>&nbsp;_position;<br> }<br> <span style=\"color:blue\">set</span>&nbsp;{<br> _position&nbsp;=&nbsp;<span style=\"color:blue\">value</span>;<br> }<br> }<br> <br> <span style=\"color:blue\">public</span>&nbsp;<span style=\"color:blue\">override</span>&nbsp;<span style=\"color:blue\">bool</span>&nbsp;HasData(<span style=\"color:blue\">int</span>&nbsp;count)&nbsp;{<br> <span style=\"color:green\">//&nbsp;This&nbsp;buffered&nbsp;sample&nbsp;stream&nbsp;will&nbsp;always&nbsp;return&nbsp;some&nbsp;type&nbsp;of&nbsp;audio&nbsp;data</span><br> <span style=\"color:blue\">return</span>&nbsp;<span style=\"color:blue\">true</span>;<br> }<br> <br> <span style=\"color:gray\">///</span><span style=\"color:green\">&nbsp;</span><span style=\"color:gray\">&lt;summary&gt;</span><br> <span style=\"color:gray\">///</span><span style=\"color:green\">&nbsp;Reads&nbsp;sample&nbsp;data&nbsp;from&nbsp;queued&nbsp;samples,&nbsp;if&nbsp;queue&nbsp;is&nbsp;empty&nbsp;generates&nbsp;silence</span><br> <span style=\"color:gray\">///</span><span style=\"color:green\">&nbsp;</span><span style=\"color:gray\">&lt;/summary&gt;</span><br> <span style=\"color:blue\">public</span>&nbsp;<span style=\"color:blue\">override</span>&nbsp;<span style=\"color:blue\">int</span>&nbsp;Read(<span style=\"color:blue\">byte</span>[]&nbsp;buffer,&nbsp;<span style=\"color:blue\">int</span>&nbsp;offset,&nbsp;<span style=\"color:blue\">int</span>&nbsp;count)&nbsp;{<br> <span style=\"color:blue\">int</span>&nbsp;read&nbsp;=&nbsp;0;<br> <span style=\"color:blue\">while</span>&nbsp;(read&nbsp;&lt;&nbsp;count)&nbsp;{<br> <span style=\"color:blue\">int</span>&nbsp;required&nbsp;=&nbsp;count&nbsp;-&nbsp;read;<br> <span style=\"color:blue\">if</span>&nbsp;(_sampQueue.Count&nbsp;==&nbsp;0)&nbsp;{<br> <span style=\"color:green\">//&nbsp;Return&nbsp;a&nbsp;zero&nbsp;filled&nbsp;buffer</span><br> <span style=\"color:blue\">for</span>&nbsp;(<span style=\"color:blue\">int</span>&nbsp;n&nbsp;=&nbsp;0;&nbsp;n&nbsp;&lt;&nbsp;required;&nbsp;n++)<br> buffer[offset&nbsp;+&nbsp;n]&nbsp;=&nbsp;0;<br> <br> read&nbsp;+=&nbsp;required;<br> }&nbsp;<span style=\"color:blue\">else</span>&nbsp;{<br> <span style=\"color:#2b91af\">BufferedAudioStream</span>&nbsp;sblock&nbsp;=&nbsp;(<span style=\"color:#2b91af\">BufferedAudioStream</span>)_sampQueue.Peek();<br> <br> <span style=\"color:blue\">int</span>&nbsp;nread&nbsp;=&nbsp;sblock.Buffer.Length&nbsp;-&nbsp;sblock.Position;<br> <br> <span style=\"color:green\">//&nbsp;If&nbsp;this&nbsp;buffer&nbsp;must&nbsp;be&nbsp;read&nbsp;in&nbsp;it's&nbsp;entirety</span><br> <span style=\"color:blue\">if</span>&nbsp;(nread&nbsp;&lt;=&nbsp;required)&nbsp;{<br> <span style=\"color:green\">//&nbsp;Read&nbsp;entire&nbsp;buffer</span><br> <span style=\"color:#2b91af\">Buffer</span>.BlockCopy(sblock.Buffer,&nbsp;sblock.Position,&nbsp;buffer,&nbsp;offset&nbsp;+&nbsp;read,&nbsp;nread);<br> read&nbsp;+=&nbsp;nread;<br> <br> _sampQueue.Dequeue();<br> <br> }&nbsp;<span style=\"color:blue\">else</span>&nbsp;<span style=\"color:green\">//&nbsp;the&nbsp;number&nbsp;of&nbsp;bytes&nbsp;that&nbsp;can&nbsp;be&nbsp;read&nbsp;is&nbsp;greater&nbsp;than&nbsp;that&nbsp;required</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> <span style=\"color:#2b91af\">Buffer</span>.BlockCopy(sblock.Buffer,&nbsp;sblock.Position,&nbsp;buffer,&nbsp;offset&nbsp;+&nbsp;read,&nbsp;required);<br> sblock.Position&nbsp;+=&nbsp;required;<br> read&nbsp;+=&nbsp;required;<br> }<br> }<br> <br> }<br> <br> _position&nbsp;+=&nbsp;read;<br> <br> <span style=\"color:blue\">return</span>&nbsp;read;<br> }<br> <br> }<br> <br>}</p>\r\n<pre style=\"font-family:consolas\">Server Side Code:</pre>\r\n<pre style=\"font-family:consolas\"><pre style=\"font-family:consolas\"><br>\t\t<span style=\"color:blue\">void</span>&nbsp;PlayFile()&nbsp;{<br> <br>\t\t\t<span style=\"color:blue\">string</span>&nbsp;fileName&nbsp;=&nbsp;<span style=\"color:#a31515\">&quot;c:\\\\temp\\\\Music\\\\1.mp3&quot;</span>;<br>\t\t\t<span style=\"color:#2b91af\">WaveStream</span>&nbsp;mp3Reader&nbsp;=&nbsp;<span style=\"color:blue\">new</span>&nbsp;<span style=\"color:#2b91af\">Mp3FileReader</span>(fileName);<br>\t\t\t<span style=\"color:#2b91af\">WaveStream</span>&nbsp;pcmStream&nbsp;=&nbsp;<span style=\"color:#2b91af\">WaveFormatConversionStream</span>.CreatePcmStream(mp3Reader);<br>\t\t\t<span style=\"color:#2b91af\">WaveStream</span>&nbsp;blockAlignedStream&nbsp;=&nbsp;<span style=\"color:blue\">new</span>&nbsp;<span style=\"color:#2b91af\">BlockAlignReductionStream</span>(pcmStream);<br> <br>\t\t\t<span style=\"color:blue\">int</span>&nbsp;intSize&nbsp;=&nbsp;GetBlockSize(blockAlignedStream.WaveFormat,&nbsp;&nbsp;200);<br>\t\t\t<span style=\"color:blue\">byte</span>[]&nbsp;buffer&nbsp;=&nbsp;<span style=\"color:blue\">new</span>&nbsp;<span style=\"color:blue\">byte</span>[intSize];<br>\t\t\t<span style=\"color:blue\">while</span>&nbsp;(<span style=\"color:blue\">true</span>)&nbsp;{<br>\t\t\t\t<span style=\"color:blue\">int</span>&nbsp;intOffset&nbsp;=&nbsp;0;<br> <br>\t\t\t\t<span style=\"color:blue\">int</span>&nbsp;intRead&nbsp;=&nbsp;blockAlignedStream.Read(buffer,&nbsp;intOffset,&nbsp;intSize);<br>\t\t\t\t<span style=\"color:blue\">if</span>&nbsp;(intRead&nbsp;==&nbsp;0)&nbsp;{<br>\t\t\t\t\t<span style=\"color:blue\">break</span>;<br>\t\t\t\t}<br> <br>\t\t\t\t<span style=\"color:green\">//SERVER:&nbsp;Code&nbsp;Send&nbsp;data&nbsp;over&nbsp;network</span><br>\t\t\t}</pre>\r\n</pre>\r\n<pre style=\"font-family:consolas\">}</pre>\r\n<pre style=\"font-family:consolas\"><pre style=\"font-family:consolas\">\t\t<span style=\"color:blue\">private</span>&nbsp;<span style=\"color:blue\">int</span>&nbsp;GetBlockSize(NAudio.Wave.<span style=\"color:#2b91af\">WaveFormat</span>&nbsp;waveFormat,&nbsp;<span style=\"color:blue\">int</span>&nbsp;intLatencyMS)&nbsp;{<br>\t\t\t<span style=\"color:blue\">int</span>&nbsp;bytes&nbsp;=&nbsp;intLatencyMS&nbsp;*&nbsp;(waveFormat.AverageBytesPerSecond&nbsp;/&nbsp;1000);<br>\t\t\tbytes&nbsp;-=&nbsp;bytes&nbsp;%&nbsp;waveFormat.BlockAlign;<br>\t\t\t<span style=\"color:blue\">return</span>&nbsp;bytes;<br>\t\t}<br></pre>\r\n<pre style=\"font-family:consolas\">Client Side Code:</pre>\r\n<pre style=\"font-family:consolas\"><pre style=\"font-family:consolas\"><span style=\"color:green\">//Init Sound Output</span><br>NAudio.Wave.<span style=\"color:#2b91af\">BufferedSampleStream</span>&nbsp;bufferedStream&nbsp;=&nbsp;<span style=\"color:blue\">new</span>&nbsp;<span style=\"color:#2b91af\">BufferedSampleStream</span>();<br><br>waveOutDevice.Init(bufferedStream);<br>waveOutDevice.Play();<br></pre>\r\n</pre>\r\n<pre style=\"font-family:consolas\"><pre style=\"font-family:consolas\"><span style=\"color:green\">//When&nbsp;data&nbsp;is&nbsp;received&nbsp;from&nbsp;NetworkStream</span></pre>\r\n<pre style=\"font-family:consolas\">bufferedStream.AddSamples(buffer,&nbsp;intOffset,&nbsp;intSize);<br></pre>\r\n</pre>\r\n</pre>",
    "PostedDate": "2010-09-27T20:36:54.777-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "499821",
    "ThreadId": "54133",
    "Html": "<p>cool, NAudio could do with something like this</p>",
    "PostedDate": "2010-09-29T01:54:58.05-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "997165",
    "ThreadId": "54133",
    "Html": "please send naudio practise sharp source code project in C# for FLAC file reader in my mail address <a href=\"mailto:sudip.deba@gmail.com\" rel=\"nofollow\">sudip.deba@gmail.com</a><br />\n",
    "PostedDate": "2013-02-06T03:02:41.137-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "997168",
    "ThreadId": "54133",
    "Html": "NAudio and Practise Sharp are both open source projects. Click &quot;Source Code&quot; above to get the NAudio. To get practise sharp source code, go to its home page, and you can download the latest source from there.<br />\n",
    "PostedDate": "2013-02-06T03:05:43.723-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]