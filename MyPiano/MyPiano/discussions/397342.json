[
  {
    "Id": "919161",
    "ThreadId": "397342",
    "Html": "\r\n<p>So I have an audioplayer that plays audio according to time and delay's the playback of the next audio file based on write time.</p>\r\n<hr>\r\n<p>&nbsp;</p>\r\n<p>offset_stream = <span style=\"color:blue\">new</span> WaveOffsetStream(file_stream);\r\n<br>\r\nchannel_stream = <span style=\"color:blue\">new</span> WaveChannel32(offset_stream);</p>\r\n<p>&nbsp;</p>\r\n<p>public TimeSpan Delay_Playback<br>\r\n{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; get <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return offset_stream.StartTime;\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; set <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; { <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; offset_stream.StartTime = value;\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n}</p>\r\n<hr>\r\n<p>Example:</p>\r\n<p>I'm playing 4 different wave files that are roughly the same length between 10:00 and 10:15.<br>\r\nIf the wave files are in different directories I don't bother comparing the last write time,<br>\r\nhowever if there are say two files in the same directory I compare the last write time and play<br>\r\nthe early of the two first. I also save the difference between last write times and delay the<br>\r\nlater of the two by that difference.</p>\r\n<p>So say, one file was written at 10:00:00 AM and the next was written at 10:00:36 AM, then the\r\n<br>\r\n10:00:00 AM file is played, but the 10:00:36 is delayed by 36 seconds. This works great, however,<br>\r\nit also cuts off the audio at the end by the same amount. So a 10 min file only plays for 9:24.</p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-size:x-small\"><span style=\"font-size:x-small\"></span></span></p>\r\n",
    "PostedDate": "2012-09-28T12:10:25.617-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "919574",
    "ThreadId": "397342",
    "Html": "<p>You need to ensure the SourceLength is set up correctly</p>",
    "PostedDate": "2012-09-29T23:30:52.133-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920032",
    "ThreadId": "397342",
    "Html": "<p>Ok, I thought I set it up already, but maybe I was doing it wrong.</p>\r\n<p>I set the SourceLength = to the TotalTime of the file being delayed. This didn't solve my problem however.</p>\r\n<p>&nbsp;</p>\r\n<p>// Check to see if the Directory of each Audio Sample being compared are the same<br />if (Sample[i].Directory == Sample[i + 1].Directory)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp; // If the Directories are equal, then check to see which Audio Sample has an earlier Write_Time<br />&nbsp;&nbsp;&nbsp;&nbsp; if (Sample[i].Write_Time &lt; Sample[i + 1].Write_Time)<br />&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sample[i].Position = 0;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; time = Sample[i + 1].Write_Time - Sample[i].Write_Time;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sample[i + 1].Pre_Delay = time;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sample[i + 1].Read_Length = Sample[i + 1].TotalTime;<br />&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp; else if (Sample[i].Write_Time &gt; Sample[i + 1].Write_Time)<br />&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sample[i + 1].Position = 0;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; time = Sample[i].Write_Time - Sample[i + 1].Write_Time;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sample[i].Pre_Delay = time;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sample[i].Read_Length = Sample[i].TotalTime;<br />&nbsp;&nbsp;&nbsp;&nbsp; }<br />}<br />else<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp; Sample[i].Position = 0;<br />}</p>\r\n<p>&nbsp;</p>\r\n<p>\r\n<hr />\r\n</p>\r\n<p>public TimeSpan Read_Length<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp; get<br />&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return offset_stream.SourceLength;<br />&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp; set<br />&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; offset_stream.SourceLength = value;<br />&nbsp;&nbsp;&nbsp;&nbsp; }<br />}</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2012-10-01T07:09:06.557-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "920802",
    "ThreadId": "397342",
    "Html": "<p>I found my issue:</p>\r\n<p>offset_stream = <span style=\"color: blue;\">new</span> WaveOffsetStream(file_stream);</p>\r\n<p>I'm not passing the TimeSpan value(s) to WaveOffsetStream. Thanks for the advice, it caused me to take another look :-)</p>",
    "PostedDate": "2012-10-02T12:16:37.633-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]