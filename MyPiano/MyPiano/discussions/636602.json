[
  {
    "Id": "1422602",
    "ThreadId": "636602",
    "Html": "Hello, I am having trouble playing back the audio that I put into the buffered wave provider.  It plays back some stuff but the ends are getting cut off. I have checked the data through wireshark and I am getting all the information it's just not playing back correctly. \r<br />\n<br />\nHere is the code for when the player hits the play button:<br />\n<pre><code>private NAudio.Wave.DirectSoundOut waveOut = null;\n        //NAudio.Wave.WaveOutEvent waveEvent = null;\n        //NAudio.Wave.WaveCallbackInfo callBack = NAudio.Wave.WaveCallbackInfo.FunctionCallback();\n        NAudio.Wave.BufferedWaveProvider wavePlayerBuffer;\n        //Play Button\n        private void button2_Click(object sender, EventArgs e)\n        {\n\n            // construct playback buffer\n            \n            //wavePlayerBuffer = new NAudio.Wave.BufferedWaveProvider(playbackFormat);\n\n            // associate playback buffer with player \n           // waveEvent = new NAudio.Wave.WaveOutEvent();\n            waveOut = new NAudio.Wave.DirectSoundOut();\n            //waveOut.Init(wavePlayerBuffer); // providing connection to player \n            \n            //starts streaming thread once\n\n            CommandMessage cm = new CommandMessage();\n            cm.offset = 0;\n            cm.songId = 1;\n\n            aClient.requestAuth(&quot;PLAY &quot; + cm.offset.ToString() + &quot; LOC &quot; + cm.songId.ToString());\n\n            Byte[] sampleArray = new Byte[4];\n            Byte[] channelArray = new Byte[2];\n            Byte[] BperS = new Byte[2];\n            Byte[] BitA = new Byte[2];\n            Byte[] incomingControlData = aClient.headerRiff;\n\n            //if (BitConverter.IsLittleEndian)\n            //    Array.Reverse(incomingControlData);\n\n            Array.Copy(incomingControlData, 24, sampleArray, 0, 4);\n            Array.Copy(incomingControlData, 22, channelArray, 0, 2);\n            Array.Copy(incomingControlData, 34, BperS, 0, 2);\n            Array.Copy(incomingControlData, 32, BitA, 0, 2);\n\n            int sampleRate = BitConverter.ToInt32(sampleArray, 0);\n            int channel = BitConverter.ToInt16(channelArray, 0);\n            int BitDepth = BitConverter.ToInt16(BperS, 0);\n            int BlockAllign = BitConverter.ToInt16(BitA, 0);\n            NAudio.Wave.WaveFormat playbackFormat = new NAudio.Wave.WaveFormat(8000, 8, 1);//(sampleRate, BitDepth ,channel);\n\n            wavePlayerBuffer = new NAudio.Wave.BufferedWaveProvider(playbackFormat);\n            wavePlayerBuffer.BufferDuration = TimeSpan.FromSeconds(360.0);\n            wavePlayerBuffer.ClearBuffer(); \n\n            waveOut.Init(wavePlayerBuffer);\n            waveOut.Play();\n            if (doOnce)\n            {\n                Thread thread =\n                 new Thread(new ThreadStart(WaitForPackets));\n                thread.IsBackground = true;\n                thread.Start();\n                Streaming = true;\n                doOnce = false;\n            }\n\n            \n            //while (waveOut.PlaybackState == NAudio.Wave.PlaybackState.Playing)\n            //{\n            //    Thread.Sleep(100);\n            //}\n        }</code></pre>\n\nAnd here is my code for my thread for receiving data from my server<br />\n<pre><code> void WaitForPackets()\n        {\n            while (Streaming)\n            {\n\n                try\n                {\n                    byte[] incomingData = client.Receive(ref receivePoint);\n\n                for (int i = 0; i &lt; 1000; i++)\n                {\n                    streamBuffer[buffId, i + offset] = incomingData[i];\n                }\n\n                offset += 1000;\n               \n                if (offset == 8000)\n                {\n                    //creates a one dimensional array to send to be played\n                    byte[] chunkReady = new byte[8000];\n\n                    for (int i = 0; i &lt; 8000; i++)\n                    {\n                        chunkReady[i] = ( (streamBuffer[buffId, i]));\n                    }\n\n                    // associated with waveOut object \n                    //MessageBox.Show(wavePlayerBuffer.BufferLength.ToString());\n                    Console.WriteLine(&quot;Current duration of song&quot; +  wavePlayerBuffer.BufferedDuration.ToString());\n                    Console.WriteLine(&quot;Buffered Bytes&quot; + wavePlayerBuffer.BufferedBytes.ToString());\n                    //Console.WriteLine(&quot;Current Read &quot; + wavePlayerBuffer.Read(chunkReady, 0, 8000));\n                    Console.WriteLine(&quot;Current buffId &quot; + buffId);\n                    //\n                     //\n                     wavePlayerBuffer.AddSamples(chunkReady, 0, 8000);\n                     //wavePlayerBuffer.Read(chunkReady,0,8000);\n                     wavePlayerBuffer.DiscardOnBufferOverflow = true;\n                    // wavePlayerBuffer.BufferDuration = TimeSpan.FromSeconds(buffId + 5);\n\n                     if (startPlay &amp;&amp; buffId == 2)\n                     {\n                         startPlay = false;\n                         //Thread.Sleep(200);\n                     }\n                     \n                     // increments the offsets\n                     offset = 0;\n                     buffId++;\n                    \n                }\n                if (buffId &gt; 50) buffId = 0; \n            }\n                catch(Exception ex)\n                {\n                    MessageBox.Show(ex.ToString());\n                }\n            }\n            \n        }</code></pre>\n\n",
    "PostedDate": "2015-05-03T19:02:40.647-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1422603",
    "ThreadId": "636602",
    "Html": "This is a more updated version of the download and play thread.<br />\n<pre><code> void WaitForPackets()\n        {\n            while (Streaming)\n            {\n                //Thread.Sleep(100);\n                try\n                {\n                    byte[] incomingData = client.Receive(ref receivePoint);\n\n                for (int i = 0; i &lt; 1000; i++)\n                {\n                    streamBuffer[buffId, i + offset] = incomingData[i];\n                }\n\n                offset += 1000;\n               \n                if (offset == 8000)\n                {\n                    //creates a one dimensional array to send to be played\n                    byte[] chunkReady = new byte[8000];\n\n                    for (int i = 0; i &lt; 8000; i++)\n                    {\n                        chunkReady[i] = ( (streamBuffer[buffId, i]));\n                    }\n\n                    // associated with waveOut object \n                    //MessageBox.Show(wavePlayerBuffer.BufferLength.ToString());\n                    Console.WriteLine(&quot;Current duration of song&quot; +  wavePlayerBuffer.BufferedDuration.ToString());\n                    Console.WriteLine(&quot;Buffered Bytes&quot; + wavePlayerBuffer.BufferedBytes.ToString());\n                   // Console.WriteLine(&quot;Current Read &quot; + wavePlayerBuffer.Read(chunkReady, 0, 8000));\n                    Console.WriteLine(&quot;Current buffId &quot; + buffId);\n                    //\n                     //\n                     wavePlayerBuffer.AddSamples(chunkReady, 0, 8000);\n                     //wavePlayerBuffer.Read(chunkReady,0,8000);\n                     //wavePlayerBuffer.DiscardOnBufferOverflow = true;\n                    // wavePlayerBuffer.BufferDuration = TimeSpan.FromSeconds(buffId + 5);\n\n                     //if (waveOut.GetPosition() &lt; wavePlayerBuffer.BufferedBytes)\n                     //    waveOut.Pause();\n                     //else if (waveOut.PlaybackState == NAudio.Wave.PlaybackState.Paused)\n                     //    waveOut.Play();\n                       \n\n                     //if (startPlay &amp;&amp; buffId == 2)\n                     //{\n\n                     //    startPlay = false;\n                     //    //Thread.Sleep(200);\n                     //}\n                     \n                     // increments the offsets\n                     offset = 0;\n                     buffId++;\n                    \n                }\n                if (buffId &gt; 9) buffId = 0; \n            }\n                catch(Exception ex)\n                {\n                    MessageBox.Show(ex.ToString());\n                }\n            }\n            \n        }</code></pre>\n\n",
    "PostedDate": "2015-05-03T19:28:08.637-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]