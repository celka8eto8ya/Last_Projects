[
  {
    "Id": "1486164",
    "ThreadId": "658736",
    "Html": "Hello,<br />\nIm a little bit new to audio processing<br />\nIm trying to record a 17khz pitch using the laptop built in mic and then plot the spectrum graph and see how it changes through the whole spectrum, I used the naudio library, first I created a wavein to record the sound then added the samples from the buffer to the sampleaggregator function to return the fft values so that I can plot them. the graph gives correct results but its not too stable and its hard to know what the right frequency is as the magnitude keeps changing to high and low very fast. and also why when there is some noise in the background the 17khz pitch is not detected by the fft or has very small magnitude which cant be recognized even though the noise is usually voice which is far from 17khz.<br />\n<br />\n<em>I tried an application that shows the frequency spectrum and had no issues so the problem is not from the microphone</em><br />\n<br />\nIm using a sample rate of 44100 and a fftlength of 4096<br />\nthis is the main with button when pressed it starts recording<br />\n<pre><code>private void B1_Click(object sender, EventArgs e)\n        {\n             recorder = new WaveIn();\n            recorder.DeviceNumber = 0;\n            recorder.BufferMilliseconds = 50;\n            recorder.WaveFormat = new WaveFormat(samplerate,32, 1);\n            recorder.DataAvailable += new EventHandler&lt;WaveInEventArgs&gt;(waveIn_DataAvailable);\n\n            recorder.StartRecording();\n\n             //fft\n            sampleAggregator.FftCalculated += new EventHandler&lt;FftEventArgs&gt;(FftCalculated);\n            sampleAggregator.PerformFFT = true;\n\n               //chart graph\n            chart1.Series[&quot;wave&quot;].ChartType = System.Windows.Forms.DataVisualization.Charting.SeriesChartType.FastLine;\n                chart1.Series[&quot;wave&quot;].ChartArea = &quot;ChartArea1&quot;;\n        }\n\nprivate void waveIn_DataAvailable(object sender, WaveInEventArgs e)\n        {\n         \n        byte[] buffer = e.Buffer;\n        int bytesRecorded = e.BytesRecorded;\n        int bufferIncrement = recorder.WaveFormat.BlockAlign;        \n        for (int index = 0; index &lt; bytesRecorded; index +=bufferIncrement)\n            {\n                float sample = Convert.ToSingle(buffer[index] + buffer[index + 1] + buffer[index + 2] + buffer[index + 3]);\n                sampleAggregator.Add(sample);\n            }\n        }\n\nvoid FftCalculated(object sender, FftEventArgs e)\n        {\n            chart1.Series[&quot;wave&quot;].Points.Clear();\n            int len= e.Result.Length;\n            double ampl;\n              for (int i = Freq2Index(15000, samplerate, fftLength); i &lt; Freq2Index(21000, samplerate,fftLength); i++)\n            {\n\n                ampl = Math.Sqrt((e.Result[i].X * e.Result[i].X) + (e.Result[i].Y * e.Result[i].Y));\n                 chart1.Series[&quot;wave&quot;].Points.AddXY((int)Index2Freq(i, samplerate, fftLength), ampl);\n            }\n        }</code></pre>\n\nand this the sampleaggregator class<br />\n<pre><code>using NAudio.Dsp; // The Complex and FFT are here!\n\nclass SampleAggregator\n{\n    // FFT\n    public event System.EventHandler&lt;FftEventArgs&gt; FftCalculated;\n    public bool PerformFFT { get; set; }\n\n    // This Complex is NAudio's own! \n    private Complex[] fftBuffer;\n    private FftEventArgs fftArgs;\n    private int fftPos;\n    private int fftLength;\n    private int m;\n\n    public SampleAggregator(int fftLength)\n    {\n        if (!IsPowerOfTwo(fftLength))\n        {\n            throw new System.ArgumentException(&quot;FFT Length must be a power of two&quot;);\n        }\n        this.m = (int)System.Math.Log(fftLength, 2.0);\n        this.fftLength = fftLength;\n        this.fftBuffer = new Complex[fftLength];\n        this.fftArgs = new FftEventArgs(fftBuffer);\n    }\n\n    bool IsPowerOfTwo(int x)\n    {\n        return (x &amp; (x - 1)) == 0;\n    }\n\n    public void Add(float value)\n    {\n        if (PerformFFT &amp;&amp; FftCalculated != null)\n        {\n            // Remember the window function! There are many others as well.\n            fftBuffer[fftPos].X = (float)(value * FastFourierTransform.HammingWindow(fftPos, fftLength));\n            fftBuffer[fftPos].Y = 0; // This is always zero with audio.\n            fftPos++;\n            if (fftPos &gt;= fftLength)\n            {\n                fftPos = 0;\n                FastFourierTransform.FFT(true, m, fftBuffer);\n                FftCalculated(this, fftArgs);\n            }\n        }\n    }\n}\n\npublic class FftEventArgs : System.EventArgs\n{\n    public FftEventArgs(Complex[] result)\n    {\n        this.Result = result;\n    }\n    public Complex[] Result { get; private set; }\n}</code></pre>\n\nwhat can i do to get more stable and accurate measures from the fft function and also not affected by any other frequencies.<br />\n<br />\ncan you help or give any suggestion that i can use that can make it better.<br />\nand thank you very much<br />\n",
    "PostedDate": "2016-10-15T06:31:15.173-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1486167",
    "ThreadId": "658736",
    "Html": "for starters, your method of getting the floating point samples is flawed. You can't add together the four byte values. Also, you're not recording IEEE float, but 32 bit integer samples. So you'd need to use BitConverter.ToInt32 on every four bytes. I'd record at 16 bit, use BitConverter.ToInt16 and then divide by 32768f to turn it into a floating point sample.<br />\n",
    "PostedDate": "2016-10-15T07:00:53.7-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1486170",
    "ThreadId": "658736",
    "Html": "Thank you very much mark, I have been looking for an answer for a couple of days now and didnt know what was the problem. I tried your solution and now it works great .\r<br />\nThe signal is stable and its not affected by noise.\r<br />\nI really appreciate your help<br />\n",
    "PostedDate": "2016-10-15T07:13:19.837-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]