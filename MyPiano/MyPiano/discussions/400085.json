[
  {
    "Id": "929562",
    "ThreadId": "400085",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I think the library NAudio does not support 32-bit PCM audio, so here is my modest contribution by adding a class Pcm32BitsToSampleProvider and a small change in the class SampleProviderConverters.<br>\r\nSorry for the quality of my english;-)</p>\r\n<p>&nbsp;</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>\r\n<span style=\"color:green\">/* Complement Format PCM\r\n * \r\n * ajout dans SampleProviderConverters.cs\r\n * \r\n * dans ConvertWaveProviderIntoSampleProvider\r\n * \r\n * else if (waveProvider.WaveFormat.BitsPerSample == 32)\r\n * {\r\n *      sampleProvider = new Pcm32BitToSampleProvider(waveProvider);\r\n * }\r\n * \r\n */</span>\r\n<span style=\"color:blue\">namespace</span> NAudio.Wave.SampleProviders\r\n{\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> Converts an IWaveProvider containing 32 bit PCM to an</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> ISampleProvider</span>\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> Pcm32BitToSampleProvider : SampleProviderConverterBase\r\n    {\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Initialises a new instance of Pcm32BitToSampleProvider</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;source&quot;&gt;</span><span style=\"color:green\">Source Wave Provider&lt;/param&gt;</span>\r\n        <span style=\"color:blue\">public</span> Pcm32BitToSampleProvider(IWaveProvider source)\r\n            : <span style=\"color:blue\">base</span>(source)\r\n        {\r\n\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Reads floating point samples from this sample provider</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;buffer&quot;&gt;</span><span style=\"color:green\">sample buffer&lt;/param&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;offset&quot;&gt;</span><span style=\"color:green\">offset within sample buffer to write to&lt;/param&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;count&quot;&gt;</span><span style=\"color:green\">number of samples required&lt;/param&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span><span style=\"color:green\">number of samples provided&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">int</span> Read(<span style=\"color:blue\">float</span>[] buffer, <span style=\"color:blue\">int</span> offset, <span style=\"color:blue\">int</span> count)\r\n        {\r\n            <span style=\"color:blue\">int</span> sourceBytesRequired = count * 4;\r\n            EnsureSourceBuffer(sourceBytesRequired);\r\n            <span style=\"color:blue\">int</span> bytesRead = source.Read(sourceBuffer, 0, sourceBytesRequired);\r\n            <span style=\"color:blue\">int</span> outIndex = offset;\r\n            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> n = 0; n &lt; bytesRead; n &#43;= 4)\r\n            {\r\n                buffer[outIndex&#43;&#43;] = (((<span style=\"color:blue\">sbyte</span>)sourceBuffer[n&#43;3] &lt;&lt; 24 |</pre>\r\n<pre><span style=\"white-space:pre\">\t\t\t\t\t</span>      sourceBuffer[n &#43; 2] &lt;&lt; 16) |</pre>\r\n<pre><span style=\"white-space:pre\">\t\t\t\t\t</span>      (sourceBuffer[n &#43; 1] &lt;&lt; 8) |</pre>\r\n<pre><span style=\"white-space:pre\">\t\t\t\t\t</span>      sourceBuffer[n]) / 2147483648f;</pre>\r\n<pre>            }\r\n            <span style=\"color:blue\">return</span> bytesRead / 4;\r\n        }\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>And modify SampleProviderConverters</p>\r\n<p>&nbsp;</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>...\r\n\r\n}\r\n<span style=\"color:blue\">else</span> <span style=\"color:blue\">if</span> (waveProvider.WaveFormat.BitsPerSample == 32)\r\n{\r\n\tsampleProvider = <span style=\"color:blue\">new</span> Pcm32BitToSampleProvider(waveProvider);\r\n}\r\n<span style=\"color:blue\">else</span>\r\n{\r\n          <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> InvalidOperationException(<span style=\"color:#a31515\">&quot;Unsupported operation&quot;</span>);\r\n}\r\n\r\n...\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>Best Regards, Manu.N</p>\r\n",
    "PostedDate": "2012-10-19T11:46:46.033-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "930051",
    "ThreadId": "400085",
    "Html": "<p>thanks, this is checked in</p>",
    "PostedDate": "2012-10-21T09:11:43.673-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]